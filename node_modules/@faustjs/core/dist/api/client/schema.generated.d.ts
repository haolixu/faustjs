import { SchemaUnionsKey } from 'gqty';
export declare type Maybe<T> = T | null;
export declare type Exact<T extends {
    [key: string]: unknown;
}> = {
    [K in keyof T]: T[K];
};
export declare type MakeOptional<T, K extends keyof T> = Omit<T, K> & {
    [SubKey in K]?: Maybe<T[SubKey]>;
};
export declare type MakeMaybe<T, K extends keyof T> = Omit<T, K> & {
    [SubKey in K]: Maybe<T[SubKey]>;
};
export interface Scalars {
    ID: string;
    String: string;
    Boolean: boolean;
    Int: number;
    Float: number;
}
export interface RootQueryToCategoryConnectionWhereArgs {
    cacheDomain?: Maybe<Scalars['String']>;
    childOf?: Maybe<Scalars['Int']>;
    childless?: Maybe<Scalars['Boolean']>;
    descriptionLike?: Maybe<Scalars['String']>;
    exclude?: Maybe<Array<Maybe<Scalars['ID']>>>;
    excludeTree?: Maybe<Array<Maybe<Scalars['ID']>>>;
    hideEmpty?: Maybe<Scalars['Boolean']>;
    hierarchical?: Maybe<Scalars['Boolean']>;
    include?: Maybe<Array<Maybe<Scalars['ID']>>>;
    name?: Maybe<Array<Maybe<Scalars['String']>>>;
    nameLike?: Maybe<Scalars['String']>;
    objectIds?: Maybe<Array<Maybe<Scalars['ID']>>>;
    order?: Maybe<OrderEnum>;
    orderby?: Maybe<TermObjectsConnectionOrderbyEnum>;
    padCounts?: Maybe<Scalars['Boolean']>;
    parent?: Maybe<Scalars['Int']>;
    search?: Maybe<Scalars['String']>;
    slug?: Maybe<Array<Maybe<Scalars['String']>>>;
    termTaxonomId?: Maybe<Array<Maybe<Scalars['ID']>>>;
    updateTermMetaCache?: Maybe<Scalars['Boolean']>;
}
export declare enum OrderEnum {
    ASC = "ASC",
    DESC = "DESC"
}
export declare enum TermObjectsConnectionOrderbyEnum {
    COUNT = "COUNT",
    DESCRIPTION = "DESCRIPTION",
    NAME = "NAME",
    SLUG = "SLUG",
    TERM_GROUP = "TERM_GROUP",
    TERM_ID = "TERM_ID",
    TERM_ORDER = "TERM_ORDER"
}
export interface CategoryToCategoryConnectionWhereArgs {
    cacheDomain?: Maybe<Scalars['String']>;
    childOf?: Maybe<Scalars['Int']>;
    childless?: Maybe<Scalars['Boolean']>;
    descriptionLike?: Maybe<Scalars['String']>;
    exclude?: Maybe<Array<Maybe<Scalars['ID']>>>;
    excludeTree?: Maybe<Array<Maybe<Scalars['ID']>>>;
    hideEmpty?: Maybe<Scalars['Boolean']>;
    hierarchical?: Maybe<Scalars['Boolean']>;
    include?: Maybe<Array<Maybe<Scalars['ID']>>>;
    name?: Maybe<Array<Maybe<Scalars['String']>>>;
    nameLike?: Maybe<Scalars['String']>;
    objectIds?: Maybe<Array<Maybe<Scalars['ID']>>>;
    order?: Maybe<OrderEnum>;
    orderby?: Maybe<TermObjectsConnectionOrderbyEnum>;
    padCounts?: Maybe<Scalars['Boolean']>;
    parent?: Maybe<Scalars['Int']>;
    search?: Maybe<Scalars['String']>;
    slug?: Maybe<Array<Maybe<Scalars['String']>>>;
    termTaxonomId?: Maybe<Array<Maybe<Scalars['ID']>>>;
    updateTermMetaCache?: Maybe<Scalars['Boolean']>;
}
export interface CategoryToContentNodeConnectionWhereArgs {
    contentTypes?: Maybe<Array<Maybe<ContentTypesOfCategoryEnum>>>;
    dateQuery?: Maybe<DateQueryInput>;
    hasPassword?: Maybe<Scalars['Boolean']>;
    id?: Maybe<Scalars['Int']>;
    in?: Maybe<Array<Maybe<Scalars['ID']>>>;
    mimeType?: Maybe<MimeTypeEnum>;
    name?: Maybe<Scalars['String']>;
    nameIn?: Maybe<Array<Maybe<Scalars['String']>>>;
    notIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    orderby?: Maybe<Array<Maybe<PostObjectsConnectionOrderbyInput>>>;
    parent?: Maybe<Scalars['ID']>;
    parentIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    parentNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    password?: Maybe<Scalars['String']>;
    search?: Maybe<Scalars['String']>;
    stati?: Maybe<Array<Maybe<PostStatusEnum>>>;
    status?: Maybe<PostStatusEnum>;
    title?: Maybe<Scalars['String']>;
}
export declare enum ContentTypesOfCategoryEnum {
    POST = "POST"
}
export interface DateQueryInput {
    after?: Maybe<DateInput>;
    before?: Maybe<DateInput>;
    column?: Maybe<PostObjectsConnectionDateColumnEnum>;
    compare?: Maybe<Scalars['String']>;
    day?: Maybe<Scalars['Int']>;
    hour?: Maybe<Scalars['Int']>;
    inclusive?: Maybe<Scalars['Boolean']>;
    minute?: Maybe<Scalars['Int']>;
    month?: Maybe<Scalars['Int']>;
    relation?: Maybe<RelationEnum>;
    second?: Maybe<Scalars['Int']>;
    week?: Maybe<Scalars['Int']>;
    year?: Maybe<Scalars['Int']>;
}
export interface DateInput {
    day?: Maybe<Scalars['Int']>;
    month?: Maybe<Scalars['Int']>;
    year?: Maybe<Scalars['Int']>;
}
export declare enum PostObjectsConnectionDateColumnEnum {
    DATE = "DATE",
    MODIFIED = "MODIFIED"
}
export declare enum RelationEnum {
    AND = "AND",
    OR = "OR"
}
export declare enum MimeTypeEnum {
    APPLICATION_JAVA = "APPLICATION_JAVA",
    APPLICATION_MSWORD = "APPLICATION_MSWORD",
    APPLICATION_OCTET_STREAM = "APPLICATION_OCTET_STREAM",
    APPLICATION_ONENOTE = "APPLICATION_ONENOTE",
    APPLICATION_OXPS = "APPLICATION_OXPS",
    APPLICATION_PDF = "APPLICATION_PDF",
    APPLICATION_RAR = "APPLICATION_RAR",
    APPLICATION_RTF = "APPLICATION_RTF",
    APPLICATION_TTAF_XML = "APPLICATION_TTAF_XML",
    APPLICATION_VND_APPLE_KEYNOTE = "APPLICATION_VND_APPLE_KEYNOTE",
    APPLICATION_VND_APPLE_NUMBERS = "APPLICATION_VND_APPLE_NUMBERS",
    APPLICATION_VND_APPLE_PAGES = "APPLICATION_VND_APPLE_PAGES",
    APPLICATION_VND_MS_ACCESS = "APPLICATION_VND_MS_ACCESS",
    APPLICATION_VND_MS_EXCEL = "APPLICATION_VND_MS_EXCEL",
    APPLICATION_VND_MS_EXCEL_ADDIN_MACROENABLED_12 = "APPLICATION_VND_MS_EXCEL_ADDIN_MACROENABLED_12",
    APPLICATION_VND_MS_EXCEL_SHEET_BINARY_MACROENABLED_12 = "APPLICATION_VND_MS_EXCEL_SHEET_BINARY_MACROENABLED_12",
    APPLICATION_VND_MS_EXCEL_SHEET_MACROENABLED_12 = "APPLICATION_VND_MS_EXCEL_SHEET_MACROENABLED_12",
    APPLICATION_VND_MS_EXCEL_TEMPLATE_MACROENABLED_12 = "APPLICATION_VND_MS_EXCEL_TEMPLATE_MACROENABLED_12",
    APPLICATION_VND_MS_POWERPOINT = "APPLICATION_VND_MS_POWERPOINT",
    APPLICATION_VND_MS_POWERPOINT_ADDIN_MACROENABLED_12 = "APPLICATION_VND_MS_POWERPOINT_ADDIN_MACROENABLED_12",
    APPLICATION_VND_MS_POWERPOINT_PRESENTATION_MACROENABLED_12 = "APPLICATION_VND_MS_POWERPOINT_PRESENTATION_MACROENABLED_12",
    APPLICATION_VND_MS_POWERPOINT_SLIDESHOW_MACROENABLED_12 = "APPLICATION_VND_MS_POWERPOINT_SLIDESHOW_MACROENABLED_12",
    APPLICATION_VND_MS_POWERPOINT_SLIDE_MACROENABLED_12 = "APPLICATION_VND_MS_POWERPOINT_SLIDE_MACROENABLED_12",
    APPLICATION_VND_MS_POWERPOINT_TEMPLATE_MACROENABLED_12 = "APPLICATION_VND_MS_POWERPOINT_TEMPLATE_MACROENABLED_12",
    APPLICATION_VND_MS_PROJECT = "APPLICATION_VND_MS_PROJECT",
    APPLICATION_VND_MS_WORD_DOCUMENT_MACROENABLED_12 = "APPLICATION_VND_MS_WORD_DOCUMENT_MACROENABLED_12",
    APPLICATION_VND_MS_WORD_TEMPLATE_MACROENABLED_12 = "APPLICATION_VND_MS_WORD_TEMPLATE_MACROENABLED_12",
    APPLICATION_VND_MS_WRITE = "APPLICATION_VND_MS_WRITE",
    APPLICATION_VND_MS_XPSDOCUMENT = "APPLICATION_VND_MS_XPSDOCUMENT",
    APPLICATION_VND_OASIS_OPENDOCUMENT_CHART = "APPLICATION_VND_OASIS_OPENDOCUMENT_CHART",
    APPLICATION_VND_OASIS_OPENDOCUMENT_DATABASE = "APPLICATION_VND_OASIS_OPENDOCUMENT_DATABASE",
    APPLICATION_VND_OASIS_OPENDOCUMENT_FORMULA = "APPLICATION_VND_OASIS_OPENDOCUMENT_FORMULA",
    APPLICATION_VND_OASIS_OPENDOCUMENT_GRAPHICS = "APPLICATION_VND_OASIS_OPENDOCUMENT_GRAPHICS",
    APPLICATION_VND_OASIS_OPENDOCUMENT_PRESENTATION = "APPLICATION_VND_OASIS_OPENDOCUMENT_PRESENTATION",
    APPLICATION_VND_OASIS_OPENDOCUMENT_SPREADSHEET = "APPLICATION_VND_OASIS_OPENDOCUMENT_SPREADSHEET",
    APPLICATION_VND_OASIS_OPENDOCUMENT_TEXT = "APPLICATION_VND_OASIS_OPENDOCUMENT_TEXT",
    APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_PRESENTATION = "APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_PRESENTATION",
    APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_SLIDE = "APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_SLIDE",
    APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_SLIDESHOW = "APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_SLIDESHOW",
    APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_TEMPLATE = "APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_TEMPLATE",
    APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_SHEET = "APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_SHEET",
    APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_TEMPLATE = "APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_TEMPLATE",
    APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_WORDPROCESSINGML_DOCUMENT = "APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_WORDPROCESSINGML_DOCUMENT",
    APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_WORDPROCESSINGML_TEMPLATE = "APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_WORDPROCESSINGML_TEMPLATE",
    APPLICATION_WORDPERFECT = "APPLICATION_WORDPERFECT",
    APPLICATION_X_7Z_COMPRESSED = "APPLICATION_X_7Z_COMPRESSED",
    APPLICATION_X_GZIP = "APPLICATION_X_GZIP",
    APPLICATION_X_TAR = "APPLICATION_X_TAR",
    APPLICATION_ZIP = "APPLICATION_ZIP",
    AUDIO_AAC = "AUDIO_AAC",
    AUDIO_FLAC = "AUDIO_FLAC",
    AUDIO_MIDI = "AUDIO_MIDI",
    AUDIO_MPEG = "AUDIO_MPEG",
    AUDIO_OGG = "AUDIO_OGG",
    AUDIO_WAV = "AUDIO_WAV",
    AUDIO_X_MATROSKA = "AUDIO_X_MATROSKA",
    AUDIO_X_MS_WAX = "AUDIO_X_MS_WAX",
    AUDIO_X_MS_WMA = "AUDIO_X_MS_WMA",
    AUDIO_X_REALAUDIO = "AUDIO_X_REALAUDIO",
    IMAGE_BMP = "IMAGE_BMP",
    IMAGE_GIF = "IMAGE_GIF",
    IMAGE_HEIC = "IMAGE_HEIC",
    IMAGE_JPEG = "IMAGE_JPEG",
    IMAGE_PNG = "IMAGE_PNG",
    IMAGE_TIFF = "IMAGE_TIFF",
    IMAGE_WEBP = "IMAGE_WEBP",
    IMAGE_X_ICON = "IMAGE_X_ICON",
    TEXT_CALENDAR = "TEXT_CALENDAR",
    TEXT_CSS = "TEXT_CSS",
    TEXT_CSV = "TEXT_CSV",
    TEXT_PLAIN = "TEXT_PLAIN",
    TEXT_RICHTEXT = "TEXT_RICHTEXT",
    TEXT_TAB_SEPARATED_VALUES = "TEXT_TAB_SEPARATED_VALUES",
    TEXT_VTT = "TEXT_VTT",
    VIDEO_3GPP = "VIDEO_3GPP",
    VIDEO_3GPP2 = "VIDEO_3GPP2",
    VIDEO_AVI = "VIDEO_AVI",
    VIDEO_DIVX = "VIDEO_DIVX",
    VIDEO_MP4 = "VIDEO_MP4",
    VIDEO_MPEG = "VIDEO_MPEG",
    VIDEO_OGG = "VIDEO_OGG",
    VIDEO_QUICKTIME = "VIDEO_QUICKTIME",
    VIDEO_WEBM = "VIDEO_WEBM",
    VIDEO_X_FLV = "VIDEO_X_FLV",
    VIDEO_X_MATROSKA = "VIDEO_X_MATROSKA",
    VIDEO_X_MS_ASF = "VIDEO_X_MS_ASF",
    VIDEO_X_MS_WM = "VIDEO_X_MS_WM",
    VIDEO_X_MS_WMV = "VIDEO_X_MS_WMV",
    VIDEO_X_MS_WMX = "VIDEO_X_MS_WMX"
}
export interface PostObjectsConnectionOrderbyInput {
    field: PostObjectsConnectionOrderbyEnum;
    order: OrderEnum;
}
export declare enum PostObjectsConnectionOrderbyEnum {
    AUTHOR = "AUTHOR",
    COMMENT_COUNT = "COMMENT_COUNT",
    DATE = "DATE",
    IN = "IN",
    MENU_ORDER = "MENU_ORDER",
    MODIFIED = "MODIFIED",
    NAME_IN = "NAME_IN",
    PARENT = "PARENT",
    SLUG = "SLUG",
    TITLE = "TITLE"
}
export declare enum PostStatusEnum {
    AUTO_DRAFT = "AUTO_DRAFT",
    DRAFT = "DRAFT",
    FUTURE = "FUTURE",
    INHERIT = "INHERIT",
    PENDING = "PENDING",
    PRIVATE = "PRIVATE",
    PUBLISH = "PUBLISH",
    REQUEST_COMPLETED = "REQUEST_COMPLETED",
    REQUEST_CONFIRMED = "REQUEST_CONFIRMED",
    REQUEST_FAILED = "REQUEST_FAILED",
    REQUEST_PENDING = "REQUEST_PENDING",
    TRASH = "TRASH"
}
export interface ContentTypeToContentNodeConnectionWhereArgs {
    contentTypes?: Maybe<Array<Maybe<ContentTypeEnum>>>;
    dateQuery?: Maybe<DateQueryInput>;
    hasPassword?: Maybe<Scalars['Boolean']>;
    id?: Maybe<Scalars['Int']>;
    in?: Maybe<Array<Maybe<Scalars['ID']>>>;
    mimeType?: Maybe<MimeTypeEnum>;
    name?: Maybe<Scalars['String']>;
    nameIn?: Maybe<Array<Maybe<Scalars['String']>>>;
    notIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    orderby?: Maybe<Array<Maybe<PostObjectsConnectionOrderbyInput>>>;
    parent?: Maybe<Scalars['ID']>;
    parentIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    parentNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    password?: Maybe<Scalars['String']>;
    search?: Maybe<Scalars['String']>;
    stati?: Maybe<Array<Maybe<PostStatusEnum>>>;
    status?: Maybe<PostStatusEnum>;
    title?: Maybe<Scalars['String']>;
}
export declare enum ContentTypeEnum {
    ATTACHMENT = "ATTACHMENT",
    PAGE = "PAGE",
    POST = "POST"
}
export declare enum AvatarRatingEnum {
    G = "G",
    PG = "PG",
    R = "R",
    X = "X"
}
export interface UserToCommentConnectionWhereArgs {
    authorEmail?: Maybe<Scalars['String']>;
    authorIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    authorNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    authorUrl?: Maybe<Scalars['String']>;
    commentIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    commentNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    commentType?: Maybe<Scalars['String']>;
    commentTypeIn?: Maybe<Array<Maybe<Scalars['String']>>>;
    commentTypeNotIn?: Maybe<Scalars['String']>;
    contentAuthor?: Maybe<Array<Maybe<Scalars['ID']>>>;
    contentAuthorIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    contentAuthorNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    contentId?: Maybe<Scalars['ID']>;
    contentIdIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    contentIdNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    contentName?: Maybe<Scalars['String']>;
    contentParent?: Maybe<Scalars['Int']>;
    contentStatus?: Maybe<Array<Maybe<PostStatusEnum>>>;
    contentType?: Maybe<Array<Maybe<ContentTypeEnum>>>;
    includeUnapproved?: Maybe<Array<Maybe<Scalars['ID']>>>;
    karma?: Maybe<Scalars['Int']>;
    order?: Maybe<OrderEnum>;
    orderby?: Maybe<CommentsConnectionOrderbyEnum>;
    parent?: Maybe<Scalars['Int']>;
    parentIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    parentNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    search?: Maybe<Scalars['String']>;
    status?: Maybe<Scalars['String']>;
    userId?: Maybe<Scalars['ID']>;
}
export declare enum CommentsConnectionOrderbyEnum {
    COMMENT_AGENT = "COMMENT_AGENT",
    COMMENT_APPROVED = "COMMENT_APPROVED",
    COMMENT_AUTHOR = "COMMENT_AUTHOR",
    COMMENT_AUTHOR_EMAIL = "COMMENT_AUTHOR_EMAIL",
    COMMENT_AUTHOR_IP = "COMMENT_AUTHOR_IP",
    COMMENT_AUTHOR_URL = "COMMENT_AUTHOR_URL",
    COMMENT_CONTENT = "COMMENT_CONTENT",
    COMMENT_DATE = "COMMENT_DATE",
    COMMENT_DATE_GMT = "COMMENT_DATE_GMT",
    COMMENT_ID = "COMMENT_ID",
    COMMENT_IN = "COMMENT_IN",
    COMMENT_KARMA = "COMMENT_KARMA",
    COMMENT_PARENT = "COMMENT_PARENT",
    COMMENT_POST_ID = "COMMENT_POST_ID",
    COMMENT_TYPE = "COMMENT_TYPE",
    USER_ID = "USER_ID"
}
export declare enum PostObjectFieldFormatEnum {
    RAW = "RAW",
    RENDERED = "RENDERED"
}
export interface CommentToParentCommentConnectionWhereArgs {
    authorEmail?: Maybe<Scalars['String']>;
    authorIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    authorNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    authorUrl?: Maybe<Scalars['String']>;
    commentIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    commentNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    commentType?: Maybe<Scalars['String']>;
    commentTypeIn?: Maybe<Array<Maybe<Scalars['String']>>>;
    commentTypeNotIn?: Maybe<Scalars['String']>;
    contentAuthor?: Maybe<Array<Maybe<Scalars['ID']>>>;
    contentAuthorIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    contentAuthorNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    contentId?: Maybe<Scalars['ID']>;
    contentIdIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    contentIdNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    contentName?: Maybe<Scalars['String']>;
    contentParent?: Maybe<Scalars['Int']>;
    contentStatus?: Maybe<Array<Maybe<PostStatusEnum>>>;
    contentType?: Maybe<Array<Maybe<ContentTypeEnum>>>;
    includeUnapproved?: Maybe<Array<Maybe<Scalars['ID']>>>;
    karma?: Maybe<Scalars['Int']>;
    order?: Maybe<OrderEnum>;
    orderby?: Maybe<CommentsConnectionOrderbyEnum>;
    parent?: Maybe<Scalars['Int']>;
    parentIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    parentNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    search?: Maybe<Scalars['String']>;
    status?: Maybe<Scalars['String']>;
    userId?: Maybe<Scalars['ID']>;
}
export interface CommentToCommentConnectionWhereArgs {
    authorEmail?: Maybe<Scalars['String']>;
    authorIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    authorNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    authorUrl?: Maybe<Scalars['String']>;
    commentIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    commentNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    commentType?: Maybe<Scalars['String']>;
    commentTypeIn?: Maybe<Array<Maybe<Scalars['String']>>>;
    commentTypeNotIn?: Maybe<Scalars['String']>;
    contentAuthor?: Maybe<Array<Maybe<Scalars['ID']>>>;
    contentAuthorIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    contentAuthorNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    contentId?: Maybe<Scalars['ID']>;
    contentIdIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    contentIdNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    contentName?: Maybe<Scalars['String']>;
    contentParent?: Maybe<Scalars['Int']>;
    contentStatus?: Maybe<Array<Maybe<PostStatusEnum>>>;
    contentType?: Maybe<Array<Maybe<ContentTypeEnum>>>;
    includeUnapproved?: Maybe<Array<Maybe<Scalars['ID']>>>;
    karma?: Maybe<Scalars['Int']>;
    order?: Maybe<OrderEnum>;
    orderby?: Maybe<CommentsConnectionOrderbyEnum>;
    parent?: Maybe<Scalars['Int']>;
    parentIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    parentNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    search?: Maybe<Scalars['String']>;
    status?: Maybe<Scalars['String']>;
    userId?: Maybe<Scalars['ID']>;
}
export interface UserToMediaItemConnectionWhereArgs {
    author?: Maybe<Scalars['Int']>;
    authorIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    authorName?: Maybe<Scalars['String']>;
    authorNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    dateQuery?: Maybe<DateQueryInput>;
    hasPassword?: Maybe<Scalars['Boolean']>;
    id?: Maybe<Scalars['Int']>;
    in?: Maybe<Array<Maybe<Scalars['ID']>>>;
    mimeType?: Maybe<MimeTypeEnum>;
    name?: Maybe<Scalars['String']>;
    nameIn?: Maybe<Array<Maybe<Scalars['String']>>>;
    notIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    orderby?: Maybe<Array<Maybe<PostObjectsConnectionOrderbyInput>>>;
    parent?: Maybe<Scalars['ID']>;
    parentIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    parentNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    password?: Maybe<Scalars['String']>;
    search?: Maybe<Scalars['String']>;
    stati?: Maybe<Array<Maybe<PostStatusEnum>>>;
    status?: Maybe<PostStatusEnum>;
    title?: Maybe<Scalars['String']>;
}
export interface HierarchicalContentNodeToContentNodeAncestorsConnectionWhereArgs {
    contentTypes?: Maybe<Array<Maybe<ContentTypeEnum>>>;
    dateQuery?: Maybe<DateQueryInput>;
    hasPassword?: Maybe<Scalars['Boolean']>;
    id?: Maybe<Scalars['Int']>;
    in?: Maybe<Array<Maybe<Scalars['ID']>>>;
    mimeType?: Maybe<MimeTypeEnum>;
    name?: Maybe<Scalars['String']>;
    nameIn?: Maybe<Array<Maybe<Scalars['String']>>>;
    notIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    orderby?: Maybe<Array<Maybe<PostObjectsConnectionOrderbyInput>>>;
    parent?: Maybe<Scalars['ID']>;
    parentIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    parentNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    password?: Maybe<Scalars['String']>;
    search?: Maybe<Scalars['String']>;
    stati?: Maybe<Array<Maybe<PostStatusEnum>>>;
    status?: Maybe<PostStatusEnum>;
    title?: Maybe<Scalars['String']>;
}
export interface HierarchicalContentNodeToContentNodeChildrenConnectionWhereArgs {
    contentTypes?: Maybe<Array<Maybe<ContentTypeEnum>>>;
    dateQuery?: Maybe<DateQueryInput>;
    hasPassword?: Maybe<Scalars['Boolean']>;
    id?: Maybe<Scalars['Int']>;
    in?: Maybe<Array<Maybe<Scalars['ID']>>>;
    mimeType?: Maybe<MimeTypeEnum>;
    name?: Maybe<Scalars['String']>;
    nameIn?: Maybe<Array<Maybe<Scalars['String']>>>;
    notIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    orderby?: Maybe<Array<Maybe<PostObjectsConnectionOrderbyInput>>>;
    parent?: Maybe<Scalars['ID']>;
    parentIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    parentNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    password?: Maybe<Scalars['String']>;
    search?: Maybe<Scalars['String']>;
    stati?: Maybe<Array<Maybe<PostStatusEnum>>>;
    status?: Maybe<PostStatusEnum>;
    title?: Maybe<Scalars['String']>;
}
export interface MediaItemToCommentConnectionWhereArgs {
    authorEmail?: Maybe<Scalars['String']>;
    authorIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    authorNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    authorUrl?: Maybe<Scalars['String']>;
    commentIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    commentNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    commentType?: Maybe<Scalars['String']>;
    commentTypeIn?: Maybe<Array<Maybe<Scalars['String']>>>;
    commentTypeNotIn?: Maybe<Scalars['String']>;
    contentAuthor?: Maybe<Array<Maybe<Scalars['ID']>>>;
    contentAuthorIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    contentAuthorNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    contentId?: Maybe<Scalars['ID']>;
    contentIdIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    contentIdNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    contentName?: Maybe<Scalars['String']>;
    contentParent?: Maybe<Scalars['Int']>;
    contentStatus?: Maybe<Array<Maybe<PostStatusEnum>>>;
    contentType?: Maybe<Array<Maybe<ContentTypeEnum>>>;
    includeUnapproved?: Maybe<Array<Maybe<Scalars['ID']>>>;
    karma?: Maybe<Scalars['Int']>;
    order?: Maybe<OrderEnum>;
    orderby?: Maybe<CommentsConnectionOrderbyEnum>;
    parent?: Maybe<Scalars['Int']>;
    parentIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    parentNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    search?: Maybe<Scalars['String']>;
    status?: Maybe<Scalars['String']>;
    userId?: Maybe<Scalars['ID']>;
}
export declare enum MediaItemSizeEnum {
    LARGE = "LARGE",
    MEDIUM = "MEDIUM",
    MEDIUM_LARGE = "MEDIUM_LARGE",
    POST_THUMBNAIL = "POST_THUMBNAIL",
    THUMBNAIL = "THUMBNAIL",
    _1536X1536 = "_1536X1536",
    _2048X2048 = "_2048X2048"
}
export interface UserToPageConnectionWhereArgs {
    author?: Maybe<Scalars['Int']>;
    authorIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    authorName?: Maybe<Scalars['String']>;
    authorNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    dateQuery?: Maybe<DateQueryInput>;
    hasPassword?: Maybe<Scalars['Boolean']>;
    id?: Maybe<Scalars['Int']>;
    in?: Maybe<Array<Maybe<Scalars['ID']>>>;
    mimeType?: Maybe<MimeTypeEnum>;
    name?: Maybe<Scalars['String']>;
    nameIn?: Maybe<Array<Maybe<Scalars['String']>>>;
    notIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    orderby?: Maybe<Array<Maybe<PostObjectsConnectionOrderbyInput>>>;
    parent?: Maybe<Scalars['ID']>;
    parentIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    parentNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    password?: Maybe<Scalars['String']>;
    search?: Maybe<Scalars['String']>;
    stati?: Maybe<Array<Maybe<PostStatusEnum>>>;
    status?: Maybe<PostStatusEnum>;
    title?: Maybe<Scalars['String']>;
}
export interface PageToCommentConnectionWhereArgs {
    authorEmail?: Maybe<Scalars['String']>;
    authorIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    authorNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    authorUrl?: Maybe<Scalars['String']>;
    commentIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    commentNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    commentType?: Maybe<Scalars['String']>;
    commentTypeIn?: Maybe<Array<Maybe<Scalars['String']>>>;
    commentTypeNotIn?: Maybe<Scalars['String']>;
    contentAuthor?: Maybe<Array<Maybe<Scalars['ID']>>>;
    contentAuthorIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    contentAuthorNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    contentId?: Maybe<Scalars['ID']>;
    contentIdIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    contentIdNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    contentName?: Maybe<Scalars['String']>;
    contentParent?: Maybe<Scalars['Int']>;
    contentStatus?: Maybe<Array<Maybe<PostStatusEnum>>>;
    contentType?: Maybe<Array<Maybe<ContentTypeEnum>>>;
    includeUnapproved?: Maybe<Array<Maybe<Scalars['ID']>>>;
    karma?: Maybe<Scalars['Int']>;
    order?: Maybe<OrderEnum>;
    orderby?: Maybe<CommentsConnectionOrderbyEnum>;
    parent?: Maybe<Scalars['Int']>;
    parentIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    parentNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    search?: Maybe<Scalars['String']>;
    status?: Maybe<Scalars['String']>;
    userId?: Maybe<Scalars['ID']>;
}
export interface PageToRevisionConnectionWhereArgs {
    author?: Maybe<Scalars['Int']>;
    authorIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    authorName?: Maybe<Scalars['String']>;
    authorNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    dateQuery?: Maybe<DateQueryInput>;
    hasPassword?: Maybe<Scalars['Boolean']>;
    id?: Maybe<Scalars['Int']>;
    in?: Maybe<Array<Maybe<Scalars['ID']>>>;
    mimeType?: Maybe<MimeTypeEnum>;
    name?: Maybe<Scalars['String']>;
    nameIn?: Maybe<Array<Maybe<Scalars['String']>>>;
    notIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    orderby?: Maybe<Array<Maybe<PostObjectsConnectionOrderbyInput>>>;
    parent?: Maybe<Scalars['ID']>;
    parentIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    parentNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    password?: Maybe<Scalars['String']>;
    search?: Maybe<Scalars['String']>;
    stati?: Maybe<Array<Maybe<PostStatusEnum>>>;
    status?: Maybe<PostStatusEnum>;
    title?: Maybe<Scalars['String']>;
}
export interface UserToPostConnectionWhereArgs {
    author?: Maybe<Scalars['Int']>;
    authorIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    authorName?: Maybe<Scalars['String']>;
    authorNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    categoryId?: Maybe<Scalars['Int']>;
    categoryIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    categoryName?: Maybe<Scalars['String']>;
    categoryNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    dateQuery?: Maybe<DateQueryInput>;
    hasPassword?: Maybe<Scalars['Boolean']>;
    id?: Maybe<Scalars['Int']>;
    in?: Maybe<Array<Maybe<Scalars['ID']>>>;
    mimeType?: Maybe<MimeTypeEnum>;
    name?: Maybe<Scalars['String']>;
    nameIn?: Maybe<Array<Maybe<Scalars['String']>>>;
    notIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    orderby?: Maybe<Array<Maybe<PostObjectsConnectionOrderbyInput>>>;
    parent?: Maybe<Scalars['ID']>;
    parentIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    parentNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    password?: Maybe<Scalars['String']>;
    search?: Maybe<Scalars['String']>;
    stati?: Maybe<Array<Maybe<PostStatusEnum>>>;
    status?: Maybe<PostStatusEnum>;
    tag?: Maybe<Scalars['String']>;
    tagId?: Maybe<Scalars['String']>;
    tagIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    tagNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    tagSlugAnd?: Maybe<Array<Maybe<Scalars['String']>>>;
    tagSlugIn?: Maybe<Array<Maybe<Scalars['String']>>>;
    title?: Maybe<Scalars['String']>;
}
export interface PostToCategoryConnectionWhereArgs {
    cacheDomain?: Maybe<Scalars['String']>;
    childOf?: Maybe<Scalars['Int']>;
    childless?: Maybe<Scalars['Boolean']>;
    descriptionLike?: Maybe<Scalars['String']>;
    exclude?: Maybe<Array<Maybe<Scalars['ID']>>>;
    excludeTree?: Maybe<Array<Maybe<Scalars['ID']>>>;
    hideEmpty?: Maybe<Scalars['Boolean']>;
    hierarchical?: Maybe<Scalars['Boolean']>;
    include?: Maybe<Array<Maybe<Scalars['ID']>>>;
    name?: Maybe<Array<Maybe<Scalars['String']>>>;
    nameLike?: Maybe<Scalars['String']>;
    objectIds?: Maybe<Array<Maybe<Scalars['ID']>>>;
    order?: Maybe<OrderEnum>;
    orderby?: Maybe<TermObjectsConnectionOrderbyEnum>;
    padCounts?: Maybe<Scalars['Boolean']>;
    parent?: Maybe<Scalars['Int']>;
    search?: Maybe<Scalars['String']>;
    slug?: Maybe<Array<Maybe<Scalars['String']>>>;
    termTaxonomId?: Maybe<Array<Maybe<Scalars['ID']>>>;
    updateTermMetaCache?: Maybe<Scalars['Boolean']>;
}
export interface PostToCommentConnectionWhereArgs {
    authorEmail?: Maybe<Scalars['String']>;
    authorIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    authorNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    authorUrl?: Maybe<Scalars['String']>;
    commentIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    commentNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    commentType?: Maybe<Scalars['String']>;
    commentTypeIn?: Maybe<Array<Maybe<Scalars['String']>>>;
    commentTypeNotIn?: Maybe<Scalars['String']>;
    contentAuthor?: Maybe<Array<Maybe<Scalars['ID']>>>;
    contentAuthorIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    contentAuthorNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    contentId?: Maybe<Scalars['ID']>;
    contentIdIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    contentIdNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    contentName?: Maybe<Scalars['String']>;
    contentParent?: Maybe<Scalars['Int']>;
    contentStatus?: Maybe<Array<Maybe<PostStatusEnum>>>;
    contentType?: Maybe<Array<Maybe<ContentTypeEnum>>>;
    includeUnapproved?: Maybe<Array<Maybe<Scalars['ID']>>>;
    karma?: Maybe<Scalars['Int']>;
    order?: Maybe<OrderEnum>;
    orderby?: Maybe<CommentsConnectionOrderbyEnum>;
    parent?: Maybe<Scalars['Int']>;
    parentIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    parentNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    search?: Maybe<Scalars['String']>;
    status?: Maybe<Scalars['String']>;
    userId?: Maybe<Scalars['ID']>;
}
export interface PostToPostFormatConnectionWhereArgs {
    cacheDomain?: Maybe<Scalars['String']>;
    childOf?: Maybe<Scalars['Int']>;
    childless?: Maybe<Scalars['Boolean']>;
    descriptionLike?: Maybe<Scalars['String']>;
    exclude?: Maybe<Array<Maybe<Scalars['ID']>>>;
    excludeTree?: Maybe<Array<Maybe<Scalars['ID']>>>;
    hideEmpty?: Maybe<Scalars['Boolean']>;
    hierarchical?: Maybe<Scalars['Boolean']>;
    include?: Maybe<Array<Maybe<Scalars['ID']>>>;
    name?: Maybe<Array<Maybe<Scalars['String']>>>;
    nameLike?: Maybe<Scalars['String']>;
    objectIds?: Maybe<Array<Maybe<Scalars['ID']>>>;
    order?: Maybe<OrderEnum>;
    orderby?: Maybe<TermObjectsConnectionOrderbyEnum>;
    padCounts?: Maybe<Scalars['Boolean']>;
    parent?: Maybe<Scalars['Int']>;
    search?: Maybe<Scalars['String']>;
    slug?: Maybe<Array<Maybe<Scalars['String']>>>;
    termTaxonomId?: Maybe<Array<Maybe<Scalars['ID']>>>;
    updateTermMetaCache?: Maybe<Scalars['Boolean']>;
}
export interface PostFormatToContentNodeConnectionWhereArgs {
    contentTypes?: Maybe<Array<Maybe<ContentTypesOfPostFormatEnum>>>;
    dateQuery?: Maybe<DateQueryInput>;
    hasPassword?: Maybe<Scalars['Boolean']>;
    id?: Maybe<Scalars['Int']>;
    in?: Maybe<Array<Maybe<Scalars['ID']>>>;
    mimeType?: Maybe<MimeTypeEnum>;
    name?: Maybe<Scalars['String']>;
    nameIn?: Maybe<Array<Maybe<Scalars['String']>>>;
    notIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    orderby?: Maybe<Array<Maybe<PostObjectsConnectionOrderbyInput>>>;
    parent?: Maybe<Scalars['ID']>;
    parentIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    parentNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    password?: Maybe<Scalars['String']>;
    search?: Maybe<Scalars['String']>;
    stati?: Maybe<Array<Maybe<PostStatusEnum>>>;
    status?: Maybe<PostStatusEnum>;
    title?: Maybe<Scalars['String']>;
}
export declare enum ContentTypesOfPostFormatEnum {
    POST = "POST"
}
export interface PostFormatToPostConnectionWhereArgs {
    author?: Maybe<Scalars['Int']>;
    authorIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    authorName?: Maybe<Scalars['String']>;
    authorNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    categoryId?: Maybe<Scalars['Int']>;
    categoryIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    categoryName?: Maybe<Scalars['String']>;
    categoryNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    dateQuery?: Maybe<DateQueryInput>;
    hasPassword?: Maybe<Scalars['Boolean']>;
    id?: Maybe<Scalars['Int']>;
    in?: Maybe<Array<Maybe<Scalars['ID']>>>;
    mimeType?: Maybe<MimeTypeEnum>;
    name?: Maybe<Scalars['String']>;
    nameIn?: Maybe<Array<Maybe<Scalars['String']>>>;
    notIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    orderby?: Maybe<Array<Maybe<PostObjectsConnectionOrderbyInput>>>;
    parent?: Maybe<Scalars['ID']>;
    parentIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    parentNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    password?: Maybe<Scalars['String']>;
    search?: Maybe<Scalars['String']>;
    stati?: Maybe<Array<Maybe<PostStatusEnum>>>;
    status?: Maybe<PostStatusEnum>;
    tag?: Maybe<Scalars['String']>;
    tagId?: Maybe<Scalars['String']>;
    tagIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    tagNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    tagSlugAnd?: Maybe<Array<Maybe<Scalars['String']>>>;
    tagSlugIn?: Maybe<Array<Maybe<Scalars['String']>>>;
    title?: Maybe<Scalars['String']>;
}
export interface PostToRevisionConnectionWhereArgs {
    author?: Maybe<Scalars['Int']>;
    authorIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    authorName?: Maybe<Scalars['String']>;
    authorNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    categoryId?: Maybe<Scalars['Int']>;
    categoryIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    categoryName?: Maybe<Scalars['String']>;
    categoryNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    dateQuery?: Maybe<DateQueryInput>;
    hasPassword?: Maybe<Scalars['Boolean']>;
    id?: Maybe<Scalars['Int']>;
    in?: Maybe<Array<Maybe<Scalars['ID']>>>;
    mimeType?: Maybe<MimeTypeEnum>;
    name?: Maybe<Scalars['String']>;
    nameIn?: Maybe<Array<Maybe<Scalars['String']>>>;
    notIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    orderby?: Maybe<Array<Maybe<PostObjectsConnectionOrderbyInput>>>;
    parent?: Maybe<Scalars['ID']>;
    parentIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    parentNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    password?: Maybe<Scalars['String']>;
    search?: Maybe<Scalars['String']>;
    stati?: Maybe<Array<Maybe<PostStatusEnum>>>;
    status?: Maybe<PostStatusEnum>;
    tag?: Maybe<Scalars['String']>;
    tagId?: Maybe<Scalars['String']>;
    tagIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    tagNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    tagSlugAnd?: Maybe<Array<Maybe<Scalars['String']>>>;
    tagSlugIn?: Maybe<Array<Maybe<Scalars['String']>>>;
    title?: Maybe<Scalars['String']>;
}
export interface PostToTagConnectionWhereArgs {
    cacheDomain?: Maybe<Scalars['String']>;
    childOf?: Maybe<Scalars['Int']>;
    childless?: Maybe<Scalars['Boolean']>;
    descriptionLike?: Maybe<Scalars['String']>;
    exclude?: Maybe<Array<Maybe<Scalars['ID']>>>;
    excludeTree?: Maybe<Array<Maybe<Scalars['ID']>>>;
    hideEmpty?: Maybe<Scalars['Boolean']>;
    hierarchical?: Maybe<Scalars['Boolean']>;
    include?: Maybe<Array<Maybe<Scalars['ID']>>>;
    name?: Maybe<Array<Maybe<Scalars['String']>>>;
    nameLike?: Maybe<Scalars['String']>;
    objectIds?: Maybe<Array<Maybe<Scalars['ID']>>>;
    order?: Maybe<OrderEnum>;
    orderby?: Maybe<TermObjectsConnectionOrderbyEnum>;
    padCounts?: Maybe<Scalars['Boolean']>;
    parent?: Maybe<Scalars['Int']>;
    search?: Maybe<Scalars['String']>;
    slug?: Maybe<Array<Maybe<Scalars['String']>>>;
    termTaxonomId?: Maybe<Array<Maybe<Scalars['ID']>>>;
    updateTermMetaCache?: Maybe<Scalars['Boolean']>;
}
export interface TagToContentNodeConnectionWhereArgs {
    contentTypes?: Maybe<Array<Maybe<ContentTypesOfTagEnum>>>;
    dateQuery?: Maybe<DateQueryInput>;
    hasPassword?: Maybe<Scalars['Boolean']>;
    id?: Maybe<Scalars['Int']>;
    in?: Maybe<Array<Maybe<Scalars['ID']>>>;
    mimeType?: Maybe<MimeTypeEnum>;
    name?: Maybe<Scalars['String']>;
    nameIn?: Maybe<Array<Maybe<Scalars['String']>>>;
    notIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    orderby?: Maybe<Array<Maybe<PostObjectsConnectionOrderbyInput>>>;
    parent?: Maybe<Scalars['ID']>;
    parentIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    parentNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    password?: Maybe<Scalars['String']>;
    search?: Maybe<Scalars['String']>;
    stati?: Maybe<Array<Maybe<PostStatusEnum>>>;
    status?: Maybe<PostStatusEnum>;
    title?: Maybe<Scalars['String']>;
}
export declare enum ContentTypesOfTagEnum {
    POST = "POST"
}
export interface TagToPostConnectionWhereArgs {
    author?: Maybe<Scalars['Int']>;
    authorIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    authorName?: Maybe<Scalars['String']>;
    authorNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    categoryId?: Maybe<Scalars['Int']>;
    categoryIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    categoryName?: Maybe<Scalars['String']>;
    categoryNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    dateQuery?: Maybe<DateQueryInput>;
    hasPassword?: Maybe<Scalars['Boolean']>;
    id?: Maybe<Scalars['Int']>;
    in?: Maybe<Array<Maybe<Scalars['ID']>>>;
    mimeType?: Maybe<MimeTypeEnum>;
    name?: Maybe<Scalars['String']>;
    nameIn?: Maybe<Array<Maybe<Scalars['String']>>>;
    notIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    orderby?: Maybe<Array<Maybe<PostObjectsConnectionOrderbyInput>>>;
    parent?: Maybe<Scalars['ID']>;
    parentIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    parentNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    password?: Maybe<Scalars['String']>;
    search?: Maybe<Scalars['String']>;
    stati?: Maybe<Array<Maybe<PostStatusEnum>>>;
    status?: Maybe<PostStatusEnum>;
    tag?: Maybe<Scalars['String']>;
    tagId?: Maybe<Scalars['String']>;
    tagIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    tagNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    tagSlugAnd?: Maybe<Array<Maybe<Scalars['String']>>>;
    tagSlugIn?: Maybe<Array<Maybe<Scalars['String']>>>;
    title?: Maybe<Scalars['String']>;
}
export interface PostToTermNodeConnectionWhereArgs {
    cacheDomain?: Maybe<Scalars['String']>;
    childOf?: Maybe<Scalars['Int']>;
    childless?: Maybe<Scalars['Boolean']>;
    descriptionLike?: Maybe<Scalars['String']>;
    exclude?: Maybe<Array<Maybe<Scalars['ID']>>>;
    excludeTree?: Maybe<Array<Maybe<Scalars['ID']>>>;
    hideEmpty?: Maybe<Scalars['Boolean']>;
    hierarchical?: Maybe<Scalars['Boolean']>;
    include?: Maybe<Array<Maybe<Scalars['ID']>>>;
    name?: Maybe<Array<Maybe<Scalars['String']>>>;
    nameLike?: Maybe<Scalars['String']>;
    objectIds?: Maybe<Array<Maybe<Scalars['ID']>>>;
    order?: Maybe<OrderEnum>;
    orderby?: Maybe<TermObjectsConnectionOrderbyEnum>;
    padCounts?: Maybe<Scalars['Boolean']>;
    parent?: Maybe<Scalars['Int']>;
    search?: Maybe<Scalars['String']>;
    slug?: Maybe<Array<Maybe<Scalars['String']>>>;
    taxonomies?: Maybe<Array<Maybe<TaxonomyEnum>>>;
    termTaxonomId?: Maybe<Array<Maybe<Scalars['ID']>>>;
    updateTermMetaCache?: Maybe<Scalars['Boolean']>;
}
export declare enum TaxonomyEnum {
    CATEGORY = "CATEGORY",
    POSTFORMAT = "POSTFORMAT",
    TAG = "TAG"
}
export interface UserToContentRevisionUnionConnectionWhereArgs {
    contentTypes?: Maybe<Array<Maybe<ContentTypeEnum>>>;
    dateQuery?: Maybe<DateQueryInput>;
    hasPassword?: Maybe<Scalars['Boolean']>;
    id?: Maybe<Scalars['Int']>;
    in?: Maybe<Array<Maybe<Scalars['ID']>>>;
    mimeType?: Maybe<MimeTypeEnum>;
    name?: Maybe<Scalars['String']>;
    nameIn?: Maybe<Array<Maybe<Scalars['String']>>>;
    notIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    orderby?: Maybe<Array<Maybe<PostObjectsConnectionOrderbyInput>>>;
    parent?: Maybe<Scalars['ID']>;
    parentIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    parentNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    password?: Maybe<Scalars['String']>;
    search?: Maybe<Scalars['String']>;
    stati?: Maybe<Array<Maybe<PostStatusEnum>>>;
    status?: Maybe<PostStatusEnum>;
    title?: Maybe<Scalars['String']>;
}
export interface CategoryToPostConnectionWhereArgs {
    author?: Maybe<Scalars['Int']>;
    authorIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    authorName?: Maybe<Scalars['String']>;
    authorNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    categoryId?: Maybe<Scalars['Int']>;
    categoryIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    categoryName?: Maybe<Scalars['String']>;
    categoryNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    dateQuery?: Maybe<DateQueryInput>;
    hasPassword?: Maybe<Scalars['Boolean']>;
    id?: Maybe<Scalars['Int']>;
    in?: Maybe<Array<Maybe<Scalars['ID']>>>;
    mimeType?: Maybe<MimeTypeEnum>;
    name?: Maybe<Scalars['String']>;
    nameIn?: Maybe<Array<Maybe<Scalars['String']>>>;
    notIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    orderby?: Maybe<Array<Maybe<PostObjectsConnectionOrderbyInput>>>;
    parent?: Maybe<Scalars['ID']>;
    parentIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    parentNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    password?: Maybe<Scalars['String']>;
    search?: Maybe<Scalars['String']>;
    stati?: Maybe<Array<Maybe<PostStatusEnum>>>;
    status?: Maybe<PostStatusEnum>;
    tag?: Maybe<Scalars['String']>;
    tagId?: Maybe<Scalars['String']>;
    tagIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    tagNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    tagSlugAnd?: Maybe<Array<Maybe<Scalars['String']>>>;
    tagSlugIn?: Maybe<Array<Maybe<Scalars['String']>>>;
    title?: Maybe<Scalars['String']>;
}
export declare enum CategoryIdType {
    DATABASE_ID = "DATABASE_ID",
    ID = "ID",
    NAME = "NAME",
    SLUG = "SLUG",
    URI = "URI"
}
export interface RootQueryToCommentConnectionWhereArgs {
    authorEmail?: Maybe<Scalars['String']>;
    authorIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    authorNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    authorUrl?: Maybe<Scalars['String']>;
    commentIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    commentNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    commentType?: Maybe<Scalars['String']>;
    commentTypeIn?: Maybe<Array<Maybe<Scalars['String']>>>;
    commentTypeNotIn?: Maybe<Scalars['String']>;
    contentAuthor?: Maybe<Array<Maybe<Scalars['ID']>>>;
    contentAuthorIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    contentAuthorNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    contentId?: Maybe<Scalars['ID']>;
    contentIdIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    contentIdNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    contentName?: Maybe<Scalars['String']>;
    contentParent?: Maybe<Scalars['Int']>;
    contentStatus?: Maybe<Array<Maybe<PostStatusEnum>>>;
    contentType?: Maybe<Array<Maybe<ContentTypeEnum>>>;
    includeUnapproved?: Maybe<Array<Maybe<Scalars['ID']>>>;
    karma?: Maybe<Scalars['Int']>;
    order?: Maybe<OrderEnum>;
    orderby?: Maybe<CommentsConnectionOrderbyEnum>;
    parent?: Maybe<Scalars['Int']>;
    parentIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    parentNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    search?: Maybe<Scalars['String']>;
    status?: Maybe<Scalars['String']>;
    userId?: Maybe<Scalars['ID']>;
}
export declare enum ContentNodeIdTypeEnum {
    DATABASE_ID = "DATABASE_ID",
    ID = "ID",
    URI = "URI"
}
export interface RootQueryToContentNodeConnectionWhereArgs {
    contentTypes?: Maybe<Array<Maybe<ContentTypeEnum>>>;
    dateQuery?: Maybe<DateQueryInput>;
    hasPassword?: Maybe<Scalars['Boolean']>;
    id?: Maybe<Scalars['Int']>;
    in?: Maybe<Array<Maybe<Scalars['ID']>>>;
    mimeType?: Maybe<MimeTypeEnum>;
    name?: Maybe<Scalars['String']>;
    nameIn?: Maybe<Array<Maybe<Scalars['String']>>>;
    notIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    orderby?: Maybe<Array<Maybe<PostObjectsConnectionOrderbyInput>>>;
    parent?: Maybe<Scalars['ID']>;
    parentIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    parentNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    password?: Maybe<Scalars['String']>;
    search?: Maybe<Scalars['String']>;
    stati?: Maybe<Array<Maybe<PostStatusEnum>>>;
    status?: Maybe<PostStatusEnum>;
    title?: Maybe<Scalars['String']>;
}
export declare enum ContentTypeIdTypeEnum {
    ID = "ID",
    NAME = "NAME"
}
export declare enum MediaItemIdType {
    DATABASE_ID = "DATABASE_ID",
    ID = "ID",
    SLUG = "SLUG",
    SOURCE_URL = "SOURCE_URL",
    URI = "URI"
}
export interface RootQueryToMediaItemConnectionWhereArgs {
    author?: Maybe<Scalars['Int']>;
    authorIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    authorName?: Maybe<Scalars['String']>;
    authorNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    dateQuery?: Maybe<DateQueryInput>;
    hasPassword?: Maybe<Scalars['Boolean']>;
    id?: Maybe<Scalars['Int']>;
    in?: Maybe<Array<Maybe<Scalars['ID']>>>;
    mimeType?: Maybe<MimeTypeEnum>;
    name?: Maybe<Scalars['String']>;
    nameIn?: Maybe<Array<Maybe<Scalars['String']>>>;
    notIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    orderby?: Maybe<Array<Maybe<PostObjectsConnectionOrderbyInput>>>;
    parent?: Maybe<Scalars['ID']>;
    parentIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    parentNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    password?: Maybe<Scalars['String']>;
    search?: Maybe<Scalars['String']>;
    stati?: Maybe<Array<Maybe<PostStatusEnum>>>;
    status?: Maybe<PostStatusEnum>;
    title?: Maybe<Scalars['String']>;
}
export declare enum MenuNodeIdTypeEnum {
    DATABASE_ID = "DATABASE_ID",
    ID = "ID",
    NAME = "NAME"
}
export declare enum MenuLocationEnum {
    FOOTER = "FOOTER",
    PRIMARY = "PRIMARY"
}
export interface MenuToMenuItemConnectionWhereArgs {
    id?: Maybe<Scalars['Int']>;
    location?: Maybe<MenuLocationEnum>;
    parentDatabaseId?: Maybe<Scalars['Int']>;
    parentId?: Maybe<Scalars['ID']>;
}
export interface MenuItemToMenuItemConnectionWhereArgs {
    id?: Maybe<Scalars['Int']>;
    location?: Maybe<MenuLocationEnum>;
    parentDatabaseId?: Maybe<Scalars['Int']>;
    parentId?: Maybe<Scalars['ID']>;
}
export declare enum MenuItemNodeIdTypeEnum {
    DATABASE_ID = "DATABASE_ID",
    ID = "ID"
}
export interface RootQueryToMenuItemConnectionWhereArgs {
    id?: Maybe<Scalars['Int']>;
    location?: Maybe<MenuLocationEnum>;
    parentDatabaseId?: Maybe<Scalars['Int']>;
    parentId?: Maybe<Scalars['ID']>;
}
export interface RootQueryToMenuConnectionWhereArgs {
    id?: Maybe<Scalars['Int']>;
    location?: Maybe<MenuLocationEnum>;
    slug?: Maybe<Scalars['String']>;
}
export declare enum PageIdType {
    DATABASE_ID = "DATABASE_ID",
    ID = "ID",
    URI = "URI"
}
export interface RootQueryToPageConnectionWhereArgs {
    author?: Maybe<Scalars['Int']>;
    authorIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    authorName?: Maybe<Scalars['String']>;
    authorNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    dateQuery?: Maybe<DateQueryInput>;
    hasPassword?: Maybe<Scalars['Boolean']>;
    id?: Maybe<Scalars['Int']>;
    in?: Maybe<Array<Maybe<Scalars['ID']>>>;
    mimeType?: Maybe<MimeTypeEnum>;
    name?: Maybe<Scalars['String']>;
    nameIn?: Maybe<Array<Maybe<Scalars['String']>>>;
    notIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    orderby?: Maybe<Array<Maybe<PostObjectsConnectionOrderbyInput>>>;
    parent?: Maybe<Scalars['ID']>;
    parentIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    parentNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    password?: Maybe<Scalars['String']>;
    search?: Maybe<Scalars['String']>;
    stati?: Maybe<Array<Maybe<PostStatusEnum>>>;
    status?: Maybe<PostStatusEnum>;
    title?: Maybe<Scalars['String']>;
}
export declare enum PostIdType {
    DATABASE_ID = "DATABASE_ID",
    ID = "ID",
    SLUG = "SLUG",
    URI = "URI"
}
export declare enum PostFormatIdType {
    DATABASE_ID = "DATABASE_ID",
    ID = "ID",
    NAME = "NAME",
    SLUG = "SLUG",
    URI = "URI"
}
export interface RootQueryToPostFormatConnectionWhereArgs {
    cacheDomain?: Maybe<Scalars['String']>;
    childOf?: Maybe<Scalars['Int']>;
    childless?: Maybe<Scalars['Boolean']>;
    descriptionLike?: Maybe<Scalars['String']>;
    exclude?: Maybe<Array<Maybe<Scalars['ID']>>>;
    excludeTree?: Maybe<Array<Maybe<Scalars['ID']>>>;
    hideEmpty?: Maybe<Scalars['Boolean']>;
    hierarchical?: Maybe<Scalars['Boolean']>;
    include?: Maybe<Array<Maybe<Scalars['ID']>>>;
    name?: Maybe<Array<Maybe<Scalars['String']>>>;
    nameLike?: Maybe<Scalars['String']>;
    objectIds?: Maybe<Array<Maybe<Scalars['ID']>>>;
    order?: Maybe<OrderEnum>;
    orderby?: Maybe<TermObjectsConnectionOrderbyEnum>;
    padCounts?: Maybe<Scalars['Boolean']>;
    parent?: Maybe<Scalars['Int']>;
    search?: Maybe<Scalars['String']>;
    slug?: Maybe<Array<Maybe<Scalars['String']>>>;
    termTaxonomId?: Maybe<Array<Maybe<Scalars['ID']>>>;
    updateTermMetaCache?: Maybe<Scalars['Boolean']>;
}
export interface RootQueryToPostConnectionWhereArgs {
    author?: Maybe<Scalars['Int']>;
    authorIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    authorName?: Maybe<Scalars['String']>;
    authorNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    categoryId?: Maybe<Scalars['Int']>;
    categoryIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    categoryName?: Maybe<Scalars['String']>;
    categoryNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    dateQuery?: Maybe<DateQueryInput>;
    hasPassword?: Maybe<Scalars['Boolean']>;
    id?: Maybe<Scalars['Int']>;
    in?: Maybe<Array<Maybe<Scalars['ID']>>>;
    mimeType?: Maybe<MimeTypeEnum>;
    name?: Maybe<Scalars['String']>;
    nameIn?: Maybe<Array<Maybe<Scalars['String']>>>;
    notIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    orderby?: Maybe<Array<Maybe<PostObjectsConnectionOrderbyInput>>>;
    parent?: Maybe<Scalars['ID']>;
    parentIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    parentNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    password?: Maybe<Scalars['String']>;
    search?: Maybe<Scalars['String']>;
    stati?: Maybe<Array<Maybe<PostStatusEnum>>>;
    status?: Maybe<PostStatusEnum>;
    tag?: Maybe<Scalars['String']>;
    tagId?: Maybe<Scalars['String']>;
    tagIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    tagNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    tagSlugAnd?: Maybe<Array<Maybe<Scalars['String']>>>;
    tagSlugIn?: Maybe<Array<Maybe<Scalars['String']>>>;
    title?: Maybe<Scalars['String']>;
}
export interface RootQueryToContentRevisionUnionConnectionWhereArgs {
    contentTypes?: Maybe<Array<Maybe<ContentTypeEnum>>>;
    dateQuery?: Maybe<DateQueryInput>;
    hasPassword?: Maybe<Scalars['Boolean']>;
    id?: Maybe<Scalars['Int']>;
    in?: Maybe<Array<Maybe<Scalars['ID']>>>;
    mimeType?: Maybe<MimeTypeEnum>;
    name?: Maybe<Scalars['String']>;
    nameIn?: Maybe<Array<Maybe<Scalars['String']>>>;
    notIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    orderby?: Maybe<Array<Maybe<PostObjectsConnectionOrderbyInput>>>;
    parent?: Maybe<Scalars['ID']>;
    parentIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    parentNotIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
    password?: Maybe<Scalars['String']>;
    search?: Maybe<Scalars['String']>;
    stati?: Maybe<Array<Maybe<PostStatusEnum>>>;
    status?: Maybe<PostStatusEnum>;
    title?: Maybe<Scalars['String']>;
}
export declare enum TagIdType {
    DATABASE_ID = "DATABASE_ID",
    ID = "ID",
    NAME = "NAME",
    SLUG = "SLUG",
    URI = "URI"
}
export interface RootQueryToTagConnectionWhereArgs {
    cacheDomain?: Maybe<Scalars['String']>;
    childOf?: Maybe<Scalars['Int']>;
    childless?: Maybe<Scalars['Boolean']>;
    descriptionLike?: Maybe<Scalars['String']>;
    exclude?: Maybe<Array<Maybe<Scalars['ID']>>>;
    excludeTree?: Maybe<Array<Maybe<Scalars['ID']>>>;
    hideEmpty?: Maybe<Scalars['Boolean']>;
    hierarchical?: Maybe<Scalars['Boolean']>;
    include?: Maybe<Array<Maybe<Scalars['ID']>>>;
    name?: Maybe<Array<Maybe<Scalars['String']>>>;
    nameLike?: Maybe<Scalars['String']>;
    objectIds?: Maybe<Array<Maybe<Scalars['ID']>>>;
    order?: Maybe<OrderEnum>;
    orderby?: Maybe<TermObjectsConnectionOrderbyEnum>;
    padCounts?: Maybe<Scalars['Boolean']>;
    parent?: Maybe<Scalars['Int']>;
    search?: Maybe<Scalars['String']>;
    slug?: Maybe<Array<Maybe<Scalars['String']>>>;
    termTaxonomId?: Maybe<Array<Maybe<Scalars['ID']>>>;
    updateTermMetaCache?: Maybe<Scalars['Boolean']>;
}
export declare enum TaxonomyIdTypeEnum {
    ID = "ID",
    NAME = "NAME"
}
export declare enum TermNodeIdTypeEnum {
    DATABASE_ID = "DATABASE_ID",
    ID = "ID",
    NAME = "NAME",
    SLUG = "SLUG",
    URI = "URI"
}
export interface RootQueryToTermNodeConnectionWhereArgs {
    cacheDomain?: Maybe<Scalars['String']>;
    childOf?: Maybe<Scalars['Int']>;
    childless?: Maybe<Scalars['Boolean']>;
    descriptionLike?: Maybe<Scalars['String']>;
    exclude?: Maybe<Array<Maybe<Scalars['ID']>>>;
    excludeTree?: Maybe<Array<Maybe<Scalars['ID']>>>;
    hideEmpty?: Maybe<Scalars['Boolean']>;
    hierarchical?: Maybe<Scalars['Boolean']>;
    include?: Maybe<Array<Maybe<Scalars['ID']>>>;
    name?: Maybe<Array<Maybe<Scalars['String']>>>;
    nameLike?: Maybe<Scalars['String']>;
    objectIds?: Maybe<Array<Maybe<Scalars['ID']>>>;
    order?: Maybe<OrderEnum>;
    orderby?: Maybe<TermObjectsConnectionOrderbyEnum>;
    padCounts?: Maybe<Scalars['Boolean']>;
    parent?: Maybe<Scalars['Int']>;
    search?: Maybe<Scalars['String']>;
    slug?: Maybe<Array<Maybe<Scalars['String']>>>;
    taxonomies?: Maybe<Array<Maybe<TaxonomyEnum>>>;
    termTaxonomId?: Maybe<Array<Maybe<Scalars['ID']>>>;
    updateTermMetaCache?: Maybe<Scalars['Boolean']>;
}
export declare enum UserNodeIdTypeEnum {
    DATABASE_ID = "DATABASE_ID",
    EMAIL = "EMAIL",
    ID = "ID",
    SLUG = "SLUG",
    URI = "URI",
    USERNAME = "USERNAME"
}
export interface RootQueryToUserConnectionWhereArgs {
    exclude?: Maybe<Array<Maybe<Scalars['Int']>>>;
    hasPublishedPosts?: Maybe<Array<Maybe<ContentTypeEnum>>>;
    include?: Maybe<Array<Maybe<Scalars['Int']>>>;
    login?: Maybe<Scalars['String']>;
    loginIn?: Maybe<Array<Maybe<Scalars['String']>>>;
    loginNotIn?: Maybe<Array<Maybe<Scalars['String']>>>;
    nicename?: Maybe<Scalars['String']>;
    nicenameIn?: Maybe<Array<Maybe<Scalars['String']>>>;
    nicenameNotIn?: Maybe<Array<Maybe<Scalars['String']>>>;
    orderby?: Maybe<Array<Maybe<UsersConnectionOrderbyInput>>>;
    role?: Maybe<UserRoleEnum>;
    roleIn?: Maybe<Array<Maybe<UserRoleEnum>>>;
    roleNotIn?: Maybe<Array<Maybe<UserRoleEnum>>>;
    search?: Maybe<Scalars['String']>;
    searchColumns?: Maybe<Array<Maybe<UsersConnectionSearchColumnEnum>>>;
}
export interface UsersConnectionOrderbyInput {
    field: UsersConnectionOrderbyEnum;
    order?: Maybe<OrderEnum>;
}
export declare enum UsersConnectionOrderbyEnum {
    DISPLAY_NAME = "DISPLAY_NAME",
    EMAIL = "EMAIL",
    LOGIN = "LOGIN",
    LOGIN_IN = "LOGIN_IN",
    NICE_NAME = "NICE_NAME",
    NICE_NAME_IN = "NICE_NAME_IN",
    REGISTERED = "REGISTERED",
    URL = "URL"
}
export declare enum UserRoleEnum {
    ADMINISTRATOR = "ADMINISTRATOR",
    AUTHOR = "AUTHOR",
    CONTRIBUTOR = "CONTRIBUTOR",
    EDITOR = "EDITOR",
    SUBSCRIBER = "SUBSCRIBER"
}
export declare enum UsersConnectionSearchColumnEnum {
    EMAIL = "EMAIL",
    ID = "ID",
    LOGIN = "LOGIN",
    NICENAME = "NICENAME",
    URL = "URL"
}
export interface CreateCategoryInput {
    aliasOf?: Maybe<Scalars['String']>;
    clientMutationId?: Maybe<Scalars['String']>;
    description?: Maybe<Scalars['String']>;
    name: Scalars['String'];
    parentId?: Maybe<Scalars['ID']>;
    slug?: Maybe<Scalars['String']>;
}
export interface CreateCommentInput {
    approved?: Maybe<Scalars['String']>;
    author?: Maybe<Scalars['String']>;
    authorEmail?: Maybe<Scalars['String']>;
    authorUrl?: Maybe<Scalars['String']>;
    clientMutationId?: Maybe<Scalars['String']>;
    commentOn?: Maybe<Scalars['Int']>;
    content?: Maybe<Scalars['String']>;
    date?: Maybe<Scalars['String']>;
    parent?: Maybe<Scalars['ID']>;
    type?: Maybe<Scalars['String']>;
}
export interface CreateMediaItemInput {
    altText?: Maybe<Scalars['String']>;
    authorId?: Maybe<Scalars['ID']>;
    caption?: Maybe<Scalars['String']>;
    clientMutationId?: Maybe<Scalars['String']>;
    commentStatus?: Maybe<Scalars['String']>;
    date?: Maybe<Scalars['String']>;
    dateGmt?: Maybe<Scalars['String']>;
    description?: Maybe<Scalars['String']>;
    filePath?: Maybe<Scalars['String']>;
    fileType?: Maybe<MimeTypeEnum>;
    parentId?: Maybe<Scalars['ID']>;
    pingStatus?: Maybe<Scalars['String']>;
    slug?: Maybe<Scalars['String']>;
    status?: Maybe<MediaItemStatusEnum>;
    title?: Maybe<Scalars['String']>;
}
export declare enum MediaItemStatusEnum {
    AUTO_DRAFT = "AUTO_DRAFT",
    INHERIT = "INHERIT",
    PRIVATE = "PRIVATE",
    TRASH = "TRASH"
}
export interface CreatePageInput {
    authorId?: Maybe<Scalars['ID']>;
    clientMutationId?: Maybe<Scalars['String']>;
    commentStatus?: Maybe<Scalars['String']>;
    content?: Maybe<Scalars['String']>;
    date?: Maybe<Scalars['String']>;
    menuOrder?: Maybe<Scalars['Int']>;
    parentId?: Maybe<Scalars['ID']>;
    password?: Maybe<Scalars['String']>;
    slug?: Maybe<Scalars['String']>;
    status?: Maybe<PostStatusEnum>;
    title?: Maybe<Scalars['String']>;
}
export interface CreatePostInput {
    authorId?: Maybe<Scalars['ID']>;
    categories?: Maybe<PostCategoriesInput>;
    clientMutationId?: Maybe<Scalars['String']>;
    commentStatus?: Maybe<Scalars['String']>;
    content?: Maybe<Scalars['String']>;
    date?: Maybe<Scalars['String']>;
    excerpt?: Maybe<Scalars['String']>;
    menuOrder?: Maybe<Scalars['Int']>;
    password?: Maybe<Scalars['String']>;
    pingStatus?: Maybe<Scalars['String']>;
    pinged?: Maybe<Array<Maybe<Scalars['String']>>>;
    postFormats?: Maybe<PostPostFormatsInput>;
    slug?: Maybe<Scalars['String']>;
    status?: Maybe<PostStatusEnum>;
    tags?: Maybe<PostTagsInput>;
    title?: Maybe<Scalars['String']>;
    toPing?: Maybe<Array<Maybe<Scalars['String']>>>;
}
export interface PostCategoriesInput {
    append?: Maybe<Scalars['Boolean']>;
    nodes?: Maybe<Array<Maybe<PostCategoriesNodeInput>>>;
}
export interface PostCategoriesNodeInput {
    description?: Maybe<Scalars['String']>;
    id?: Maybe<Scalars['ID']>;
    name?: Maybe<Scalars['String']>;
    slug?: Maybe<Scalars['String']>;
}
export interface PostPostFormatsInput {
    append?: Maybe<Scalars['Boolean']>;
    nodes?: Maybe<Array<Maybe<PostPostFormatsNodeInput>>>;
}
export interface PostPostFormatsNodeInput {
    description?: Maybe<Scalars['String']>;
    id?: Maybe<Scalars['ID']>;
    name?: Maybe<Scalars['String']>;
    slug?: Maybe<Scalars['String']>;
}
export interface PostTagsInput {
    append?: Maybe<Scalars['Boolean']>;
    nodes?: Maybe<Array<Maybe<PostTagsNodeInput>>>;
}
export interface PostTagsNodeInput {
    description?: Maybe<Scalars['String']>;
    id?: Maybe<Scalars['ID']>;
    name?: Maybe<Scalars['String']>;
    slug?: Maybe<Scalars['String']>;
}
export interface CreatePostFormatInput {
    aliasOf?: Maybe<Scalars['String']>;
    clientMutationId?: Maybe<Scalars['String']>;
    description?: Maybe<Scalars['String']>;
    name: Scalars['String'];
    slug?: Maybe<Scalars['String']>;
}
export interface CreateTagInput {
    aliasOf?: Maybe<Scalars['String']>;
    clientMutationId?: Maybe<Scalars['String']>;
    description?: Maybe<Scalars['String']>;
    name: Scalars['String'];
    slug?: Maybe<Scalars['String']>;
}
export interface CreateUserInput {
    aim?: Maybe<Scalars['String']>;
    clientMutationId?: Maybe<Scalars['String']>;
    description?: Maybe<Scalars['String']>;
    displayName?: Maybe<Scalars['String']>;
    email?: Maybe<Scalars['String']>;
    firstName?: Maybe<Scalars['String']>;
    jabber?: Maybe<Scalars['String']>;
    lastName?: Maybe<Scalars['String']>;
    locale?: Maybe<Scalars['String']>;
    nicename?: Maybe<Scalars['String']>;
    nickname?: Maybe<Scalars['String']>;
    password?: Maybe<Scalars['String']>;
    registered?: Maybe<Scalars['String']>;
    richEditing?: Maybe<Scalars['String']>;
    roles?: Maybe<Array<Maybe<Scalars['String']>>>;
    username: Scalars['String'];
    websiteUrl?: Maybe<Scalars['String']>;
    yim?: Maybe<Scalars['String']>;
}
export interface DeleteCategoryInput {
    clientMutationId?: Maybe<Scalars['String']>;
    id: Scalars['ID'];
}
export interface DeleteCommentInput {
    clientMutationId?: Maybe<Scalars['String']>;
    forceDelete?: Maybe<Scalars['Boolean']>;
    id: Scalars['ID'];
}
export interface DeleteMediaItemInput {
    clientMutationId?: Maybe<Scalars['String']>;
    forceDelete?: Maybe<Scalars['Boolean']>;
    id: Scalars['ID'];
}
export interface DeletePageInput {
    clientMutationId?: Maybe<Scalars['String']>;
    forceDelete?: Maybe<Scalars['Boolean']>;
    id: Scalars['ID'];
}
export interface DeletePostInput {
    clientMutationId?: Maybe<Scalars['String']>;
    forceDelete?: Maybe<Scalars['Boolean']>;
    id: Scalars['ID'];
}
export interface DeletePostFormatInput {
    clientMutationId?: Maybe<Scalars['String']>;
    id: Scalars['ID'];
}
export interface DeleteTagInput {
    clientMutationId?: Maybe<Scalars['String']>;
    id: Scalars['ID'];
}
export interface DeleteUserInput {
    clientMutationId?: Maybe<Scalars['String']>;
    id: Scalars['ID'];
    reassignId?: Maybe<Scalars['ID']>;
}
export interface RegisterUserInput {
    aim?: Maybe<Scalars['String']>;
    clientMutationId?: Maybe<Scalars['String']>;
    description?: Maybe<Scalars['String']>;
    displayName?: Maybe<Scalars['String']>;
    email?: Maybe<Scalars['String']>;
    firstName?: Maybe<Scalars['String']>;
    jabber?: Maybe<Scalars['String']>;
    lastName?: Maybe<Scalars['String']>;
    locale?: Maybe<Scalars['String']>;
    nicename?: Maybe<Scalars['String']>;
    nickname?: Maybe<Scalars['String']>;
    password?: Maybe<Scalars['String']>;
    registered?: Maybe<Scalars['String']>;
    richEditing?: Maybe<Scalars['String']>;
    username: Scalars['String'];
    websiteUrl?: Maybe<Scalars['String']>;
    yim?: Maybe<Scalars['String']>;
}
export interface ResetUserPasswordInput {
    clientMutationId?: Maybe<Scalars['String']>;
    key?: Maybe<Scalars['String']>;
    login?: Maybe<Scalars['String']>;
    password?: Maybe<Scalars['String']>;
}
export interface RestoreCommentInput {
    clientMutationId?: Maybe<Scalars['String']>;
    id: Scalars['ID'];
}
export interface SendPasswordResetEmailInput {
    clientMutationId?: Maybe<Scalars['String']>;
    username: Scalars['String'];
}
export interface UpdateCategoryInput {
    aliasOf?: Maybe<Scalars['String']>;
    clientMutationId?: Maybe<Scalars['String']>;
    description?: Maybe<Scalars['String']>;
    id: Scalars['ID'];
    name?: Maybe<Scalars['String']>;
    parentId?: Maybe<Scalars['ID']>;
    slug?: Maybe<Scalars['String']>;
}
export interface UpdateCommentInput {
    approved?: Maybe<Scalars['String']>;
    author?: Maybe<Scalars['String']>;
    authorEmail?: Maybe<Scalars['String']>;
    authorUrl?: Maybe<Scalars['String']>;
    clientMutationId?: Maybe<Scalars['String']>;
    commentOn?: Maybe<Scalars['Int']>;
    content?: Maybe<Scalars['String']>;
    date?: Maybe<Scalars['String']>;
    id: Scalars['ID'];
    parent?: Maybe<Scalars['ID']>;
    type?: Maybe<Scalars['String']>;
}
export interface UpdateMediaItemInput {
    altText?: Maybe<Scalars['String']>;
    authorId?: Maybe<Scalars['ID']>;
    caption?: Maybe<Scalars['String']>;
    clientMutationId?: Maybe<Scalars['String']>;
    commentStatus?: Maybe<Scalars['String']>;
    date?: Maybe<Scalars['String']>;
    dateGmt?: Maybe<Scalars['String']>;
    description?: Maybe<Scalars['String']>;
    filePath?: Maybe<Scalars['String']>;
    fileType?: Maybe<MimeTypeEnum>;
    id: Scalars['ID'];
    parentId?: Maybe<Scalars['ID']>;
    pingStatus?: Maybe<Scalars['String']>;
    slug?: Maybe<Scalars['String']>;
    status?: Maybe<MediaItemStatusEnum>;
    title?: Maybe<Scalars['String']>;
}
export interface UpdatePageInput {
    authorId?: Maybe<Scalars['ID']>;
    clientMutationId?: Maybe<Scalars['String']>;
    commentStatus?: Maybe<Scalars['String']>;
    content?: Maybe<Scalars['String']>;
    date?: Maybe<Scalars['String']>;
    id: Scalars['ID'];
    menuOrder?: Maybe<Scalars['Int']>;
    parentId?: Maybe<Scalars['ID']>;
    password?: Maybe<Scalars['String']>;
    slug?: Maybe<Scalars['String']>;
    status?: Maybe<PostStatusEnum>;
    title?: Maybe<Scalars['String']>;
}
export interface UpdatePostInput {
    authorId?: Maybe<Scalars['ID']>;
    categories?: Maybe<PostCategoriesInput>;
    clientMutationId?: Maybe<Scalars['String']>;
    commentStatus?: Maybe<Scalars['String']>;
    content?: Maybe<Scalars['String']>;
    date?: Maybe<Scalars['String']>;
    excerpt?: Maybe<Scalars['String']>;
    id: Scalars['ID'];
    menuOrder?: Maybe<Scalars['Int']>;
    password?: Maybe<Scalars['String']>;
    pingStatus?: Maybe<Scalars['String']>;
    pinged?: Maybe<Array<Maybe<Scalars['String']>>>;
    postFormats?: Maybe<PostPostFormatsInput>;
    slug?: Maybe<Scalars['String']>;
    status?: Maybe<PostStatusEnum>;
    tags?: Maybe<PostTagsInput>;
    title?: Maybe<Scalars['String']>;
    toPing?: Maybe<Array<Maybe<Scalars['String']>>>;
}
export interface UpdatePostFormatInput {
    aliasOf?: Maybe<Scalars['String']>;
    clientMutationId?: Maybe<Scalars['String']>;
    description?: Maybe<Scalars['String']>;
    id: Scalars['ID'];
    name?: Maybe<Scalars['String']>;
    slug?: Maybe<Scalars['String']>;
}
export interface UpdateSettingsInput {
    clientMutationId?: Maybe<Scalars['String']>;
    discussionSettingsDefaultCommentStatus?: Maybe<Scalars['String']>;
    discussionSettingsDefaultPingStatus?: Maybe<Scalars['String']>;
    generalSettingsDateFormat?: Maybe<Scalars['String']>;
    generalSettingsDescription?: Maybe<Scalars['String']>;
    generalSettingsEmail?: Maybe<Scalars['String']>;
    generalSettingsLanguage?: Maybe<Scalars['String']>;
    generalSettingsStartOfWeek?: Maybe<Scalars['Int']>;
    generalSettingsTimeFormat?: Maybe<Scalars['String']>;
    generalSettingsTimezone?: Maybe<Scalars['String']>;
    generalSettingsTitle?: Maybe<Scalars['String']>;
    generalSettingsUrl?: Maybe<Scalars['String']>;
    readingSettingsPostsPerPage?: Maybe<Scalars['Int']>;
    writingSettingsDefaultCategory?: Maybe<Scalars['Int']>;
    writingSettingsDefaultPostFormat?: Maybe<Scalars['String']>;
    writingSettingsUseSmilies?: Maybe<Scalars['Boolean']>;
}
export interface UpdateTagInput {
    aliasOf?: Maybe<Scalars['String']>;
    clientMutationId?: Maybe<Scalars['String']>;
    description?: Maybe<Scalars['String']>;
    id: Scalars['ID'];
    name?: Maybe<Scalars['String']>;
    slug?: Maybe<Scalars['String']>;
}
export interface UpdateUserInput {
    aim?: Maybe<Scalars['String']>;
    clientMutationId?: Maybe<Scalars['String']>;
    description?: Maybe<Scalars['String']>;
    displayName?: Maybe<Scalars['String']>;
    email?: Maybe<Scalars['String']>;
    firstName?: Maybe<Scalars['String']>;
    id: Scalars['ID'];
    jabber?: Maybe<Scalars['String']>;
    lastName?: Maybe<Scalars['String']>;
    locale?: Maybe<Scalars['String']>;
    nicename?: Maybe<Scalars['String']>;
    nickname?: Maybe<Scalars['String']>;
    password?: Maybe<Scalars['String']>;
    registered?: Maybe<Scalars['String']>;
    richEditing?: Maybe<Scalars['String']>;
    roles?: Maybe<Array<Maybe<Scalars['String']>>>;
    websiteUrl?: Maybe<Scalars['String']>;
    yim?: Maybe<Scalars['String']>;
}
export declare const scalarsEnumsHash: import('gqty').ScalarsEnumsHash;
export declare const generatedSchema: {
    readonly query: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly allSettings: {
            readonly __type: "Settings";
        };
        readonly categories: {
            readonly __type: "RootQueryToCategoryConnection";
            readonly __args: {
                readonly first: "Int";
                readonly last: "Int";
                readonly after: "String";
                readonly before: "String";
                readonly where: "RootQueryToCategoryConnectionWhereArgs";
            };
        };
        readonly category: {
            readonly __type: "Category";
            readonly __args: {
                readonly id: "ID!";
                readonly idType: "CategoryIdType";
            };
        };
        readonly comment: {
            readonly __type: "Comment";
            readonly __args: {
                readonly id: "ID!";
            };
        };
        readonly comments: {
            readonly __type: "RootQueryToCommentConnection";
            readonly __args: {
                readonly first: "Int";
                readonly last: "Int";
                readonly after: "String";
                readonly before: "String";
                readonly where: "RootQueryToCommentConnectionWhereArgs";
            };
        };
        readonly contentNode: {
            readonly __type: "ContentNode";
            readonly __args: {
                readonly id: "ID!";
                readonly idType: "ContentNodeIdTypeEnum";
                readonly contentType: "ContentTypeEnum";
                readonly asPreview: "Boolean";
            };
        };
        readonly contentNodes: {
            readonly __type: "RootQueryToContentNodeConnection";
            readonly __args: {
                readonly first: "Int";
                readonly last: "Int";
                readonly after: "String";
                readonly before: "String";
                readonly where: "RootQueryToContentNodeConnectionWhereArgs";
            };
        };
        readonly contentType: {
            readonly __type: "ContentType";
            readonly __args: {
                readonly id: "ID!";
                readonly idType: "ContentTypeIdTypeEnum";
            };
        };
        readonly contentTypes: {
            readonly __type: "RootQueryToContentTypeConnection";
            readonly __args: {
                readonly first: "Int";
                readonly last: "Int";
                readonly after: "String";
                readonly before: "String";
            };
        };
        readonly discussionSettings: {
            readonly __type: "DiscussionSettings";
        };
        readonly generalSettings: {
            readonly __type: "GeneralSettings";
        };
        readonly mediaItem: {
            readonly __type: "MediaItem";
            readonly __args: {
                readonly id: "ID!";
                readonly idType: "MediaItemIdType";
                readonly asPreview: "Boolean";
            };
        };
        readonly mediaItemBy: {
            readonly __type: "MediaItem";
            readonly __args: {
                readonly id: "ID";
                readonly mediaItemId: "Int";
                readonly uri: "String";
                readonly slug: "String";
            };
        };
        readonly mediaItems: {
            readonly __type: "RootQueryToMediaItemConnection";
            readonly __args: {
                readonly first: "Int";
                readonly last: "Int";
                readonly after: "String";
                readonly before: "String";
                readonly where: "RootQueryToMediaItemConnectionWhereArgs";
            };
        };
        readonly menu: {
            readonly __type: "Menu";
            readonly __args: {
                readonly id: "ID!";
                readonly idType: "MenuNodeIdTypeEnum";
            };
        };
        readonly menuItem: {
            readonly __type: "MenuItem";
            readonly __args: {
                readonly id: "ID!";
                readonly idType: "MenuItemNodeIdTypeEnum";
            };
        };
        readonly menuItems: {
            readonly __type: "RootQueryToMenuItemConnection";
            readonly __args: {
                readonly first: "Int";
                readonly last: "Int";
                readonly after: "String";
                readonly before: "String";
                readonly where: "RootQueryToMenuItemConnectionWhereArgs";
            };
        };
        readonly menus: {
            readonly __type: "RootQueryToMenuConnection";
            readonly __args: {
                readonly first: "Int";
                readonly last: "Int";
                readonly after: "String";
                readonly before: "String";
                readonly where: "RootQueryToMenuConnectionWhereArgs";
            };
        };
        readonly node: {
            readonly __type: "Node";
            readonly __args: {
                readonly id: "ID";
            };
        };
        readonly nodeByUri: {
            readonly __type: "UniformResourceIdentifiable";
            readonly __args: {
                readonly uri: "String!";
            };
        };
        readonly page: {
            readonly __type: "Page";
            readonly __args: {
                readonly id: "ID!";
                readonly idType: "PageIdType";
                readonly asPreview: "Boolean";
            };
        };
        readonly pageBy: {
            readonly __type: "Page";
            readonly __args: {
                readonly id: "ID";
                readonly pageId: "Int";
                readonly uri: "String";
            };
        };
        readonly pages: {
            readonly __type: "RootQueryToPageConnection";
            readonly __args: {
                readonly first: "Int";
                readonly last: "Int";
                readonly after: "String";
                readonly before: "String";
                readonly where: "RootQueryToPageConnectionWhereArgs";
            };
        };
        readonly plugin: {
            readonly __type: "Plugin";
            readonly __args: {
                readonly id: "ID!";
            };
        };
        readonly plugins: {
            readonly __type: "RootQueryToPluginConnection";
            readonly __args: {
                readonly first: "Int";
                readonly last: "Int";
                readonly after: "String";
                readonly before: "String";
            };
        };
        readonly post: {
            readonly __type: "Post";
            readonly __args: {
                readonly id: "ID!";
                readonly idType: "PostIdType";
                readonly asPreview: "Boolean";
            };
        };
        readonly postBy: {
            readonly __type: "Post";
            readonly __args: {
                readonly id: "ID";
                readonly postId: "Int";
                readonly uri: "String";
                readonly slug: "String";
            };
        };
        readonly postFormat: {
            readonly __type: "PostFormat";
            readonly __args: {
                readonly id: "ID!";
                readonly idType: "PostFormatIdType";
            };
        };
        readonly postFormats: {
            readonly __type: "RootQueryToPostFormatConnection";
            readonly __args: {
                readonly first: "Int";
                readonly last: "Int";
                readonly after: "String";
                readonly before: "String";
                readonly where: "RootQueryToPostFormatConnectionWhereArgs";
            };
        };
        readonly posts: {
            readonly __type: "RootQueryToPostConnection";
            readonly __args: {
                readonly first: "Int";
                readonly last: "Int";
                readonly after: "String";
                readonly before: "String";
                readonly where: "RootQueryToPostConnectionWhereArgs";
            };
        };
        readonly readingSettings: {
            readonly __type: "ReadingSettings";
        };
        readonly registeredScripts: {
            readonly __type: "RootQueryToEnqueuedScriptConnection";
            readonly __args: {
                readonly first: "Int";
                readonly last: "Int";
                readonly after: "String";
                readonly before: "String";
            };
        };
        readonly registeredStylesheets: {
            readonly __type: "RootQueryToEnqueuedStylesheetConnection";
            readonly __args: {
                readonly first: "Int";
                readonly last: "Int";
                readonly after: "String";
                readonly before: "String";
            };
        };
        readonly revisions: {
            readonly __type: "RootQueryToContentRevisionUnionConnection";
            readonly __args: {
                readonly first: "Int";
                readonly last: "Int";
                readonly after: "String";
                readonly before: "String";
                readonly where: "RootQueryToContentRevisionUnionConnectionWhereArgs";
            };
        };
        readonly tag: {
            readonly __type: "Tag";
            readonly __args: {
                readonly id: "ID!";
                readonly idType: "TagIdType";
            };
        };
        readonly tags: {
            readonly __type: "RootQueryToTagConnection";
            readonly __args: {
                readonly first: "Int";
                readonly last: "Int";
                readonly after: "String";
                readonly before: "String";
                readonly where: "RootQueryToTagConnectionWhereArgs";
            };
        };
        readonly taxonomies: {
            readonly __type: "RootQueryToTaxonomyConnection";
            readonly __args: {
                readonly first: "Int";
                readonly last: "Int";
                readonly after: "String";
                readonly before: "String";
            };
        };
        readonly taxonomy: {
            readonly __type: "Taxonomy";
            readonly __args: {
                readonly id: "ID!";
                readonly idType: "TaxonomyIdTypeEnum";
            };
        };
        readonly termNode: {
            readonly __type: "TermNode";
            readonly __args: {
                readonly id: "ID!";
                readonly idType: "TermNodeIdTypeEnum";
                readonly taxonomy: "TaxonomyEnum";
            };
        };
        readonly terms: {
            readonly __type: "RootQueryToTermNodeConnection";
            readonly __args: {
                readonly first: "Int";
                readonly last: "Int";
                readonly after: "String";
                readonly before: "String";
                readonly where: "RootQueryToTermNodeConnectionWhereArgs";
            };
        };
        readonly theme: {
            readonly __type: "Theme";
            readonly __args: {
                readonly id: "ID!";
            };
        };
        readonly themes: {
            readonly __type: "RootQueryToThemeConnection";
            readonly __args: {
                readonly first: "Int";
                readonly last: "Int";
                readonly after: "String";
                readonly before: "String";
            };
        };
        readonly user: {
            readonly __type: "User";
            readonly __args: {
                readonly id: "ID!";
                readonly idType: "UserNodeIdTypeEnum";
            };
        };
        readonly userRole: {
            readonly __type: "UserRole";
            readonly __args: {
                readonly id: "ID!";
            };
        };
        readonly userRoles: {
            readonly __type: "RootQueryToUserRoleConnection";
            readonly __args: {
                readonly first: "Int";
                readonly last: "Int";
                readonly after: "String";
                readonly before: "String";
            };
        };
        readonly users: {
            readonly __type: "RootQueryToUserConnection";
            readonly __args: {
                readonly first: "Int";
                readonly last: "Int";
                readonly after: "String";
                readonly before: "String";
                readonly where: "RootQueryToUserConnectionWhereArgs";
            };
        };
        readonly viewer: {
            readonly __type: "User";
        };
        readonly writingSettings: {
            readonly __type: "WritingSettings";
        };
    };
    readonly mutation: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly createCategory: {
            readonly __type: "CreateCategoryPayload";
            readonly __args: {
                readonly input: "CreateCategoryInput!";
            };
        };
        readonly createComment: {
            readonly __type: "CreateCommentPayload";
            readonly __args: {
                readonly input: "CreateCommentInput!";
            };
        };
        readonly createMediaItem: {
            readonly __type: "CreateMediaItemPayload";
            readonly __args: {
                readonly input: "CreateMediaItemInput!";
            };
        };
        readonly createPage: {
            readonly __type: "CreatePagePayload";
            readonly __args: {
                readonly input: "CreatePageInput!";
            };
        };
        readonly createPost: {
            readonly __type: "CreatePostPayload";
            readonly __args: {
                readonly input: "CreatePostInput!";
            };
        };
        readonly createPostFormat: {
            readonly __type: "CreatePostFormatPayload";
            readonly __args: {
                readonly input: "CreatePostFormatInput!";
            };
        };
        readonly createTag: {
            readonly __type: "CreateTagPayload";
            readonly __args: {
                readonly input: "CreateTagInput!";
            };
        };
        readonly createUser: {
            readonly __type: "CreateUserPayload";
            readonly __args: {
                readonly input: "CreateUserInput!";
            };
        };
        readonly deleteCategory: {
            readonly __type: "DeleteCategoryPayload";
            readonly __args: {
                readonly input: "DeleteCategoryInput!";
            };
        };
        readonly deleteComment: {
            readonly __type: "DeleteCommentPayload";
            readonly __args: {
                readonly input: "DeleteCommentInput!";
            };
        };
        readonly deleteMediaItem: {
            readonly __type: "DeleteMediaItemPayload";
            readonly __args: {
                readonly input: "DeleteMediaItemInput!";
            };
        };
        readonly deletePage: {
            readonly __type: "DeletePagePayload";
            readonly __args: {
                readonly input: "DeletePageInput!";
            };
        };
        readonly deletePost: {
            readonly __type: "DeletePostPayload";
            readonly __args: {
                readonly input: "DeletePostInput!";
            };
        };
        readonly deletePostFormat: {
            readonly __type: "DeletePostFormatPayload";
            readonly __args: {
                readonly input: "DeletePostFormatInput!";
            };
        };
        readonly deleteTag: {
            readonly __type: "DeleteTagPayload";
            readonly __args: {
                readonly input: "DeleteTagInput!";
            };
        };
        readonly deleteUser: {
            readonly __type: "DeleteUserPayload";
            readonly __args: {
                readonly input: "DeleteUserInput!";
            };
        };
        readonly increaseCount: {
            readonly __type: "Int";
            readonly __args: {
                readonly count: "Int";
            };
        };
        readonly registerUser: {
            readonly __type: "RegisterUserPayload";
            readonly __args: {
                readonly input: "RegisterUserInput!";
            };
        };
        readonly resetUserPassword: {
            readonly __type: "ResetUserPasswordPayload";
            readonly __args: {
                readonly input: "ResetUserPasswordInput!";
            };
        };
        readonly restoreComment: {
            readonly __type: "RestoreCommentPayload";
            readonly __args: {
                readonly input: "RestoreCommentInput!";
            };
        };
        readonly sendPasswordResetEmail: {
            readonly __type: "SendPasswordResetEmailPayload";
            readonly __args: {
                readonly input: "SendPasswordResetEmailInput!";
            };
        };
        readonly updateCategory: {
            readonly __type: "UpdateCategoryPayload";
            readonly __args: {
                readonly input: "UpdateCategoryInput!";
            };
        };
        readonly updateComment: {
            readonly __type: "UpdateCommentPayload";
            readonly __args: {
                readonly input: "UpdateCommentInput!";
            };
        };
        readonly updateMediaItem: {
            readonly __type: "UpdateMediaItemPayload";
            readonly __args: {
                readonly input: "UpdateMediaItemInput!";
            };
        };
        readonly updatePage: {
            readonly __type: "UpdatePagePayload";
            readonly __args: {
                readonly input: "UpdatePageInput!";
            };
        };
        readonly updatePost: {
            readonly __type: "UpdatePostPayload";
            readonly __args: {
                readonly input: "UpdatePostInput!";
            };
        };
        readonly updatePostFormat: {
            readonly __type: "UpdatePostFormatPayload";
            readonly __args: {
                readonly input: "UpdatePostFormatInput!";
            };
        };
        readonly updateSettings: {
            readonly __type: "UpdateSettingsPayload";
            readonly __args: {
                readonly input: "UpdateSettingsInput!";
            };
        };
        readonly updateTag: {
            readonly __type: "UpdateTagPayload";
            readonly __args: {
                readonly input: "UpdateTagInput!";
            };
        };
        readonly updateUser: {
            readonly __type: "UpdateUserPayload";
            readonly __args: {
                readonly input: "UpdateUserInput!";
            };
        };
    };
    readonly subscription: {};
    readonly Settings: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly discussionSettingsDefaultCommentStatus: {
            readonly __type: "String";
        };
        readonly discussionSettingsDefaultPingStatus: {
            readonly __type: "String";
        };
        readonly generalSettingsDateFormat: {
            readonly __type: "String";
        };
        readonly generalSettingsDescription: {
            readonly __type: "String";
        };
        readonly generalSettingsEmail: {
            readonly __type: "String";
        };
        readonly generalSettingsLanguage: {
            readonly __type: "String";
        };
        readonly generalSettingsStartOfWeek: {
            readonly __type: "Int";
        };
        readonly generalSettingsTimeFormat: {
            readonly __type: "String";
        };
        readonly generalSettingsTimezone: {
            readonly __type: "String";
        };
        readonly generalSettingsTitle: {
            readonly __type: "String";
        };
        readonly generalSettingsUrl: {
            readonly __type: "String";
        };
        readonly readingSettingsPostsPerPage: {
            readonly __type: "Int";
        };
        readonly writingSettingsDefaultCategory: {
            readonly __type: "Int";
        };
        readonly writingSettingsDefaultPostFormat: {
            readonly __type: "String";
        };
        readonly writingSettingsUseSmilies: {
            readonly __type: "Boolean";
        };
    };
    readonly RootQueryToCategoryConnectionWhereArgs: {
        readonly cacheDomain: {
            readonly __type: "String";
        };
        readonly childOf: {
            readonly __type: "Int";
        };
        readonly childless: {
            readonly __type: "Boolean";
        };
        readonly descriptionLike: {
            readonly __type: "String";
        };
        readonly exclude: {
            readonly __type: "[ID]";
        };
        readonly excludeTree: {
            readonly __type: "[ID]";
        };
        readonly hideEmpty: {
            readonly __type: "Boolean";
        };
        readonly hierarchical: {
            readonly __type: "Boolean";
        };
        readonly include: {
            readonly __type: "[ID]";
        };
        readonly name: {
            readonly __type: "[String]";
        };
        readonly nameLike: {
            readonly __type: "String";
        };
        readonly objectIds: {
            readonly __type: "[ID]";
        };
        readonly order: {
            readonly __type: "OrderEnum";
        };
        readonly orderby: {
            readonly __type: "TermObjectsConnectionOrderbyEnum";
        };
        readonly padCounts: {
            readonly __type: "Boolean";
        };
        readonly parent: {
            readonly __type: "Int";
        };
        readonly search: {
            readonly __type: "String";
        };
        readonly slug: {
            readonly __type: "[String]";
        };
        readonly termTaxonomId: {
            readonly __type: "[ID]";
        };
        readonly updateTermMetaCache: {
            readonly __type: "Boolean";
        };
    };
    readonly RootQueryToCategoryConnection: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly edges: {
            readonly __type: "[RootQueryToCategoryConnectionEdge]";
        };
        readonly nodes: {
            readonly __type: "[Category]";
        };
        readonly pageInfo: {
            readonly __type: "WPPageInfo";
        };
    };
    readonly RootQueryToCategoryConnectionEdge: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly cursor: {
            readonly __type: "String";
        };
        readonly node: {
            readonly __type: "Category";
        };
    };
    readonly Category: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly ancestors: {
            readonly __type: "CategoryToAncestorsCategoryConnection";
            readonly __args: {
                readonly first: "Int";
                readonly last: "Int";
                readonly after: "String";
                readonly before: "String";
            };
        };
        readonly categoryId: {
            readonly __type: "Int";
        };
        readonly children: {
            readonly __type: "CategoryToCategoryConnection";
            readonly __args: {
                readonly first: "Int";
                readonly last: "Int";
                readonly after: "String";
                readonly before: "String";
                readonly where: "CategoryToCategoryConnectionWhereArgs";
            };
        };
        readonly contentNodes: {
            readonly __type: "CategoryToContentNodeConnection";
            readonly __args: {
                readonly first: "Int";
                readonly last: "Int";
                readonly after: "String";
                readonly before: "String";
                readonly where: "CategoryToContentNodeConnectionWhereArgs";
            };
        };
        readonly count: {
            readonly __type: "Int";
        };
        readonly databaseId: {
            readonly __type: "Int!";
        };
        readonly description: {
            readonly __type: "String";
        };
        readonly enqueuedScripts: {
            readonly __type: "TermNodeToEnqueuedScriptConnection";
            readonly __args: {
                readonly first: "Int";
                readonly last: "Int";
                readonly after: "String";
                readonly before: "String";
            };
        };
        readonly enqueuedStylesheets: {
            readonly __type: "TermNodeToEnqueuedStylesheetConnection";
            readonly __args: {
                readonly first: "Int";
                readonly last: "Int";
                readonly after: "String";
                readonly before: "String";
            };
        };
        readonly id: {
            readonly __type: "ID!";
        };
        readonly isContentNode: {
            readonly __type: "Boolean!";
        };
        readonly isRestricted: {
            readonly __type: "Boolean";
        };
        readonly isTermNode: {
            readonly __type: "Boolean!";
        };
        readonly link: {
            readonly __type: "String";
        };
        readonly name: {
            readonly __type: "String";
        };
        readonly parent: {
            readonly __type: "CategoryToParentCategoryConnectionEdge";
        };
        readonly parentDatabaseId: {
            readonly __type: "Int";
        };
        readonly parentId: {
            readonly __type: "ID";
        };
        readonly posts: {
            readonly __type: "CategoryToPostConnection";
            readonly __args: {
                readonly first: "Int";
                readonly last: "Int";
                readonly after: "String";
                readonly before: "String";
                readonly where: "CategoryToPostConnectionWhereArgs";
            };
        };
        readonly slug: {
            readonly __type: "String";
        };
        readonly taxonomy: {
            readonly __type: "CategoryToTaxonomyConnectionEdge";
        };
        readonly termGroupId: {
            readonly __type: "Int";
        };
        readonly termTaxonomyId: {
            readonly __type: "Int";
        };
        readonly uri: {
            readonly __type: "String";
        };
    };
    readonly Node: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly id: {
            readonly __type: "ID!";
        };
    };
    readonly TermNode: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly count: {
            readonly __type: "Int";
        };
        readonly databaseId: {
            readonly __type: "Int!";
        };
        readonly description: {
            readonly __type: "String";
        };
        readonly enqueuedScripts: {
            readonly __type: "TermNodeToEnqueuedScriptConnection";
            readonly __args: {
                readonly first: "Int";
                readonly last: "Int";
                readonly after: "String";
                readonly before: "String";
            };
        };
        readonly enqueuedStylesheets: {
            readonly __type: "TermNodeToEnqueuedStylesheetConnection";
            readonly __args: {
                readonly first: "Int";
                readonly last: "Int";
                readonly after: "String";
                readonly before: "String";
            };
        };
        readonly id: {
            readonly __type: "ID!";
        };
        readonly isContentNode: {
            readonly __type: "Boolean!";
        };
        readonly isRestricted: {
            readonly __type: "Boolean";
        };
        readonly isTermNode: {
            readonly __type: "Boolean!";
        };
        readonly link: {
            readonly __type: "String";
        };
        readonly name: {
            readonly __type: "String";
        };
        readonly slug: {
            readonly __type: "String";
        };
        readonly termGroupId: {
            readonly __type: "Int";
        };
        readonly termTaxonomyId: {
            readonly __type: "Int";
        };
        readonly uri: {
            readonly __type: "String";
        };
    };
    readonly UniformResourceIdentifiable: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly id: {
            readonly __type: "ID!";
        };
        readonly isContentNode: {
            readonly __type: "Boolean!";
        };
        readonly isTermNode: {
            readonly __type: "Boolean!";
        };
        readonly uri: {
            readonly __type: "String";
        };
    };
    readonly TermNodeToEnqueuedScriptConnection: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly edges: {
            readonly __type: "[TermNodeToEnqueuedScriptConnectionEdge]";
        };
        readonly nodes: {
            readonly __type: "[EnqueuedScript]";
        };
        readonly pageInfo: {
            readonly __type: "WPPageInfo";
        };
    };
    readonly TermNodeToEnqueuedScriptConnectionEdge: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly cursor: {
            readonly __type: "String";
        };
        readonly node: {
            readonly __type: "EnqueuedScript";
        };
    };
    readonly EnqueuedScript: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly args: {
            readonly __type: "Boolean";
        };
        readonly dependencies: {
            readonly __type: "[EnqueuedScript]";
        };
        readonly extra: {
            readonly __type: "String";
        };
        readonly handle: {
            readonly __type: "String";
        };
        readonly id: {
            readonly __type: "ID!";
        };
        readonly src: {
            readonly __type: "String";
        };
        readonly version: {
            readonly __type: "String";
        };
    };
    readonly EnqueuedAsset: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly args: {
            readonly __type: "Boolean";
        };
        readonly dependencies: {
            readonly __type: "[EnqueuedScript]";
        };
        readonly extra: {
            readonly __type: "String";
        };
        readonly handle: {
            readonly __type: "String";
        };
        readonly id: {
            readonly __type: "ID!";
        };
        readonly src: {
            readonly __type: "String";
        };
        readonly version: {
            readonly __type: "String";
        };
    };
    readonly WPPageInfo: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly endCursor: {
            readonly __type: "String";
        };
        readonly hasNextPage: {
            readonly __type: "Boolean!";
        };
        readonly hasPreviousPage: {
            readonly __type: "Boolean!";
        };
        readonly startCursor: {
            readonly __type: "String";
        };
    };
    readonly TermNodeToEnqueuedStylesheetConnection: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly edges: {
            readonly __type: "[TermNodeToEnqueuedStylesheetConnectionEdge]";
        };
        readonly nodes: {
            readonly __type: "[EnqueuedStylesheet]";
        };
        readonly pageInfo: {
            readonly __type: "WPPageInfo";
        };
    };
    readonly TermNodeToEnqueuedStylesheetConnectionEdge: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly cursor: {
            readonly __type: "String";
        };
        readonly node: {
            readonly __type: "EnqueuedStylesheet";
        };
    };
    readonly EnqueuedStylesheet: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly args: {
            readonly __type: "Boolean";
        };
        readonly dependencies: {
            readonly __type: "[EnqueuedScript]";
        };
        readonly extra: {
            readonly __type: "String";
        };
        readonly handle: {
            readonly __type: "String";
        };
        readonly id: {
            readonly __type: "ID!";
        };
        readonly src: {
            readonly __type: "String";
        };
        readonly version: {
            readonly __type: "String";
        };
    };
    readonly DatabaseIdentifier: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly databaseId: {
            readonly __type: "Int!";
        };
    };
    readonly HierarchicalTermNode: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly parentDatabaseId: {
            readonly __type: "Int";
        };
        readonly parentId: {
            readonly __type: "ID";
        };
    };
    readonly MenuItemLinkable: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly databaseId: {
            readonly __type: "Int!";
        };
        readonly id: {
            readonly __type: "ID!";
        };
        readonly uri: {
            readonly __type: "String";
        };
    };
    readonly CategoryToAncestorsCategoryConnection: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly edges: {
            readonly __type: "[CategoryToAncestorsCategoryConnectionEdge]";
        };
        readonly nodes: {
            readonly __type: "[Category]";
        };
        readonly pageInfo: {
            readonly __type: "WPPageInfo";
        };
    };
    readonly CategoryToAncestorsCategoryConnectionEdge: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly cursor: {
            readonly __type: "String";
        };
        readonly node: {
            readonly __type: "Category";
        };
    };
    readonly CategoryToCategoryConnectionWhereArgs: {
        readonly cacheDomain: {
            readonly __type: "String";
        };
        readonly childOf: {
            readonly __type: "Int";
        };
        readonly childless: {
            readonly __type: "Boolean";
        };
        readonly descriptionLike: {
            readonly __type: "String";
        };
        readonly exclude: {
            readonly __type: "[ID]";
        };
        readonly excludeTree: {
            readonly __type: "[ID]";
        };
        readonly hideEmpty: {
            readonly __type: "Boolean";
        };
        readonly hierarchical: {
            readonly __type: "Boolean";
        };
        readonly include: {
            readonly __type: "[ID]";
        };
        readonly name: {
            readonly __type: "[String]";
        };
        readonly nameLike: {
            readonly __type: "String";
        };
        readonly objectIds: {
            readonly __type: "[ID]";
        };
        readonly order: {
            readonly __type: "OrderEnum";
        };
        readonly orderby: {
            readonly __type: "TermObjectsConnectionOrderbyEnum";
        };
        readonly padCounts: {
            readonly __type: "Boolean";
        };
        readonly parent: {
            readonly __type: "Int";
        };
        readonly search: {
            readonly __type: "String";
        };
        readonly slug: {
            readonly __type: "[String]";
        };
        readonly termTaxonomId: {
            readonly __type: "[ID]";
        };
        readonly updateTermMetaCache: {
            readonly __type: "Boolean";
        };
    };
    readonly CategoryToCategoryConnection: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly edges: {
            readonly __type: "[CategoryToCategoryConnectionEdge]";
        };
        readonly nodes: {
            readonly __type: "[Category]";
        };
        readonly pageInfo: {
            readonly __type: "WPPageInfo";
        };
    };
    readonly CategoryToCategoryConnectionEdge: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly cursor: {
            readonly __type: "String";
        };
        readonly node: {
            readonly __type: "Category";
        };
    };
    readonly CategoryToContentNodeConnectionWhereArgs: {
        readonly contentTypes: {
            readonly __type: "[ContentTypesOfCategoryEnum]";
        };
        readonly dateQuery: {
            readonly __type: "DateQueryInput";
        };
        readonly hasPassword: {
            readonly __type: "Boolean";
        };
        readonly id: {
            readonly __type: "Int";
        };
        readonly in: {
            readonly __type: "[ID]";
        };
        readonly mimeType: {
            readonly __type: "MimeTypeEnum";
        };
        readonly name: {
            readonly __type: "String";
        };
        readonly nameIn: {
            readonly __type: "[String]";
        };
        readonly notIn: {
            readonly __type: "[ID]";
        };
        readonly orderby: {
            readonly __type: "[PostObjectsConnectionOrderbyInput]";
        };
        readonly parent: {
            readonly __type: "ID";
        };
        readonly parentIn: {
            readonly __type: "[ID]";
        };
        readonly parentNotIn: {
            readonly __type: "[ID]";
        };
        readonly password: {
            readonly __type: "String";
        };
        readonly search: {
            readonly __type: "String";
        };
        readonly stati: {
            readonly __type: "[PostStatusEnum]";
        };
        readonly status: {
            readonly __type: "PostStatusEnum";
        };
        readonly title: {
            readonly __type: "String";
        };
    };
    readonly DateQueryInput: {
        readonly after: {
            readonly __type: "DateInput";
        };
        readonly before: {
            readonly __type: "DateInput";
        };
        readonly column: {
            readonly __type: "PostObjectsConnectionDateColumnEnum";
        };
        readonly compare: {
            readonly __type: "String";
        };
        readonly day: {
            readonly __type: "Int";
        };
        readonly hour: {
            readonly __type: "Int";
        };
        readonly inclusive: {
            readonly __type: "Boolean";
        };
        readonly minute: {
            readonly __type: "Int";
        };
        readonly month: {
            readonly __type: "Int";
        };
        readonly relation: {
            readonly __type: "RelationEnum";
        };
        readonly second: {
            readonly __type: "Int";
        };
        readonly week: {
            readonly __type: "Int";
        };
        readonly year: {
            readonly __type: "Int";
        };
    };
    readonly DateInput: {
        readonly day: {
            readonly __type: "Int";
        };
        readonly month: {
            readonly __type: "Int";
        };
        readonly year: {
            readonly __type: "Int";
        };
    };
    readonly PostObjectsConnectionOrderbyInput: {
        readonly field: {
            readonly __type: "PostObjectsConnectionOrderbyEnum!";
        };
        readonly order: {
            readonly __type: "OrderEnum!";
        };
    };
    readonly CategoryToContentNodeConnection: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly edges: {
            readonly __type: "[CategoryToContentNodeConnectionEdge]";
        };
        readonly nodes: {
            readonly __type: "[ContentNode]";
        };
        readonly pageInfo: {
            readonly __type: "WPPageInfo";
        };
    };
    readonly CategoryToContentNodeConnectionEdge: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly cursor: {
            readonly __type: "String";
        };
        readonly node: {
            readonly __type: "ContentNode";
        };
    };
    readonly ContentNode: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly contentType: {
            readonly __type: "ContentNodeToContentTypeConnectionEdge";
        };
        readonly databaseId: {
            readonly __type: "Int!";
        };
        readonly date: {
            readonly __type: "String";
        };
        readonly dateGmt: {
            readonly __type: "String";
        };
        readonly desiredSlug: {
            readonly __type: "String";
        };
        readonly editingLockedBy: {
            readonly __type: "ContentNodeToEditLockConnectionEdge";
        };
        readonly enclosure: {
            readonly __type: "String";
        };
        readonly enqueuedScripts: {
            readonly __type: "ContentNodeToEnqueuedScriptConnection";
            readonly __args: {
                readonly first: "Int";
                readonly last: "Int";
                readonly after: "String";
                readonly before: "String";
            };
        };
        readonly enqueuedStylesheets: {
            readonly __type: "ContentNodeToEnqueuedStylesheetConnection";
            readonly __args: {
                readonly first: "Int";
                readonly last: "Int";
                readonly after: "String";
                readonly before: "String";
            };
        };
        readonly guid: {
            readonly __type: "String";
        };
        readonly id: {
            readonly __type: "ID!";
        };
        readonly isContentNode: {
            readonly __type: "Boolean!";
        };
        readonly isPreview: {
            readonly __type: "Boolean";
        };
        readonly isRestricted: {
            readonly __type: "Boolean";
        };
        readonly isTermNode: {
            readonly __type: "Boolean!";
        };
        readonly lastEditedBy: {
            readonly __type: "ContentNodeToEditLastConnectionEdge";
        };
        readonly link: {
            readonly __type: "String";
        };
        readonly modified: {
            readonly __type: "String";
        };
        readonly modifiedGmt: {
            readonly __type: "String";
        };
        readonly previewRevisionDatabaseId: {
            readonly __type: "Int";
        };
        readonly previewRevisionId: {
            readonly __type: "ID";
        };
        readonly slug: {
            readonly __type: "String";
        };
        readonly status: {
            readonly __type: "String";
        };
        readonly template: {
            readonly __type: "ContentTemplate";
        };
        readonly uri: {
            readonly __type: "String";
        };
    };
    readonly ContentNodeToContentTypeConnectionEdge: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly node: {
            readonly __type: "ContentType";
        };
    };
    readonly ContentType: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly canExport: {
            readonly __type: "Boolean";
        };
        readonly connectedTaxonomies: {
            readonly __type: "ContentTypeToTaxonomyConnection";
            readonly __args: {
                readonly first: "Int";
                readonly last: "Int";
                readonly after: "String";
                readonly before: "String";
            };
        };
        readonly contentNodes: {
            readonly __type: "ContentTypeToContentNodeConnection";
            readonly __args: {
                readonly first: "Int";
                readonly last: "Int";
                readonly after: "String";
                readonly before: "String";
                readonly where: "ContentTypeToContentNodeConnectionWhereArgs";
            };
        };
        readonly deleteWithUser: {
            readonly __type: "Boolean";
        };
        readonly description: {
            readonly __type: "String";
        };
        readonly excludeFromSearch: {
            readonly __type: "Boolean";
        };
        readonly graphqlPluralName: {
            readonly __type: "String";
        };
        readonly graphqlSingleName: {
            readonly __type: "String";
        };
        readonly hasArchive: {
            readonly __type: "Boolean";
        };
        readonly hierarchical: {
            readonly __type: "Boolean";
        };
        readonly id: {
            readonly __type: "ID!";
        };
        readonly isContentNode: {
            readonly __type: "Boolean!";
        };
        readonly isFrontPage: {
            readonly __type: "Boolean!";
        };
        readonly isPostsPage: {
            readonly __type: "Boolean!";
        };
        readonly isRestricted: {
            readonly __type: "Boolean";
        };
        readonly isTermNode: {
            readonly __type: "Boolean!";
        };
        readonly label: {
            readonly __type: "String";
        };
        readonly labels: {
            readonly __type: "PostTypeLabelDetails";
        };
        readonly menuIcon: {
            readonly __type: "String";
        };
        readonly menuPosition: {
            readonly __type: "Int";
        };
        readonly name: {
            readonly __type: "String";
        };
        readonly public: {
            readonly __type: "Boolean";
        };
        readonly publiclyQueryable: {
            readonly __type: "Boolean";
        };
        readonly restBase: {
            readonly __type: "String";
        };
        readonly restControllerClass: {
            readonly __type: "String";
        };
        readonly showInAdminBar: {
            readonly __type: "Boolean";
        };
        readonly showInGraphql: {
            readonly __type: "Boolean";
        };
        readonly showInMenu: {
            readonly __type: "Boolean";
        };
        readonly showInNavMenus: {
            readonly __type: "Boolean";
        };
        readonly showInRest: {
            readonly __type: "Boolean";
        };
        readonly showUi: {
            readonly __type: "Boolean";
        };
        readonly uri: {
            readonly __type: "String";
        };
    };
    readonly ContentTypeToTaxonomyConnection: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly edges: {
            readonly __type: "[ContentTypeToTaxonomyConnectionEdge]";
        };
        readonly nodes: {
            readonly __type: "[Taxonomy]";
        };
        readonly pageInfo: {
            readonly __type: "WPPageInfo";
        };
    };
    readonly ContentTypeToTaxonomyConnectionEdge: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly cursor: {
            readonly __type: "String";
        };
        readonly node: {
            readonly __type: "Taxonomy";
        };
    };
    readonly Taxonomy: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly connectedContentTypes: {
            readonly __type: "TaxonomyToContentTypeConnection";
            readonly __args: {
                readonly first: "Int";
                readonly last: "Int";
                readonly after: "String";
                readonly before: "String";
            };
        };
        readonly description: {
            readonly __type: "String";
        };
        readonly graphqlPluralName: {
            readonly __type: "String";
        };
        readonly graphqlSingleName: {
            readonly __type: "String";
        };
        readonly hierarchical: {
            readonly __type: "Boolean";
        };
        readonly id: {
            readonly __type: "ID!";
        };
        readonly isRestricted: {
            readonly __type: "Boolean";
        };
        readonly label: {
            readonly __type: "String";
        };
        readonly name: {
            readonly __type: "String";
        };
        readonly public: {
            readonly __type: "Boolean";
        };
        readonly restBase: {
            readonly __type: "String";
        };
        readonly restControllerClass: {
            readonly __type: "String";
        };
        readonly showCloud: {
            readonly __type: "Boolean";
        };
        readonly showInAdminColumn: {
            readonly __type: "Boolean";
        };
        readonly showInGraphql: {
            readonly __type: "Boolean";
        };
        readonly showInMenu: {
            readonly __type: "Boolean";
        };
        readonly showInNavMenus: {
            readonly __type: "Boolean";
        };
        readonly showInQuickEdit: {
            readonly __type: "Boolean";
        };
        readonly showInRest: {
            readonly __type: "Boolean";
        };
        readonly showUi: {
            readonly __type: "Boolean";
        };
    };
    readonly TaxonomyToContentTypeConnection: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly edges: {
            readonly __type: "[TaxonomyToContentTypeConnectionEdge]";
        };
        readonly nodes: {
            readonly __type: "[ContentType]";
        };
        readonly pageInfo: {
            readonly __type: "WPPageInfo";
        };
    };
    readonly TaxonomyToContentTypeConnectionEdge: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly cursor: {
            readonly __type: "String";
        };
        readonly node: {
            readonly __type: "ContentType";
        };
    };
    readonly ContentTypeToContentNodeConnectionWhereArgs: {
        readonly contentTypes: {
            readonly __type: "[ContentTypeEnum]";
        };
        readonly dateQuery: {
            readonly __type: "DateQueryInput";
        };
        readonly hasPassword: {
            readonly __type: "Boolean";
        };
        readonly id: {
            readonly __type: "Int";
        };
        readonly in: {
            readonly __type: "[ID]";
        };
        readonly mimeType: {
            readonly __type: "MimeTypeEnum";
        };
        readonly name: {
            readonly __type: "String";
        };
        readonly nameIn: {
            readonly __type: "[String]";
        };
        readonly notIn: {
            readonly __type: "[ID]";
        };
        readonly orderby: {
            readonly __type: "[PostObjectsConnectionOrderbyInput]";
        };
        readonly parent: {
            readonly __type: "ID";
        };
        readonly parentIn: {
            readonly __type: "[ID]";
        };
        readonly parentNotIn: {
            readonly __type: "[ID]";
        };
        readonly password: {
            readonly __type: "String";
        };
        readonly search: {
            readonly __type: "String";
        };
        readonly stati: {
            readonly __type: "[PostStatusEnum]";
        };
        readonly status: {
            readonly __type: "PostStatusEnum";
        };
        readonly title: {
            readonly __type: "String";
        };
    };
    readonly ContentTypeToContentNodeConnection: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly edges: {
            readonly __type: "[ContentTypeToContentNodeConnectionEdge]";
        };
        readonly nodes: {
            readonly __type: "[ContentNode]";
        };
        readonly pageInfo: {
            readonly __type: "WPPageInfo";
        };
    };
    readonly ContentTypeToContentNodeConnectionEdge: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly cursor: {
            readonly __type: "String";
        };
        readonly node: {
            readonly __type: "ContentNode";
        };
    };
    readonly PostTypeLabelDetails: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly addNew: {
            readonly __type: "String";
        };
        readonly addNewItem: {
            readonly __type: "String";
        };
        readonly allItems: {
            readonly __type: "String";
        };
        readonly archives: {
            readonly __type: "String";
        };
        readonly attributes: {
            readonly __type: "String";
        };
        readonly editItem: {
            readonly __type: "String";
        };
        readonly featuredImage: {
            readonly __type: "String";
        };
        readonly filterItemsList: {
            readonly __type: "String";
        };
        readonly insertIntoItem: {
            readonly __type: "String";
        };
        readonly itemsList: {
            readonly __type: "String";
        };
        readonly itemsListNavigation: {
            readonly __type: "String";
        };
        readonly menuName: {
            readonly __type: "String";
        };
        readonly name: {
            readonly __type: "String";
        };
        readonly newItem: {
            readonly __type: "String";
        };
        readonly notFound: {
            readonly __type: "String";
        };
        readonly notFoundInTrash: {
            readonly __type: "String";
        };
        readonly parentItemColon: {
            readonly __type: "String";
        };
        readonly removeFeaturedImage: {
            readonly __type: "String";
        };
        readonly searchItems: {
            readonly __type: "String";
        };
        readonly setFeaturedImage: {
            readonly __type: "String";
        };
        readonly singularName: {
            readonly __type: "String";
        };
        readonly uploadedToThisItem: {
            readonly __type: "String";
        };
        readonly useFeaturedImage: {
            readonly __type: "String";
        };
        readonly viewItem: {
            readonly __type: "String";
        };
        readonly viewItems: {
            readonly __type: "String";
        };
    };
    readonly ContentNodeToEditLockConnectionEdge: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly lockTimestamp: {
            readonly __type: "String";
        };
        readonly node: {
            readonly __type: "User";
        };
    };
    readonly User: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly avatar: {
            readonly __type: "Avatar";
            readonly __args: {
                readonly size: "Int";
                readonly forceDefault: "Boolean";
                readonly rating: "AvatarRatingEnum";
            };
        };
        readonly capKey: {
            readonly __type: "String";
        };
        readonly capabilities: {
            readonly __type: "[String]";
        };
        readonly comments: {
            readonly __type: "UserToCommentConnection";
            readonly __args: {
                readonly first: "Int";
                readonly last: "Int";
                readonly after: "String";
                readonly before: "String";
                readonly where: "UserToCommentConnectionWhereArgs";
            };
        };
        readonly databaseId: {
            readonly __type: "Int!";
        };
        readonly description: {
            readonly __type: "String";
        };
        readonly email: {
            readonly __type: "String";
        };
        readonly enqueuedScripts: {
            readonly __type: "UserToEnqueuedScriptConnection";
            readonly __args: {
                readonly first: "Int";
                readonly last: "Int";
                readonly after: "String";
                readonly before: "String";
            };
        };
        readonly enqueuedStylesheets: {
            readonly __type: "UserToEnqueuedStylesheetConnection";
            readonly __args: {
                readonly first: "Int";
                readonly last: "Int";
                readonly after: "String";
                readonly before: "String";
            };
        };
        readonly extraCapabilities: {
            readonly __type: "[String]";
        };
        readonly firstName: {
            readonly __type: "String";
        };
        readonly id: {
            readonly __type: "ID!";
        };
        readonly isContentNode: {
            readonly __type: "Boolean!";
        };
        readonly isRestricted: {
            readonly __type: "Boolean";
        };
        readonly isTermNode: {
            readonly __type: "Boolean!";
        };
        readonly lastName: {
            readonly __type: "String";
        };
        readonly locale: {
            readonly __type: "String";
        };
        readonly mediaItems: {
            readonly __type: "UserToMediaItemConnection";
            readonly __args: {
                readonly first: "Int";
                readonly last: "Int";
                readonly after: "String";
                readonly before: "String";
                readonly where: "UserToMediaItemConnectionWhereArgs";
            };
        };
        readonly name: {
            readonly __type: "String";
        };
        readonly nicename: {
            readonly __type: "String";
        };
        readonly nickname: {
            readonly __type: "String";
        };
        readonly pages: {
            readonly __type: "UserToPageConnection";
            readonly __args: {
                readonly first: "Int";
                readonly last: "Int";
                readonly after: "String";
                readonly before: "String";
                readonly where: "UserToPageConnectionWhereArgs";
            };
        };
        readonly posts: {
            readonly __type: "UserToPostConnection";
            readonly __args: {
                readonly first: "Int";
                readonly last: "Int";
                readonly after: "String";
                readonly before: "String";
                readonly where: "UserToPostConnectionWhereArgs";
            };
        };
        readonly registeredDate: {
            readonly __type: "String";
        };
        readonly revisions: {
            readonly __type: "UserToContentRevisionUnionConnection";
            readonly __args: {
                readonly first: "Int";
                readonly last: "Int";
                readonly after: "String";
                readonly before: "String";
                readonly where: "UserToContentRevisionUnionConnectionWhereArgs";
            };
        };
        readonly roles: {
            readonly __type: "UserToUserRoleConnection";
            readonly __args: {
                readonly first: "Int";
                readonly last: "Int";
                readonly after: "String";
                readonly before: "String";
            };
        };
        readonly slug: {
            readonly __type: "String";
        };
        readonly uri: {
            readonly __type: "String";
        };
        readonly url: {
            readonly __type: "String";
        };
        readonly userId: {
            readonly __type: "Int";
        };
        readonly username: {
            readonly __type: "String";
        };
    };
    readonly Commenter: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly databaseId: {
            readonly __type: "Int!";
        };
        readonly email: {
            readonly __type: "String";
        };
        readonly id: {
            readonly __type: "ID!";
        };
        readonly isRestricted: {
            readonly __type: "Boolean";
        };
        readonly name: {
            readonly __type: "String";
        };
        readonly url: {
            readonly __type: "String";
        };
    };
    readonly Avatar: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly default: {
            readonly __type: "String";
        };
        readonly extraAttr: {
            readonly __type: "String";
        };
        readonly forceDefault: {
            readonly __type: "Boolean";
        };
        readonly foundAvatar: {
            readonly __type: "Boolean";
        };
        readonly height: {
            readonly __type: "Int";
        };
        readonly isRestricted: {
            readonly __type: "Boolean";
        };
        readonly rating: {
            readonly __type: "String";
        };
        readonly scheme: {
            readonly __type: "String";
        };
        readonly size: {
            readonly __type: "Int";
        };
        readonly url: {
            readonly __type: "String";
        };
        readonly width: {
            readonly __type: "Int";
        };
    };
    readonly UserToCommentConnectionWhereArgs: {
        readonly authorEmail: {
            readonly __type: "String";
        };
        readonly authorIn: {
            readonly __type: "[ID]";
        };
        readonly authorNotIn: {
            readonly __type: "[ID]";
        };
        readonly authorUrl: {
            readonly __type: "String";
        };
        readonly commentIn: {
            readonly __type: "[ID]";
        };
        readonly commentNotIn: {
            readonly __type: "[ID]";
        };
        readonly commentType: {
            readonly __type: "String";
        };
        readonly commentTypeIn: {
            readonly __type: "[String]";
        };
        readonly commentTypeNotIn: {
            readonly __type: "String";
        };
        readonly contentAuthor: {
            readonly __type: "[ID]";
        };
        readonly contentAuthorIn: {
            readonly __type: "[ID]";
        };
        readonly contentAuthorNotIn: {
            readonly __type: "[ID]";
        };
        readonly contentId: {
            readonly __type: "ID";
        };
        readonly contentIdIn: {
            readonly __type: "[ID]";
        };
        readonly contentIdNotIn: {
            readonly __type: "[ID]";
        };
        readonly contentName: {
            readonly __type: "String";
        };
        readonly contentParent: {
            readonly __type: "Int";
        };
        readonly contentStatus: {
            readonly __type: "[PostStatusEnum]";
        };
        readonly contentType: {
            readonly __type: "[ContentTypeEnum]";
        };
        readonly includeUnapproved: {
            readonly __type: "[ID]";
        };
        readonly karma: {
            readonly __type: "Int";
        };
        readonly order: {
            readonly __type: "OrderEnum";
        };
        readonly orderby: {
            readonly __type: "CommentsConnectionOrderbyEnum";
        };
        readonly parent: {
            readonly __type: "Int";
        };
        readonly parentIn: {
            readonly __type: "[ID]";
        };
        readonly parentNotIn: {
            readonly __type: "[ID]";
        };
        readonly search: {
            readonly __type: "String";
        };
        readonly status: {
            readonly __type: "String";
        };
        readonly userId: {
            readonly __type: "ID";
        };
    };
    readonly UserToCommentConnection: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly edges: {
            readonly __type: "[UserToCommentConnectionEdge]";
        };
        readonly nodes: {
            readonly __type: "[Comment]";
        };
        readonly pageInfo: {
            readonly __type: "WPPageInfo";
        };
    };
    readonly UserToCommentConnectionEdge: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly cursor: {
            readonly __type: "String";
        };
        readonly node: {
            readonly __type: "Comment";
        };
    };
    readonly Comment: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly agent: {
            readonly __type: "String";
        };
        readonly approved: {
            readonly __type: "Boolean";
        };
        readonly author: {
            readonly __type: "CommentToCommenterConnectionEdge";
        };
        readonly authorIp: {
            readonly __type: "String";
        };
        readonly commentId: {
            readonly __type: "Int";
        };
        readonly commentedOn: {
            readonly __type: "CommentToContentNodeConnectionEdge";
        };
        readonly content: {
            readonly __type: "String";
            readonly __args: {
                readonly format: "PostObjectFieldFormatEnum";
            };
        };
        readonly databaseId: {
            readonly __type: "Int!";
        };
        readonly date: {
            readonly __type: "String";
        };
        readonly dateGmt: {
            readonly __type: "String";
        };
        readonly id: {
            readonly __type: "ID!";
        };
        readonly isRestricted: {
            readonly __type: "Boolean";
        };
        readonly karma: {
            readonly __type: "Int";
        };
        readonly parent: {
            readonly __type: "CommentToParentCommentConnectionEdge";
            readonly __args: {
                readonly where: "CommentToParentCommentConnectionWhereArgs";
            };
        };
        readonly parentDatabaseId: {
            readonly __type: "Int";
        };
        readonly parentId: {
            readonly __type: "ID";
        };
        readonly replies: {
            readonly __type: "CommentToCommentConnection";
            readonly __args: {
                readonly first: "Int";
                readonly last: "Int";
                readonly after: "String";
                readonly before: "String";
                readonly where: "CommentToCommentConnectionWhereArgs";
            };
        };
        readonly type: {
            readonly __type: "String";
        };
    };
    readonly CommentToCommenterConnectionEdge: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly node: {
            readonly __type: "Commenter";
        };
    };
    readonly CommentToContentNodeConnectionEdge: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly node: {
            readonly __type: "ContentNode";
        };
    };
    readonly CommentToParentCommentConnectionWhereArgs: {
        readonly authorEmail: {
            readonly __type: "String";
        };
        readonly authorIn: {
            readonly __type: "[ID]";
        };
        readonly authorNotIn: {
            readonly __type: "[ID]";
        };
        readonly authorUrl: {
            readonly __type: "String";
        };
        readonly commentIn: {
            readonly __type: "[ID]";
        };
        readonly commentNotIn: {
            readonly __type: "[ID]";
        };
        readonly commentType: {
            readonly __type: "String";
        };
        readonly commentTypeIn: {
            readonly __type: "[String]";
        };
        readonly commentTypeNotIn: {
            readonly __type: "String";
        };
        readonly contentAuthor: {
            readonly __type: "[ID]";
        };
        readonly contentAuthorIn: {
            readonly __type: "[ID]";
        };
        readonly contentAuthorNotIn: {
            readonly __type: "[ID]";
        };
        readonly contentId: {
            readonly __type: "ID";
        };
        readonly contentIdIn: {
            readonly __type: "[ID]";
        };
        readonly contentIdNotIn: {
            readonly __type: "[ID]";
        };
        readonly contentName: {
            readonly __type: "String";
        };
        readonly contentParent: {
            readonly __type: "Int";
        };
        readonly contentStatus: {
            readonly __type: "[PostStatusEnum]";
        };
        readonly contentType: {
            readonly __type: "[ContentTypeEnum]";
        };
        readonly includeUnapproved: {
            readonly __type: "[ID]";
        };
        readonly karma: {
            readonly __type: "Int";
        };
        readonly order: {
            readonly __type: "OrderEnum";
        };
        readonly orderby: {
            readonly __type: "CommentsConnectionOrderbyEnum";
        };
        readonly parent: {
            readonly __type: "Int";
        };
        readonly parentIn: {
            readonly __type: "[ID]";
        };
        readonly parentNotIn: {
            readonly __type: "[ID]";
        };
        readonly search: {
            readonly __type: "String";
        };
        readonly status: {
            readonly __type: "String";
        };
        readonly userId: {
            readonly __type: "ID";
        };
    };
    readonly CommentToParentCommentConnectionEdge: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly node: {
            readonly __type: "Comment";
        };
    };
    readonly CommentToCommentConnectionWhereArgs: {
        readonly authorEmail: {
            readonly __type: "String";
        };
        readonly authorIn: {
            readonly __type: "[ID]";
        };
        readonly authorNotIn: {
            readonly __type: "[ID]";
        };
        readonly authorUrl: {
            readonly __type: "String";
        };
        readonly commentIn: {
            readonly __type: "[ID]";
        };
        readonly commentNotIn: {
            readonly __type: "[ID]";
        };
        readonly commentType: {
            readonly __type: "String";
        };
        readonly commentTypeIn: {
            readonly __type: "[String]";
        };
        readonly commentTypeNotIn: {
            readonly __type: "String";
        };
        readonly contentAuthor: {
            readonly __type: "[ID]";
        };
        readonly contentAuthorIn: {
            readonly __type: "[ID]";
        };
        readonly contentAuthorNotIn: {
            readonly __type: "[ID]";
        };
        readonly contentId: {
            readonly __type: "ID";
        };
        readonly contentIdIn: {
            readonly __type: "[ID]";
        };
        readonly contentIdNotIn: {
            readonly __type: "[ID]";
        };
        readonly contentName: {
            readonly __type: "String";
        };
        readonly contentParent: {
            readonly __type: "Int";
        };
        readonly contentStatus: {
            readonly __type: "[PostStatusEnum]";
        };
        readonly contentType: {
            readonly __type: "[ContentTypeEnum]";
        };
        readonly includeUnapproved: {
            readonly __type: "[ID]";
        };
        readonly karma: {
            readonly __type: "Int";
        };
        readonly order: {
            readonly __type: "OrderEnum";
        };
        readonly orderby: {
            readonly __type: "CommentsConnectionOrderbyEnum";
        };
        readonly parent: {
            readonly __type: "Int";
        };
        readonly parentIn: {
            readonly __type: "[ID]";
        };
        readonly parentNotIn: {
            readonly __type: "[ID]";
        };
        readonly search: {
            readonly __type: "String";
        };
        readonly status: {
            readonly __type: "String";
        };
        readonly userId: {
            readonly __type: "ID";
        };
    };
    readonly CommentToCommentConnection: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly edges: {
            readonly __type: "[CommentToCommentConnectionEdge]";
        };
        readonly nodes: {
            readonly __type: "[Comment]";
        };
        readonly pageInfo: {
            readonly __type: "WPPageInfo";
        };
    };
    readonly CommentToCommentConnectionEdge: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly cursor: {
            readonly __type: "String";
        };
        readonly node: {
            readonly __type: "Comment";
        };
    };
    readonly UserToEnqueuedScriptConnection: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly edges: {
            readonly __type: "[UserToEnqueuedScriptConnectionEdge]";
        };
        readonly nodes: {
            readonly __type: "[EnqueuedScript]";
        };
        readonly pageInfo: {
            readonly __type: "WPPageInfo";
        };
    };
    readonly UserToEnqueuedScriptConnectionEdge: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly cursor: {
            readonly __type: "String";
        };
        readonly node: {
            readonly __type: "EnqueuedScript";
        };
    };
    readonly UserToEnqueuedStylesheetConnection: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly edges: {
            readonly __type: "[UserToEnqueuedStylesheetConnectionEdge]";
        };
        readonly nodes: {
            readonly __type: "[EnqueuedStylesheet]";
        };
        readonly pageInfo: {
            readonly __type: "WPPageInfo";
        };
    };
    readonly UserToEnqueuedStylesheetConnectionEdge: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly cursor: {
            readonly __type: "String";
        };
        readonly node: {
            readonly __type: "EnqueuedStylesheet";
        };
    };
    readonly UserToMediaItemConnectionWhereArgs: {
        readonly author: {
            readonly __type: "Int";
        };
        readonly authorIn: {
            readonly __type: "[ID]";
        };
        readonly authorName: {
            readonly __type: "String";
        };
        readonly authorNotIn: {
            readonly __type: "[ID]";
        };
        readonly dateQuery: {
            readonly __type: "DateQueryInput";
        };
        readonly hasPassword: {
            readonly __type: "Boolean";
        };
        readonly id: {
            readonly __type: "Int";
        };
        readonly in: {
            readonly __type: "[ID]";
        };
        readonly mimeType: {
            readonly __type: "MimeTypeEnum";
        };
        readonly name: {
            readonly __type: "String";
        };
        readonly nameIn: {
            readonly __type: "[String]";
        };
        readonly notIn: {
            readonly __type: "[ID]";
        };
        readonly orderby: {
            readonly __type: "[PostObjectsConnectionOrderbyInput]";
        };
        readonly parent: {
            readonly __type: "ID";
        };
        readonly parentIn: {
            readonly __type: "[ID]";
        };
        readonly parentNotIn: {
            readonly __type: "[ID]";
        };
        readonly password: {
            readonly __type: "String";
        };
        readonly search: {
            readonly __type: "String";
        };
        readonly stati: {
            readonly __type: "[PostStatusEnum]";
        };
        readonly status: {
            readonly __type: "PostStatusEnum";
        };
        readonly title: {
            readonly __type: "String";
        };
    };
    readonly UserToMediaItemConnection: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly edges: {
            readonly __type: "[UserToMediaItemConnectionEdge]";
        };
        readonly nodes: {
            readonly __type: "[MediaItem]";
        };
        readonly pageInfo: {
            readonly __type: "WPPageInfo";
        };
    };
    readonly UserToMediaItemConnectionEdge: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly cursor: {
            readonly __type: "String";
        };
        readonly node: {
            readonly __type: "MediaItem";
        };
    };
    readonly MediaItem: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly altText: {
            readonly __type: "String";
        };
        readonly ancestors: {
            readonly __type: "HierarchicalContentNodeToContentNodeAncestorsConnection";
            readonly __args: {
                readonly first: "Int";
                readonly last: "Int";
                readonly after: "String";
                readonly before: "String";
                readonly where: "HierarchicalContentNodeToContentNodeAncestorsConnectionWhereArgs";
            };
        };
        readonly author: {
            readonly __type: "NodeWithAuthorToUserConnectionEdge";
        };
        readonly authorDatabaseId: {
            readonly __type: "Int";
        };
        readonly authorId: {
            readonly __type: "ID";
        };
        readonly caption: {
            readonly __type: "String";
            readonly __args: {
                readonly format: "PostObjectFieldFormatEnum";
            };
        };
        readonly children: {
            readonly __type: "HierarchicalContentNodeToContentNodeChildrenConnection";
            readonly __args: {
                readonly first: "Int";
                readonly last: "Int";
                readonly after: "String";
                readonly before: "String";
                readonly where: "HierarchicalContentNodeToContentNodeChildrenConnectionWhereArgs";
            };
        };
        readonly commentCount: {
            readonly __type: "Int";
        };
        readonly commentStatus: {
            readonly __type: "String";
        };
        readonly comments: {
            readonly __type: "MediaItemToCommentConnection";
            readonly __args: {
                readonly first: "Int";
                readonly last: "Int";
                readonly after: "String";
                readonly before: "String";
                readonly where: "MediaItemToCommentConnectionWhereArgs";
            };
        };
        readonly contentType: {
            readonly __type: "ContentNodeToContentTypeConnectionEdge";
        };
        readonly databaseId: {
            readonly __type: "Int!";
        };
        readonly date: {
            readonly __type: "String";
        };
        readonly dateGmt: {
            readonly __type: "String";
        };
        readonly description: {
            readonly __type: "String";
            readonly __args: {
                readonly format: "PostObjectFieldFormatEnum";
            };
        };
        readonly desiredSlug: {
            readonly __type: "String";
        };
        readonly editingLockedBy: {
            readonly __type: "ContentNodeToEditLockConnectionEdge";
        };
        readonly enclosure: {
            readonly __type: "String";
        };
        readonly enqueuedScripts: {
            readonly __type: "ContentNodeToEnqueuedScriptConnection";
            readonly __args: {
                readonly first: "Int";
                readonly last: "Int";
                readonly after: "String";
                readonly before: "String";
            };
        };
        readonly enqueuedStylesheets: {
            readonly __type: "ContentNodeToEnqueuedStylesheetConnection";
            readonly __args: {
                readonly first: "Int";
                readonly last: "Int";
                readonly after: "String";
                readonly before: "String";
            };
        };
        readonly fileSize: {
            readonly __type: "Int";
            readonly __args: {
                readonly size: "MediaItemSizeEnum";
            };
        };
        readonly guid: {
            readonly __type: "String";
        };
        readonly id: {
            readonly __type: "ID!";
        };
        readonly isContentNode: {
            readonly __type: "Boolean!";
        };
        readonly isPreview: {
            readonly __type: "Boolean";
        };
        readonly isRestricted: {
            readonly __type: "Boolean";
        };
        readonly isTermNode: {
            readonly __type: "Boolean!";
        };
        readonly lastEditedBy: {
            readonly __type: "ContentNodeToEditLastConnectionEdge";
        };
        readonly link: {
            readonly __type: "String";
        };
        readonly mediaDetails: {
            readonly __type: "MediaDetails";
        };
        readonly mediaItemId: {
            readonly __type: "Int!";
        };
        readonly mediaItemUrl: {
            readonly __type: "String";
        };
        readonly mediaType: {
            readonly __type: "String";
        };
        readonly mimeType: {
            readonly __type: "String";
        };
        readonly modified: {
            readonly __type: "String";
        };
        readonly modifiedGmt: {
            readonly __type: "String";
        };
        readonly parent: {
            readonly __type: "HierarchicalContentNodeToParentContentNodeConnectionEdge";
        };
        readonly parentDatabaseId: {
            readonly __type: "Int";
        };
        readonly parentId: {
            readonly __type: "ID";
        };
        readonly previewRevisionDatabaseId: {
            readonly __type: "Int";
        };
        readonly previewRevisionId: {
            readonly __type: "ID";
        };
        readonly sizes: {
            readonly __type: "String";
            readonly __args: {
                readonly size: "MediaItemSizeEnum";
            };
        };
        readonly slug: {
            readonly __type: "String";
        };
        readonly sourceUrl: {
            readonly __type: "String";
            readonly __args: {
                readonly size: "MediaItemSizeEnum";
            };
        };
        readonly srcSet: {
            readonly __type: "String";
            readonly __args: {
                readonly size: "MediaItemSizeEnum";
            };
        };
        readonly status: {
            readonly __type: "String";
        };
        readonly template: {
            readonly __type: "ContentTemplate";
        };
        readonly title: {
            readonly __type: "String";
            readonly __args: {
                readonly format: "PostObjectFieldFormatEnum";
            };
        };
        readonly uri: {
            readonly __type: "String";
        };
    };
    readonly NodeWithTemplate: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly template: {
            readonly __type: "ContentTemplate";
        };
    };
    readonly ContentTemplate: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly templateName: {
            readonly __type: "String";
        };
    };
    readonly NodeWithTitle: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly title: {
            readonly __type: "String";
            readonly __args: {
                readonly format: "PostObjectFieldFormatEnum";
            };
        };
    };
    readonly NodeWithAuthor: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly author: {
            readonly __type: "NodeWithAuthorToUserConnectionEdge";
        };
        readonly authorDatabaseId: {
            readonly __type: "Int";
        };
        readonly authorId: {
            readonly __type: "ID";
        };
    };
    readonly NodeWithAuthorToUserConnectionEdge: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly node: {
            readonly __type: "User";
        };
    };
    readonly NodeWithComments: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly commentCount: {
            readonly __type: "Int";
        };
        readonly commentStatus: {
            readonly __type: "String";
        };
    };
    readonly HierarchicalContentNode: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly ancestors: {
            readonly __type: "HierarchicalContentNodeToContentNodeAncestorsConnection";
            readonly __args: {
                readonly first: "Int";
                readonly last: "Int";
                readonly after: "String";
                readonly before: "String";
                readonly where: "HierarchicalContentNodeToContentNodeAncestorsConnectionWhereArgs";
            };
        };
        readonly children: {
            readonly __type: "HierarchicalContentNodeToContentNodeChildrenConnection";
            readonly __args: {
                readonly first: "Int";
                readonly last: "Int";
                readonly after: "String";
                readonly before: "String";
                readonly where: "HierarchicalContentNodeToContentNodeChildrenConnectionWhereArgs";
            };
        };
        readonly parent: {
            readonly __type: "HierarchicalContentNodeToParentContentNodeConnectionEdge";
        };
        readonly parentDatabaseId: {
            readonly __type: "Int";
        };
        readonly parentId: {
            readonly __type: "ID";
        };
    };
    readonly HierarchicalContentNodeToContentNodeAncestorsConnectionWhereArgs: {
        readonly contentTypes: {
            readonly __type: "[ContentTypeEnum]";
        };
        readonly dateQuery: {
            readonly __type: "DateQueryInput";
        };
        readonly hasPassword: {
            readonly __type: "Boolean";
        };
        readonly id: {
            readonly __type: "Int";
        };
        readonly in: {
            readonly __type: "[ID]";
        };
        readonly mimeType: {
            readonly __type: "MimeTypeEnum";
        };
        readonly name: {
            readonly __type: "String";
        };
        readonly nameIn: {
            readonly __type: "[String]";
        };
        readonly notIn: {
            readonly __type: "[ID]";
        };
        readonly orderby: {
            readonly __type: "[PostObjectsConnectionOrderbyInput]";
        };
        readonly parent: {
            readonly __type: "ID";
        };
        readonly parentIn: {
            readonly __type: "[ID]";
        };
        readonly parentNotIn: {
            readonly __type: "[ID]";
        };
        readonly password: {
            readonly __type: "String";
        };
        readonly search: {
            readonly __type: "String";
        };
        readonly stati: {
            readonly __type: "[PostStatusEnum]";
        };
        readonly status: {
            readonly __type: "PostStatusEnum";
        };
        readonly title: {
            readonly __type: "String";
        };
    };
    readonly HierarchicalContentNodeToContentNodeAncestorsConnection: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly edges: {
            readonly __type: "[HierarchicalContentNodeToContentNodeAncestorsConnectionEdge]";
        };
        readonly nodes: {
            readonly __type: "[ContentNode]";
        };
        readonly pageInfo: {
            readonly __type: "WPPageInfo";
        };
    };
    readonly HierarchicalContentNodeToContentNodeAncestorsConnectionEdge: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly cursor: {
            readonly __type: "String";
        };
        readonly node: {
            readonly __type: "ContentNode";
        };
    };
    readonly HierarchicalContentNodeToContentNodeChildrenConnectionWhereArgs: {
        readonly contentTypes: {
            readonly __type: "[ContentTypeEnum]";
        };
        readonly dateQuery: {
            readonly __type: "DateQueryInput";
        };
        readonly hasPassword: {
            readonly __type: "Boolean";
        };
        readonly id: {
            readonly __type: "Int";
        };
        readonly in: {
            readonly __type: "[ID]";
        };
        readonly mimeType: {
            readonly __type: "MimeTypeEnum";
        };
        readonly name: {
            readonly __type: "String";
        };
        readonly nameIn: {
            readonly __type: "[String]";
        };
        readonly notIn: {
            readonly __type: "[ID]";
        };
        readonly orderby: {
            readonly __type: "[PostObjectsConnectionOrderbyInput]";
        };
        readonly parent: {
            readonly __type: "ID";
        };
        readonly parentIn: {
            readonly __type: "[ID]";
        };
        readonly parentNotIn: {
            readonly __type: "[ID]";
        };
        readonly password: {
            readonly __type: "String";
        };
        readonly search: {
            readonly __type: "String";
        };
        readonly stati: {
            readonly __type: "[PostStatusEnum]";
        };
        readonly status: {
            readonly __type: "PostStatusEnum";
        };
        readonly title: {
            readonly __type: "String";
        };
    };
    readonly HierarchicalContentNodeToContentNodeChildrenConnection: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly edges: {
            readonly __type: "[HierarchicalContentNodeToContentNodeChildrenConnectionEdge]";
        };
        readonly nodes: {
            readonly __type: "[ContentNode]";
        };
        readonly pageInfo: {
            readonly __type: "WPPageInfo";
        };
    };
    readonly HierarchicalContentNodeToContentNodeChildrenConnectionEdge: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly cursor: {
            readonly __type: "String";
        };
        readonly node: {
            readonly __type: "ContentNode";
        };
    };
    readonly HierarchicalContentNodeToParentContentNodeConnectionEdge: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly node: {
            readonly __type: "ContentNode";
        };
    };
    readonly MediaItemToCommentConnectionWhereArgs: {
        readonly authorEmail: {
            readonly __type: "String";
        };
        readonly authorIn: {
            readonly __type: "[ID]";
        };
        readonly authorNotIn: {
            readonly __type: "[ID]";
        };
        readonly authorUrl: {
            readonly __type: "String";
        };
        readonly commentIn: {
            readonly __type: "[ID]";
        };
        readonly commentNotIn: {
            readonly __type: "[ID]";
        };
        readonly commentType: {
            readonly __type: "String";
        };
        readonly commentTypeIn: {
            readonly __type: "[String]";
        };
        readonly commentTypeNotIn: {
            readonly __type: "String";
        };
        readonly contentAuthor: {
            readonly __type: "[ID]";
        };
        readonly contentAuthorIn: {
            readonly __type: "[ID]";
        };
        readonly contentAuthorNotIn: {
            readonly __type: "[ID]";
        };
        readonly contentId: {
            readonly __type: "ID";
        };
        readonly contentIdIn: {
            readonly __type: "[ID]";
        };
        readonly contentIdNotIn: {
            readonly __type: "[ID]";
        };
        readonly contentName: {
            readonly __type: "String";
        };
        readonly contentParent: {
            readonly __type: "Int";
        };
        readonly contentStatus: {
            readonly __type: "[PostStatusEnum]";
        };
        readonly contentType: {
            readonly __type: "[ContentTypeEnum]";
        };
        readonly includeUnapproved: {
            readonly __type: "[ID]";
        };
        readonly karma: {
            readonly __type: "Int";
        };
        readonly order: {
            readonly __type: "OrderEnum";
        };
        readonly orderby: {
            readonly __type: "CommentsConnectionOrderbyEnum";
        };
        readonly parent: {
            readonly __type: "Int";
        };
        readonly parentIn: {
            readonly __type: "[ID]";
        };
        readonly parentNotIn: {
            readonly __type: "[ID]";
        };
        readonly search: {
            readonly __type: "String";
        };
        readonly status: {
            readonly __type: "String";
        };
        readonly userId: {
            readonly __type: "ID";
        };
    };
    readonly MediaItemToCommentConnection: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly edges: {
            readonly __type: "[MediaItemToCommentConnectionEdge]";
        };
        readonly nodes: {
            readonly __type: "[Comment]";
        };
        readonly pageInfo: {
            readonly __type: "WPPageInfo";
        };
    };
    readonly MediaItemToCommentConnectionEdge: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly cursor: {
            readonly __type: "String";
        };
        readonly node: {
            readonly __type: "Comment";
        };
    };
    readonly ContentNodeToEnqueuedScriptConnection: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly edges: {
            readonly __type: "[ContentNodeToEnqueuedScriptConnectionEdge]";
        };
        readonly nodes: {
            readonly __type: "[EnqueuedScript]";
        };
        readonly pageInfo: {
            readonly __type: "WPPageInfo";
        };
    };
    readonly ContentNodeToEnqueuedScriptConnectionEdge: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly cursor: {
            readonly __type: "String";
        };
        readonly node: {
            readonly __type: "EnqueuedScript";
        };
    };
    readonly ContentNodeToEnqueuedStylesheetConnection: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly edges: {
            readonly __type: "[ContentNodeToEnqueuedStylesheetConnectionEdge]";
        };
        readonly nodes: {
            readonly __type: "[EnqueuedStylesheet]";
        };
        readonly pageInfo: {
            readonly __type: "WPPageInfo";
        };
    };
    readonly ContentNodeToEnqueuedStylesheetConnectionEdge: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly cursor: {
            readonly __type: "String";
        };
        readonly node: {
            readonly __type: "EnqueuedStylesheet";
        };
    };
    readonly ContentNodeToEditLastConnectionEdge: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly node: {
            readonly __type: "User";
        };
    };
    readonly MediaDetails: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly file: {
            readonly __type: "String";
        };
        readonly height: {
            readonly __type: "Int";
        };
        readonly meta: {
            readonly __type: "MediaItemMeta";
        };
        readonly sizes: {
            readonly __type: "[MediaSize]";
        };
        readonly width: {
            readonly __type: "Int";
        };
    };
    readonly MediaItemMeta: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly aperture: {
            readonly __type: "Float";
        };
        readonly camera: {
            readonly __type: "String";
        };
        readonly caption: {
            readonly __type: "String";
        };
        readonly copyright: {
            readonly __type: "String";
        };
        readonly createdTimestamp: {
            readonly __type: "Int";
        };
        readonly credit: {
            readonly __type: "String";
        };
        readonly focalLength: {
            readonly __type: "Float";
        };
        readonly iso: {
            readonly __type: "Int";
        };
        readonly keywords: {
            readonly __type: "[String]";
        };
        readonly orientation: {
            readonly __type: "String";
        };
        readonly shutterSpeed: {
            readonly __type: "Float";
        };
        readonly title: {
            readonly __type: "String";
        };
    };
    readonly MediaSize: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly file: {
            readonly __type: "String";
        };
        readonly fileSize: {
            readonly __type: "Int";
        };
        readonly height: {
            readonly __type: "String";
        };
        readonly mimeType: {
            readonly __type: "String";
        };
        readonly name: {
            readonly __type: "String";
        };
        readonly sourceUrl: {
            readonly __type: "String";
        };
        readonly width: {
            readonly __type: "String";
        };
    };
    readonly UserToPageConnectionWhereArgs: {
        readonly author: {
            readonly __type: "Int";
        };
        readonly authorIn: {
            readonly __type: "[ID]";
        };
        readonly authorName: {
            readonly __type: "String";
        };
        readonly authorNotIn: {
            readonly __type: "[ID]";
        };
        readonly dateQuery: {
            readonly __type: "DateQueryInput";
        };
        readonly hasPassword: {
            readonly __type: "Boolean";
        };
        readonly id: {
            readonly __type: "Int";
        };
        readonly in: {
            readonly __type: "[ID]";
        };
        readonly mimeType: {
            readonly __type: "MimeTypeEnum";
        };
        readonly name: {
            readonly __type: "String";
        };
        readonly nameIn: {
            readonly __type: "[String]";
        };
        readonly notIn: {
            readonly __type: "[ID]";
        };
        readonly orderby: {
            readonly __type: "[PostObjectsConnectionOrderbyInput]";
        };
        readonly parent: {
            readonly __type: "ID";
        };
        readonly parentIn: {
            readonly __type: "[ID]";
        };
        readonly parentNotIn: {
            readonly __type: "[ID]";
        };
        readonly password: {
            readonly __type: "String";
        };
        readonly search: {
            readonly __type: "String";
        };
        readonly stati: {
            readonly __type: "[PostStatusEnum]";
        };
        readonly status: {
            readonly __type: "PostStatusEnum";
        };
        readonly title: {
            readonly __type: "String";
        };
    };
    readonly UserToPageConnection: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly edges: {
            readonly __type: "[UserToPageConnectionEdge]";
        };
        readonly nodes: {
            readonly __type: "[Page]";
        };
        readonly pageInfo: {
            readonly __type: "WPPageInfo";
        };
    };
    readonly UserToPageConnectionEdge: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly cursor: {
            readonly __type: "String";
        };
        readonly node: {
            readonly __type: "Page";
        };
    };
    readonly Page: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly ancestors: {
            readonly __type: "HierarchicalContentNodeToContentNodeAncestorsConnection";
            readonly __args: {
                readonly first: "Int";
                readonly last: "Int";
                readonly after: "String";
                readonly before: "String";
                readonly where: "HierarchicalContentNodeToContentNodeAncestorsConnectionWhereArgs";
            };
        };
        readonly author: {
            readonly __type: "NodeWithAuthorToUserConnectionEdge";
        };
        readonly authorDatabaseId: {
            readonly __type: "Int";
        };
        readonly authorId: {
            readonly __type: "ID";
        };
        readonly children: {
            readonly __type: "HierarchicalContentNodeToContentNodeChildrenConnection";
            readonly __args: {
                readonly first: "Int";
                readonly last: "Int";
                readonly after: "String";
                readonly before: "String";
                readonly where: "HierarchicalContentNodeToContentNodeChildrenConnectionWhereArgs";
            };
        };
        readonly commentCount: {
            readonly __type: "Int";
        };
        readonly commentStatus: {
            readonly __type: "String";
        };
        readonly comments: {
            readonly __type: "PageToCommentConnection";
            readonly __args: {
                readonly first: "Int";
                readonly last: "Int";
                readonly after: "String";
                readonly before: "String";
                readonly where: "PageToCommentConnectionWhereArgs";
            };
        };
        readonly content: {
            readonly __type: "String";
            readonly __args: {
                readonly format: "PostObjectFieldFormatEnum";
            };
        };
        readonly contentType: {
            readonly __type: "ContentNodeToContentTypeConnectionEdge";
        };
        readonly databaseId: {
            readonly __type: "Int!";
        };
        readonly date: {
            readonly __type: "String";
        };
        readonly dateGmt: {
            readonly __type: "String";
        };
        readonly desiredSlug: {
            readonly __type: "String";
        };
        readonly editingLockedBy: {
            readonly __type: "ContentNodeToEditLockConnectionEdge";
        };
        readonly enclosure: {
            readonly __type: "String";
        };
        readonly enqueuedScripts: {
            readonly __type: "ContentNodeToEnqueuedScriptConnection";
            readonly __args: {
                readonly first: "Int";
                readonly last: "Int";
                readonly after: "String";
                readonly before: "String";
            };
        };
        readonly enqueuedStylesheets: {
            readonly __type: "ContentNodeToEnqueuedStylesheetConnection";
            readonly __args: {
                readonly first: "Int";
                readonly last: "Int";
                readonly after: "String";
                readonly before: "String";
            };
        };
        readonly featuredImage: {
            readonly __type: "NodeWithFeaturedImageToMediaItemConnectionEdge";
        };
        readonly featuredImageDatabaseId: {
            readonly __type: "Int";
        };
        readonly featuredImageId: {
            readonly __type: "ID";
        };
        readonly guid: {
            readonly __type: "String";
        };
        readonly id: {
            readonly __type: "ID!";
        };
        readonly isContentNode: {
            readonly __type: "Boolean!";
        };
        readonly isFrontPage: {
            readonly __type: "Boolean!";
        };
        readonly isPostsPage: {
            readonly __type: "Boolean!";
        };
        readonly isPreview: {
            readonly __type: "Boolean";
        };
        readonly isPrivacyPage: {
            readonly __type: "Boolean!";
        };
        readonly isRestricted: {
            readonly __type: "Boolean";
        };
        readonly isRevision: {
            readonly __type: "Boolean";
        };
        readonly isTermNode: {
            readonly __type: "Boolean!";
        };
        readonly lastEditedBy: {
            readonly __type: "ContentNodeToEditLastConnectionEdge";
        };
        readonly link: {
            readonly __type: "String";
        };
        readonly menuOrder: {
            readonly __type: "Int";
        };
        readonly modified: {
            readonly __type: "String";
        };
        readonly modifiedGmt: {
            readonly __type: "String";
        };
        readonly pageId: {
            readonly __type: "Int!";
        };
        readonly parent: {
            readonly __type: "HierarchicalContentNodeToParentContentNodeConnectionEdge";
        };
        readonly parentDatabaseId: {
            readonly __type: "Int";
        };
        readonly parentId: {
            readonly __type: "ID";
        };
        readonly preview: {
            readonly __type: "PageToPreviewConnectionEdge";
        };
        readonly previewRevisionDatabaseId: {
            readonly __type: "Int";
        };
        readonly previewRevisionId: {
            readonly __type: "ID";
        };
        readonly revisionOf: {
            readonly __type: "NodeWithRevisionsToContentNodeConnectionEdge";
        };
        readonly revisions: {
            readonly __type: "PageToRevisionConnection";
            readonly __args: {
                readonly first: "Int";
                readonly last: "Int";
                readonly after: "String";
                readonly before: "String";
                readonly where: "PageToRevisionConnectionWhereArgs";
            };
        };
        readonly slug: {
            readonly __type: "String";
        };
        readonly status: {
            readonly __type: "String";
        };
        readonly template: {
            readonly __type: "ContentTemplate";
        };
        readonly title: {
            readonly __type: "String";
            readonly __args: {
                readonly format: "PostObjectFieldFormatEnum";
            };
        };
        readonly uri: {
            readonly __type: "String";
        };
    };
    readonly NodeWithContentEditor: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly content: {
            readonly __type: "String";
            readonly __args: {
                readonly format: "PostObjectFieldFormatEnum";
            };
        };
    };
    readonly NodeWithFeaturedImage: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly contentType: {
            readonly __type: "ContentNodeToContentTypeConnectionEdge";
        };
        readonly databaseId: {
            readonly __type: "Int!";
        };
        readonly date: {
            readonly __type: "String";
        };
        readonly dateGmt: {
            readonly __type: "String";
        };
        readonly desiredSlug: {
            readonly __type: "String";
        };
        readonly editingLockedBy: {
            readonly __type: "ContentNodeToEditLockConnectionEdge";
        };
        readonly enclosure: {
            readonly __type: "String";
        };
        readonly enqueuedScripts: {
            readonly __type: "ContentNodeToEnqueuedScriptConnection";
            readonly __args: {
                readonly first: "Int";
                readonly last: "Int";
                readonly after: "String";
                readonly before: "String";
            };
        };
        readonly enqueuedStylesheets: {
            readonly __type: "ContentNodeToEnqueuedStylesheetConnection";
            readonly __args: {
                readonly first: "Int";
                readonly last: "Int";
                readonly after: "String";
                readonly before: "String";
            };
        };
        readonly featuredImage: {
            readonly __type: "NodeWithFeaturedImageToMediaItemConnectionEdge";
        };
        readonly featuredImageDatabaseId: {
            readonly __type: "Int";
        };
        readonly featuredImageId: {
            readonly __type: "ID";
        };
        readonly guid: {
            readonly __type: "String";
        };
        readonly id: {
            readonly __type: "ID!";
        };
        readonly isContentNode: {
            readonly __type: "Boolean!";
        };
        readonly isPreview: {
            readonly __type: "Boolean";
        };
        readonly isRestricted: {
            readonly __type: "Boolean";
        };
        readonly isTermNode: {
            readonly __type: "Boolean!";
        };
        readonly lastEditedBy: {
            readonly __type: "ContentNodeToEditLastConnectionEdge";
        };
        readonly link: {
            readonly __type: "String";
        };
        readonly modified: {
            readonly __type: "String";
        };
        readonly modifiedGmt: {
            readonly __type: "String";
        };
        readonly previewRevisionDatabaseId: {
            readonly __type: "Int";
        };
        readonly previewRevisionId: {
            readonly __type: "ID";
        };
        readonly slug: {
            readonly __type: "String";
        };
        readonly status: {
            readonly __type: "String";
        };
        readonly template: {
            readonly __type: "ContentTemplate";
        };
        readonly uri: {
            readonly __type: "String";
        };
    };
    readonly NodeWithFeaturedImageToMediaItemConnectionEdge: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly node: {
            readonly __type: "MediaItem";
        };
    };
    readonly NodeWithRevisions: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly isRevision: {
            readonly __type: "Boolean";
        };
        readonly revisionOf: {
            readonly __type: "NodeWithRevisionsToContentNodeConnectionEdge";
        };
    };
    readonly NodeWithRevisionsToContentNodeConnectionEdge: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly node: {
            readonly __type: "ContentNode";
        };
    };
    readonly NodeWithPageAttributes: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly menuOrder: {
            readonly __type: "Int";
        };
    };
    readonly PageToCommentConnectionWhereArgs: {
        readonly authorEmail: {
            readonly __type: "String";
        };
        readonly authorIn: {
            readonly __type: "[ID]";
        };
        readonly authorNotIn: {
            readonly __type: "[ID]";
        };
        readonly authorUrl: {
            readonly __type: "String";
        };
        readonly commentIn: {
            readonly __type: "[ID]";
        };
        readonly commentNotIn: {
            readonly __type: "[ID]";
        };
        readonly commentType: {
            readonly __type: "String";
        };
        readonly commentTypeIn: {
            readonly __type: "[String]";
        };
        readonly commentTypeNotIn: {
            readonly __type: "String";
        };
        readonly contentAuthor: {
            readonly __type: "[ID]";
        };
        readonly contentAuthorIn: {
            readonly __type: "[ID]";
        };
        readonly contentAuthorNotIn: {
            readonly __type: "[ID]";
        };
        readonly contentId: {
            readonly __type: "ID";
        };
        readonly contentIdIn: {
            readonly __type: "[ID]";
        };
        readonly contentIdNotIn: {
            readonly __type: "[ID]";
        };
        readonly contentName: {
            readonly __type: "String";
        };
        readonly contentParent: {
            readonly __type: "Int";
        };
        readonly contentStatus: {
            readonly __type: "[PostStatusEnum]";
        };
        readonly contentType: {
            readonly __type: "[ContentTypeEnum]";
        };
        readonly includeUnapproved: {
            readonly __type: "[ID]";
        };
        readonly karma: {
            readonly __type: "Int";
        };
        readonly order: {
            readonly __type: "OrderEnum";
        };
        readonly orderby: {
            readonly __type: "CommentsConnectionOrderbyEnum";
        };
        readonly parent: {
            readonly __type: "Int";
        };
        readonly parentIn: {
            readonly __type: "[ID]";
        };
        readonly parentNotIn: {
            readonly __type: "[ID]";
        };
        readonly search: {
            readonly __type: "String";
        };
        readonly status: {
            readonly __type: "String";
        };
        readonly userId: {
            readonly __type: "ID";
        };
    };
    readonly PageToCommentConnection: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly edges: {
            readonly __type: "[PageToCommentConnectionEdge]";
        };
        readonly nodes: {
            readonly __type: "[Comment]";
        };
        readonly pageInfo: {
            readonly __type: "WPPageInfo";
        };
    };
    readonly PageToCommentConnectionEdge: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly cursor: {
            readonly __type: "String";
        };
        readonly node: {
            readonly __type: "Comment";
        };
    };
    readonly PageToPreviewConnectionEdge: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly node: {
            readonly __type: "Page";
        };
    };
    readonly PageToRevisionConnectionWhereArgs: {
        readonly author: {
            readonly __type: "Int";
        };
        readonly authorIn: {
            readonly __type: "[ID]";
        };
        readonly authorName: {
            readonly __type: "String";
        };
        readonly authorNotIn: {
            readonly __type: "[ID]";
        };
        readonly dateQuery: {
            readonly __type: "DateQueryInput";
        };
        readonly hasPassword: {
            readonly __type: "Boolean";
        };
        readonly id: {
            readonly __type: "Int";
        };
        readonly in: {
            readonly __type: "[ID]";
        };
        readonly mimeType: {
            readonly __type: "MimeTypeEnum";
        };
        readonly name: {
            readonly __type: "String";
        };
        readonly nameIn: {
            readonly __type: "[String]";
        };
        readonly notIn: {
            readonly __type: "[ID]";
        };
        readonly orderby: {
            readonly __type: "[PostObjectsConnectionOrderbyInput]";
        };
        readonly parent: {
            readonly __type: "ID";
        };
        readonly parentIn: {
            readonly __type: "[ID]";
        };
        readonly parentNotIn: {
            readonly __type: "[ID]";
        };
        readonly password: {
            readonly __type: "String";
        };
        readonly search: {
            readonly __type: "String";
        };
        readonly stati: {
            readonly __type: "[PostStatusEnum]";
        };
        readonly status: {
            readonly __type: "PostStatusEnum";
        };
        readonly title: {
            readonly __type: "String";
        };
    };
    readonly PageToRevisionConnection: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly edges: {
            readonly __type: "[PageToRevisionConnectionEdge]";
        };
        readonly nodes: {
            readonly __type: "[Page]";
        };
        readonly pageInfo: {
            readonly __type: "WPPageInfo";
        };
    };
    readonly PageToRevisionConnectionEdge: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly cursor: {
            readonly __type: "String";
        };
        readonly node: {
            readonly __type: "Page";
        };
    };
    readonly UserToPostConnectionWhereArgs: {
        readonly author: {
            readonly __type: "Int";
        };
        readonly authorIn: {
            readonly __type: "[ID]";
        };
        readonly authorName: {
            readonly __type: "String";
        };
        readonly authorNotIn: {
            readonly __type: "[ID]";
        };
        readonly categoryId: {
            readonly __type: "Int";
        };
        readonly categoryIn: {
            readonly __type: "[ID]";
        };
        readonly categoryName: {
            readonly __type: "String";
        };
        readonly categoryNotIn: {
            readonly __type: "[ID]";
        };
        readonly dateQuery: {
            readonly __type: "DateQueryInput";
        };
        readonly hasPassword: {
            readonly __type: "Boolean";
        };
        readonly id: {
            readonly __type: "Int";
        };
        readonly in: {
            readonly __type: "[ID]";
        };
        readonly mimeType: {
            readonly __type: "MimeTypeEnum";
        };
        readonly name: {
            readonly __type: "String";
        };
        readonly nameIn: {
            readonly __type: "[String]";
        };
        readonly notIn: {
            readonly __type: "[ID]";
        };
        readonly orderby: {
            readonly __type: "[PostObjectsConnectionOrderbyInput]";
        };
        readonly parent: {
            readonly __type: "ID";
        };
        readonly parentIn: {
            readonly __type: "[ID]";
        };
        readonly parentNotIn: {
            readonly __type: "[ID]";
        };
        readonly password: {
            readonly __type: "String";
        };
        readonly search: {
            readonly __type: "String";
        };
        readonly stati: {
            readonly __type: "[PostStatusEnum]";
        };
        readonly status: {
            readonly __type: "PostStatusEnum";
        };
        readonly tag: {
            readonly __type: "String";
        };
        readonly tagId: {
            readonly __type: "String";
        };
        readonly tagIn: {
            readonly __type: "[ID]";
        };
        readonly tagNotIn: {
            readonly __type: "[ID]";
        };
        readonly tagSlugAnd: {
            readonly __type: "[String]";
        };
        readonly tagSlugIn: {
            readonly __type: "[String]";
        };
        readonly title: {
            readonly __type: "String";
        };
    };
    readonly UserToPostConnection: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly edges: {
            readonly __type: "[UserToPostConnectionEdge]";
        };
        readonly nodes: {
            readonly __type: "[Post]";
        };
        readonly pageInfo: {
            readonly __type: "WPPageInfo";
        };
    };
    readonly UserToPostConnectionEdge: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly cursor: {
            readonly __type: "String";
        };
        readonly node: {
            readonly __type: "Post";
        };
    };
    readonly Post: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly author: {
            readonly __type: "NodeWithAuthorToUserConnectionEdge";
        };
        readonly authorDatabaseId: {
            readonly __type: "Int";
        };
        readonly authorId: {
            readonly __type: "ID";
        };
        readonly categories: {
            readonly __type: "PostToCategoryConnection";
            readonly __args: {
                readonly first: "Int";
                readonly last: "Int";
                readonly after: "String";
                readonly before: "String";
                readonly where: "PostToCategoryConnectionWhereArgs";
            };
        };
        readonly commentCount: {
            readonly __type: "Int";
        };
        readonly commentStatus: {
            readonly __type: "String";
        };
        readonly comments: {
            readonly __type: "PostToCommentConnection";
            readonly __args: {
                readonly first: "Int";
                readonly last: "Int";
                readonly after: "String";
                readonly before: "String";
                readonly where: "PostToCommentConnectionWhereArgs";
            };
        };
        readonly content: {
            readonly __type: "String";
            readonly __args: {
                readonly format: "PostObjectFieldFormatEnum";
            };
        };
        readonly contentType: {
            readonly __type: "ContentNodeToContentTypeConnectionEdge";
        };
        readonly databaseId: {
            readonly __type: "Int!";
        };
        readonly date: {
            readonly __type: "String";
        };
        readonly dateGmt: {
            readonly __type: "String";
        };
        readonly desiredSlug: {
            readonly __type: "String";
        };
        readonly editingLockedBy: {
            readonly __type: "ContentNodeToEditLockConnectionEdge";
        };
        readonly enclosure: {
            readonly __type: "String";
        };
        readonly enqueuedScripts: {
            readonly __type: "ContentNodeToEnqueuedScriptConnection";
            readonly __args: {
                readonly first: "Int";
                readonly last: "Int";
                readonly after: "String";
                readonly before: "String";
            };
        };
        readonly enqueuedStylesheets: {
            readonly __type: "ContentNodeToEnqueuedStylesheetConnection";
            readonly __args: {
                readonly first: "Int";
                readonly last: "Int";
                readonly after: "String";
                readonly before: "String";
            };
        };
        readonly excerpt: {
            readonly __type: "String";
            readonly __args: {
                readonly format: "PostObjectFieldFormatEnum";
            };
        };
        readonly featuredImage: {
            readonly __type: "NodeWithFeaturedImageToMediaItemConnectionEdge";
        };
        readonly featuredImageDatabaseId: {
            readonly __type: "Int";
        };
        readonly featuredImageId: {
            readonly __type: "ID";
        };
        readonly guid: {
            readonly __type: "String";
        };
        readonly id: {
            readonly __type: "ID!";
        };
        readonly isContentNode: {
            readonly __type: "Boolean!";
        };
        readonly isPreview: {
            readonly __type: "Boolean";
        };
        readonly isRestricted: {
            readonly __type: "Boolean";
        };
        readonly isRevision: {
            readonly __type: "Boolean";
        };
        readonly isSticky: {
            readonly __type: "Boolean!";
        };
        readonly isTermNode: {
            readonly __type: "Boolean!";
        };
        readonly lastEditedBy: {
            readonly __type: "ContentNodeToEditLastConnectionEdge";
        };
        readonly link: {
            readonly __type: "String";
        };
        readonly modified: {
            readonly __type: "String";
        };
        readonly modifiedGmt: {
            readonly __type: "String";
        };
        readonly pingStatus: {
            readonly __type: "String";
        };
        readonly pinged: {
            readonly __type: "[String]";
        };
        readonly postFormats: {
            readonly __type: "PostToPostFormatConnection";
            readonly __args: {
                readonly first: "Int";
                readonly last: "Int";
                readonly after: "String";
                readonly before: "String";
                readonly where: "PostToPostFormatConnectionWhereArgs";
            };
        };
        readonly postId: {
            readonly __type: "Int!";
        };
        readonly preview: {
            readonly __type: "PostToPreviewConnectionEdge";
        };
        readonly previewRevisionDatabaseId: {
            readonly __type: "Int";
        };
        readonly previewRevisionId: {
            readonly __type: "ID";
        };
        readonly revisionOf: {
            readonly __type: "NodeWithRevisionsToContentNodeConnectionEdge";
        };
        readonly revisions: {
            readonly __type: "PostToRevisionConnection";
            readonly __args: {
                readonly first: "Int";
                readonly last: "Int";
                readonly after: "String";
                readonly before: "String";
                readonly where: "PostToRevisionConnectionWhereArgs";
            };
        };
        readonly slug: {
            readonly __type: "String";
        };
        readonly status: {
            readonly __type: "String";
        };
        readonly tags: {
            readonly __type: "PostToTagConnection";
            readonly __args: {
                readonly first: "Int";
                readonly last: "Int";
                readonly after: "String";
                readonly before: "String";
                readonly where: "PostToTagConnectionWhereArgs";
            };
        };
        readonly template: {
            readonly __type: "ContentTemplate";
        };
        readonly terms: {
            readonly __type: "PostToTermNodeConnection";
            readonly __args: {
                readonly first: "Int";
                readonly last: "Int";
                readonly after: "String";
                readonly before: "String";
                readonly where: "PostToTermNodeConnectionWhereArgs";
            };
        };
        readonly title: {
            readonly __type: "String";
            readonly __args: {
                readonly format: "PostObjectFieldFormatEnum";
            };
        };
        readonly toPing: {
            readonly __type: "[String]";
        };
        readonly uri: {
            readonly __type: "String";
        };
    };
    readonly NodeWithExcerpt: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly excerpt: {
            readonly __type: "String";
            readonly __args: {
                readonly format: "PostObjectFieldFormatEnum";
            };
        };
    };
    readonly NodeWithTrackbacks: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly pingStatus: {
            readonly __type: "String";
        };
        readonly pinged: {
            readonly __type: "[String]";
        };
        readonly toPing: {
            readonly __type: "[String]";
        };
    };
    readonly PostToCategoryConnectionWhereArgs: {
        readonly cacheDomain: {
            readonly __type: "String";
        };
        readonly childOf: {
            readonly __type: "Int";
        };
        readonly childless: {
            readonly __type: "Boolean";
        };
        readonly descriptionLike: {
            readonly __type: "String";
        };
        readonly exclude: {
            readonly __type: "[ID]";
        };
        readonly excludeTree: {
            readonly __type: "[ID]";
        };
        readonly hideEmpty: {
            readonly __type: "Boolean";
        };
        readonly hierarchical: {
            readonly __type: "Boolean";
        };
        readonly include: {
            readonly __type: "[ID]";
        };
        readonly name: {
            readonly __type: "[String]";
        };
        readonly nameLike: {
            readonly __type: "String";
        };
        readonly objectIds: {
            readonly __type: "[ID]";
        };
        readonly order: {
            readonly __type: "OrderEnum";
        };
        readonly orderby: {
            readonly __type: "TermObjectsConnectionOrderbyEnum";
        };
        readonly padCounts: {
            readonly __type: "Boolean";
        };
        readonly parent: {
            readonly __type: "Int";
        };
        readonly search: {
            readonly __type: "String";
        };
        readonly slug: {
            readonly __type: "[String]";
        };
        readonly termTaxonomId: {
            readonly __type: "[ID]";
        };
        readonly updateTermMetaCache: {
            readonly __type: "Boolean";
        };
    };
    readonly PostToCategoryConnection: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly edges: {
            readonly __type: "[PostToCategoryConnectionEdge]";
        };
        readonly nodes: {
            readonly __type: "[Category]";
        };
        readonly pageInfo: {
            readonly __type: "WPPageInfo";
        };
    };
    readonly PostToCategoryConnectionEdge: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly cursor: {
            readonly __type: "String";
        };
        readonly node: {
            readonly __type: "Category";
        };
    };
    readonly PostToCommentConnectionWhereArgs: {
        readonly authorEmail: {
            readonly __type: "String";
        };
        readonly authorIn: {
            readonly __type: "[ID]";
        };
        readonly authorNotIn: {
            readonly __type: "[ID]";
        };
        readonly authorUrl: {
            readonly __type: "String";
        };
        readonly commentIn: {
            readonly __type: "[ID]";
        };
        readonly commentNotIn: {
            readonly __type: "[ID]";
        };
        readonly commentType: {
            readonly __type: "String";
        };
        readonly commentTypeIn: {
            readonly __type: "[String]";
        };
        readonly commentTypeNotIn: {
            readonly __type: "String";
        };
        readonly contentAuthor: {
            readonly __type: "[ID]";
        };
        readonly contentAuthorIn: {
            readonly __type: "[ID]";
        };
        readonly contentAuthorNotIn: {
            readonly __type: "[ID]";
        };
        readonly contentId: {
            readonly __type: "ID";
        };
        readonly contentIdIn: {
            readonly __type: "[ID]";
        };
        readonly contentIdNotIn: {
            readonly __type: "[ID]";
        };
        readonly contentName: {
            readonly __type: "String";
        };
        readonly contentParent: {
            readonly __type: "Int";
        };
        readonly contentStatus: {
            readonly __type: "[PostStatusEnum]";
        };
        readonly contentType: {
            readonly __type: "[ContentTypeEnum]";
        };
        readonly includeUnapproved: {
            readonly __type: "[ID]";
        };
        readonly karma: {
            readonly __type: "Int";
        };
        readonly order: {
            readonly __type: "OrderEnum";
        };
        readonly orderby: {
            readonly __type: "CommentsConnectionOrderbyEnum";
        };
        readonly parent: {
            readonly __type: "Int";
        };
        readonly parentIn: {
            readonly __type: "[ID]";
        };
        readonly parentNotIn: {
            readonly __type: "[ID]";
        };
        readonly search: {
            readonly __type: "String";
        };
        readonly status: {
            readonly __type: "String";
        };
        readonly userId: {
            readonly __type: "ID";
        };
    };
    readonly PostToCommentConnection: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly edges: {
            readonly __type: "[PostToCommentConnectionEdge]";
        };
        readonly nodes: {
            readonly __type: "[Comment]";
        };
        readonly pageInfo: {
            readonly __type: "WPPageInfo";
        };
    };
    readonly PostToCommentConnectionEdge: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly cursor: {
            readonly __type: "String";
        };
        readonly node: {
            readonly __type: "Comment";
        };
    };
    readonly PostToPostFormatConnectionWhereArgs: {
        readonly cacheDomain: {
            readonly __type: "String";
        };
        readonly childOf: {
            readonly __type: "Int";
        };
        readonly childless: {
            readonly __type: "Boolean";
        };
        readonly descriptionLike: {
            readonly __type: "String";
        };
        readonly exclude: {
            readonly __type: "[ID]";
        };
        readonly excludeTree: {
            readonly __type: "[ID]";
        };
        readonly hideEmpty: {
            readonly __type: "Boolean";
        };
        readonly hierarchical: {
            readonly __type: "Boolean";
        };
        readonly include: {
            readonly __type: "[ID]";
        };
        readonly name: {
            readonly __type: "[String]";
        };
        readonly nameLike: {
            readonly __type: "String";
        };
        readonly objectIds: {
            readonly __type: "[ID]";
        };
        readonly order: {
            readonly __type: "OrderEnum";
        };
        readonly orderby: {
            readonly __type: "TermObjectsConnectionOrderbyEnum";
        };
        readonly padCounts: {
            readonly __type: "Boolean";
        };
        readonly parent: {
            readonly __type: "Int";
        };
        readonly search: {
            readonly __type: "String";
        };
        readonly slug: {
            readonly __type: "[String]";
        };
        readonly termTaxonomId: {
            readonly __type: "[ID]";
        };
        readonly updateTermMetaCache: {
            readonly __type: "Boolean";
        };
    };
    readonly PostToPostFormatConnection: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly edges: {
            readonly __type: "[PostToPostFormatConnectionEdge]";
        };
        readonly nodes: {
            readonly __type: "[PostFormat]";
        };
        readonly pageInfo: {
            readonly __type: "WPPageInfo";
        };
    };
    readonly PostToPostFormatConnectionEdge: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly cursor: {
            readonly __type: "String";
        };
        readonly node: {
            readonly __type: "PostFormat";
        };
    };
    readonly PostFormat: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly contentNodes: {
            readonly __type: "PostFormatToContentNodeConnection";
            readonly __args: {
                readonly first: "Int";
                readonly last: "Int";
                readonly after: "String";
                readonly before: "String";
                readonly where: "PostFormatToContentNodeConnectionWhereArgs";
            };
        };
        readonly count: {
            readonly __type: "Int";
        };
        readonly databaseId: {
            readonly __type: "Int!";
        };
        readonly description: {
            readonly __type: "String";
        };
        readonly enqueuedScripts: {
            readonly __type: "TermNodeToEnqueuedScriptConnection";
            readonly __args: {
                readonly first: "Int";
                readonly last: "Int";
                readonly after: "String";
                readonly before: "String";
            };
        };
        readonly enqueuedStylesheets: {
            readonly __type: "TermNodeToEnqueuedStylesheetConnection";
            readonly __args: {
                readonly first: "Int";
                readonly last: "Int";
                readonly after: "String";
                readonly before: "String";
            };
        };
        readonly id: {
            readonly __type: "ID!";
        };
        readonly isContentNode: {
            readonly __type: "Boolean!";
        };
        readonly isRestricted: {
            readonly __type: "Boolean";
        };
        readonly isTermNode: {
            readonly __type: "Boolean!";
        };
        readonly link: {
            readonly __type: "String";
        };
        readonly name: {
            readonly __type: "String";
        };
        readonly postFormatId: {
            readonly __type: "Int";
        };
        readonly posts: {
            readonly __type: "PostFormatToPostConnection";
            readonly __args: {
                readonly first: "Int";
                readonly last: "Int";
                readonly after: "String";
                readonly before: "String";
                readonly where: "PostFormatToPostConnectionWhereArgs";
            };
        };
        readonly slug: {
            readonly __type: "String";
        };
        readonly taxonomy: {
            readonly __type: "PostFormatToTaxonomyConnectionEdge";
        };
        readonly termGroupId: {
            readonly __type: "Int";
        };
        readonly termTaxonomyId: {
            readonly __type: "Int";
        };
        readonly uri: {
            readonly __type: "String";
        };
    };
    readonly PostFormatToContentNodeConnectionWhereArgs: {
        readonly contentTypes: {
            readonly __type: "[ContentTypesOfPostFormatEnum]";
        };
        readonly dateQuery: {
            readonly __type: "DateQueryInput";
        };
        readonly hasPassword: {
            readonly __type: "Boolean";
        };
        readonly id: {
            readonly __type: "Int";
        };
        readonly in: {
            readonly __type: "[ID]";
        };
        readonly mimeType: {
            readonly __type: "MimeTypeEnum";
        };
        readonly name: {
            readonly __type: "String";
        };
        readonly nameIn: {
            readonly __type: "[String]";
        };
        readonly notIn: {
            readonly __type: "[ID]";
        };
        readonly orderby: {
            readonly __type: "[PostObjectsConnectionOrderbyInput]";
        };
        readonly parent: {
            readonly __type: "ID";
        };
        readonly parentIn: {
            readonly __type: "[ID]";
        };
        readonly parentNotIn: {
            readonly __type: "[ID]";
        };
        readonly password: {
            readonly __type: "String";
        };
        readonly search: {
            readonly __type: "String";
        };
        readonly stati: {
            readonly __type: "[PostStatusEnum]";
        };
        readonly status: {
            readonly __type: "PostStatusEnum";
        };
        readonly title: {
            readonly __type: "String";
        };
    };
    readonly PostFormatToContentNodeConnection: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly edges: {
            readonly __type: "[PostFormatToContentNodeConnectionEdge]";
        };
        readonly nodes: {
            readonly __type: "[ContentNode]";
        };
        readonly pageInfo: {
            readonly __type: "WPPageInfo";
        };
    };
    readonly PostFormatToContentNodeConnectionEdge: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly cursor: {
            readonly __type: "String";
        };
        readonly node: {
            readonly __type: "ContentNode";
        };
    };
    readonly PostFormatToPostConnectionWhereArgs: {
        readonly author: {
            readonly __type: "Int";
        };
        readonly authorIn: {
            readonly __type: "[ID]";
        };
        readonly authorName: {
            readonly __type: "String";
        };
        readonly authorNotIn: {
            readonly __type: "[ID]";
        };
        readonly categoryId: {
            readonly __type: "Int";
        };
        readonly categoryIn: {
            readonly __type: "[ID]";
        };
        readonly categoryName: {
            readonly __type: "String";
        };
        readonly categoryNotIn: {
            readonly __type: "[ID]";
        };
        readonly dateQuery: {
            readonly __type: "DateQueryInput";
        };
        readonly hasPassword: {
            readonly __type: "Boolean";
        };
        readonly id: {
            readonly __type: "Int";
        };
        readonly in: {
            readonly __type: "[ID]";
        };
        readonly mimeType: {
            readonly __type: "MimeTypeEnum";
        };
        readonly name: {
            readonly __type: "String";
        };
        readonly nameIn: {
            readonly __type: "[String]";
        };
        readonly notIn: {
            readonly __type: "[ID]";
        };
        readonly orderby: {
            readonly __type: "[PostObjectsConnectionOrderbyInput]";
        };
        readonly parent: {
            readonly __type: "ID";
        };
        readonly parentIn: {
            readonly __type: "[ID]";
        };
        readonly parentNotIn: {
            readonly __type: "[ID]";
        };
        readonly password: {
            readonly __type: "String";
        };
        readonly search: {
            readonly __type: "String";
        };
        readonly stati: {
            readonly __type: "[PostStatusEnum]";
        };
        readonly status: {
            readonly __type: "PostStatusEnum";
        };
        readonly tag: {
            readonly __type: "String";
        };
        readonly tagId: {
            readonly __type: "String";
        };
        readonly tagIn: {
            readonly __type: "[ID]";
        };
        readonly tagNotIn: {
            readonly __type: "[ID]";
        };
        readonly tagSlugAnd: {
            readonly __type: "[String]";
        };
        readonly tagSlugIn: {
            readonly __type: "[String]";
        };
        readonly title: {
            readonly __type: "String";
        };
    };
    readonly PostFormatToPostConnection: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly edges: {
            readonly __type: "[PostFormatToPostConnectionEdge]";
        };
        readonly nodes: {
            readonly __type: "[Post]";
        };
        readonly pageInfo: {
            readonly __type: "WPPageInfo";
        };
    };
    readonly PostFormatToPostConnectionEdge: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly cursor: {
            readonly __type: "String";
        };
        readonly node: {
            readonly __type: "Post";
        };
    };
    readonly PostFormatToTaxonomyConnectionEdge: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly node: {
            readonly __type: "Taxonomy";
        };
    };
    readonly PostToPreviewConnectionEdge: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly node: {
            readonly __type: "Post";
        };
    };
    readonly PostToRevisionConnectionWhereArgs: {
        readonly author: {
            readonly __type: "Int";
        };
        readonly authorIn: {
            readonly __type: "[ID]";
        };
        readonly authorName: {
            readonly __type: "String";
        };
        readonly authorNotIn: {
            readonly __type: "[ID]";
        };
        readonly categoryId: {
            readonly __type: "Int";
        };
        readonly categoryIn: {
            readonly __type: "[ID]";
        };
        readonly categoryName: {
            readonly __type: "String";
        };
        readonly categoryNotIn: {
            readonly __type: "[ID]";
        };
        readonly dateQuery: {
            readonly __type: "DateQueryInput";
        };
        readonly hasPassword: {
            readonly __type: "Boolean";
        };
        readonly id: {
            readonly __type: "Int";
        };
        readonly in: {
            readonly __type: "[ID]";
        };
        readonly mimeType: {
            readonly __type: "MimeTypeEnum";
        };
        readonly name: {
            readonly __type: "String";
        };
        readonly nameIn: {
            readonly __type: "[String]";
        };
        readonly notIn: {
            readonly __type: "[ID]";
        };
        readonly orderby: {
            readonly __type: "[PostObjectsConnectionOrderbyInput]";
        };
        readonly parent: {
            readonly __type: "ID";
        };
        readonly parentIn: {
            readonly __type: "[ID]";
        };
        readonly parentNotIn: {
            readonly __type: "[ID]";
        };
        readonly password: {
            readonly __type: "String";
        };
        readonly search: {
            readonly __type: "String";
        };
        readonly stati: {
            readonly __type: "[PostStatusEnum]";
        };
        readonly status: {
            readonly __type: "PostStatusEnum";
        };
        readonly tag: {
            readonly __type: "String";
        };
        readonly tagId: {
            readonly __type: "String";
        };
        readonly tagIn: {
            readonly __type: "[ID]";
        };
        readonly tagNotIn: {
            readonly __type: "[ID]";
        };
        readonly tagSlugAnd: {
            readonly __type: "[String]";
        };
        readonly tagSlugIn: {
            readonly __type: "[String]";
        };
        readonly title: {
            readonly __type: "String";
        };
    };
    readonly PostToRevisionConnection: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly edges: {
            readonly __type: "[PostToRevisionConnectionEdge]";
        };
        readonly nodes: {
            readonly __type: "[Post]";
        };
        readonly pageInfo: {
            readonly __type: "WPPageInfo";
        };
    };
    readonly PostToRevisionConnectionEdge: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly cursor: {
            readonly __type: "String";
        };
        readonly node: {
            readonly __type: "Post";
        };
    };
    readonly PostToTagConnectionWhereArgs: {
        readonly cacheDomain: {
            readonly __type: "String";
        };
        readonly childOf: {
            readonly __type: "Int";
        };
        readonly childless: {
            readonly __type: "Boolean";
        };
        readonly descriptionLike: {
            readonly __type: "String";
        };
        readonly exclude: {
            readonly __type: "[ID]";
        };
        readonly excludeTree: {
            readonly __type: "[ID]";
        };
        readonly hideEmpty: {
            readonly __type: "Boolean";
        };
        readonly hierarchical: {
            readonly __type: "Boolean";
        };
        readonly include: {
            readonly __type: "[ID]";
        };
        readonly name: {
            readonly __type: "[String]";
        };
        readonly nameLike: {
            readonly __type: "String";
        };
        readonly objectIds: {
            readonly __type: "[ID]";
        };
        readonly order: {
            readonly __type: "OrderEnum";
        };
        readonly orderby: {
            readonly __type: "TermObjectsConnectionOrderbyEnum";
        };
        readonly padCounts: {
            readonly __type: "Boolean";
        };
        readonly parent: {
            readonly __type: "Int";
        };
        readonly search: {
            readonly __type: "String";
        };
        readonly slug: {
            readonly __type: "[String]";
        };
        readonly termTaxonomId: {
            readonly __type: "[ID]";
        };
        readonly updateTermMetaCache: {
            readonly __type: "Boolean";
        };
    };
    readonly PostToTagConnection: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly edges: {
            readonly __type: "[PostToTagConnectionEdge]";
        };
        readonly nodes: {
            readonly __type: "[Tag]";
        };
        readonly pageInfo: {
            readonly __type: "WPPageInfo";
        };
    };
    readonly PostToTagConnectionEdge: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly cursor: {
            readonly __type: "String";
        };
        readonly node: {
            readonly __type: "Tag";
        };
    };
    readonly Tag: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly contentNodes: {
            readonly __type: "TagToContentNodeConnection";
            readonly __args: {
                readonly first: "Int";
                readonly last: "Int";
                readonly after: "String";
                readonly before: "String";
                readonly where: "TagToContentNodeConnectionWhereArgs";
            };
        };
        readonly count: {
            readonly __type: "Int";
        };
        readonly databaseId: {
            readonly __type: "Int!";
        };
        readonly description: {
            readonly __type: "String";
        };
        readonly enqueuedScripts: {
            readonly __type: "TermNodeToEnqueuedScriptConnection";
            readonly __args: {
                readonly first: "Int";
                readonly last: "Int";
                readonly after: "String";
                readonly before: "String";
            };
        };
        readonly enqueuedStylesheets: {
            readonly __type: "TermNodeToEnqueuedStylesheetConnection";
            readonly __args: {
                readonly first: "Int";
                readonly last: "Int";
                readonly after: "String";
                readonly before: "String";
            };
        };
        readonly id: {
            readonly __type: "ID!";
        };
        readonly isContentNode: {
            readonly __type: "Boolean!";
        };
        readonly isRestricted: {
            readonly __type: "Boolean";
        };
        readonly isTermNode: {
            readonly __type: "Boolean!";
        };
        readonly link: {
            readonly __type: "String";
        };
        readonly name: {
            readonly __type: "String";
        };
        readonly posts: {
            readonly __type: "TagToPostConnection";
            readonly __args: {
                readonly first: "Int";
                readonly last: "Int";
                readonly after: "String";
                readonly before: "String";
                readonly where: "TagToPostConnectionWhereArgs";
            };
        };
        readonly slug: {
            readonly __type: "String";
        };
        readonly tagId: {
            readonly __type: "Int";
        };
        readonly taxonomy: {
            readonly __type: "TagToTaxonomyConnectionEdge";
        };
        readonly termGroupId: {
            readonly __type: "Int";
        };
        readonly termTaxonomyId: {
            readonly __type: "Int";
        };
        readonly uri: {
            readonly __type: "String";
        };
    };
    readonly TagToContentNodeConnectionWhereArgs: {
        readonly contentTypes: {
            readonly __type: "[ContentTypesOfTagEnum]";
        };
        readonly dateQuery: {
            readonly __type: "DateQueryInput";
        };
        readonly hasPassword: {
            readonly __type: "Boolean";
        };
        readonly id: {
            readonly __type: "Int";
        };
        readonly in: {
            readonly __type: "[ID]";
        };
        readonly mimeType: {
            readonly __type: "MimeTypeEnum";
        };
        readonly name: {
            readonly __type: "String";
        };
        readonly nameIn: {
            readonly __type: "[String]";
        };
        readonly notIn: {
            readonly __type: "[ID]";
        };
        readonly orderby: {
            readonly __type: "[PostObjectsConnectionOrderbyInput]";
        };
        readonly parent: {
            readonly __type: "ID";
        };
        readonly parentIn: {
            readonly __type: "[ID]";
        };
        readonly parentNotIn: {
            readonly __type: "[ID]";
        };
        readonly password: {
            readonly __type: "String";
        };
        readonly search: {
            readonly __type: "String";
        };
        readonly stati: {
            readonly __type: "[PostStatusEnum]";
        };
        readonly status: {
            readonly __type: "PostStatusEnum";
        };
        readonly title: {
            readonly __type: "String";
        };
    };
    readonly TagToContentNodeConnection: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly edges: {
            readonly __type: "[TagToContentNodeConnectionEdge]";
        };
        readonly nodes: {
            readonly __type: "[ContentNode]";
        };
        readonly pageInfo: {
            readonly __type: "WPPageInfo";
        };
    };
    readonly TagToContentNodeConnectionEdge: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly cursor: {
            readonly __type: "String";
        };
        readonly node: {
            readonly __type: "ContentNode";
        };
    };
    readonly TagToPostConnectionWhereArgs: {
        readonly author: {
            readonly __type: "Int";
        };
        readonly authorIn: {
            readonly __type: "[ID]";
        };
        readonly authorName: {
            readonly __type: "String";
        };
        readonly authorNotIn: {
            readonly __type: "[ID]";
        };
        readonly categoryId: {
            readonly __type: "Int";
        };
        readonly categoryIn: {
            readonly __type: "[ID]";
        };
        readonly categoryName: {
            readonly __type: "String";
        };
        readonly categoryNotIn: {
            readonly __type: "[ID]";
        };
        readonly dateQuery: {
            readonly __type: "DateQueryInput";
        };
        readonly hasPassword: {
            readonly __type: "Boolean";
        };
        readonly id: {
            readonly __type: "Int";
        };
        readonly in: {
            readonly __type: "[ID]";
        };
        readonly mimeType: {
            readonly __type: "MimeTypeEnum";
        };
        readonly name: {
            readonly __type: "String";
        };
        readonly nameIn: {
            readonly __type: "[String]";
        };
        readonly notIn: {
            readonly __type: "[ID]";
        };
        readonly orderby: {
            readonly __type: "[PostObjectsConnectionOrderbyInput]";
        };
        readonly parent: {
            readonly __type: "ID";
        };
        readonly parentIn: {
            readonly __type: "[ID]";
        };
        readonly parentNotIn: {
            readonly __type: "[ID]";
        };
        readonly password: {
            readonly __type: "String";
        };
        readonly search: {
            readonly __type: "String";
        };
        readonly stati: {
            readonly __type: "[PostStatusEnum]";
        };
        readonly status: {
            readonly __type: "PostStatusEnum";
        };
        readonly tag: {
            readonly __type: "String";
        };
        readonly tagId: {
            readonly __type: "String";
        };
        readonly tagIn: {
            readonly __type: "[ID]";
        };
        readonly tagNotIn: {
            readonly __type: "[ID]";
        };
        readonly tagSlugAnd: {
            readonly __type: "[String]";
        };
        readonly tagSlugIn: {
            readonly __type: "[String]";
        };
        readonly title: {
            readonly __type: "String";
        };
    };
    readonly TagToPostConnection: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly edges: {
            readonly __type: "[TagToPostConnectionEdge]";
        };
        readonly nodes: {
            readonly __type: "[Post]";
        };
        readonly pageInfo: {
            readonly __type: "WPPageInfo";
        };
    };
    readonly TagToPostConnectionEdge: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly cursor: {
            readonly __type: "String";
        };
        readonly node: {
            readonly __type: "Post";
        };
    };
    readonly TagToTaxonomyConnectionEdge: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly node: {
            readonly __type: "Taxonomy";
        };
    };
    readonly PostToTermNodeConnectionWhereArgs: {
        readonly cacheDomain: {
            readonly __type: "String";
        };
        readonly childOf: {
            readonly __type: "Int";
        };
        readonly childless: {
            readonly __type: "Boolean";
        };
        readonly descriptionLike: {
            readonly __type: "String";
        };
        readonly exclude: {
            readonly __type: "[ID]";
        };
        readonly excludeTree: {
            readonly __type: "[ID]";
        };
        readonly hideEmpty: {
            readonly __type: "Boolean";
        };
        readonly hierarchical: {
            readonly __type: "Boolean";
        };
        readonly include: {
            readonly __type: "[ID]";
        };
        readonly name: {
            readonly __type: "[String]";
        };
        readonly nameLike: {
            readonly __type: "String";
        };
        readonly objectIds: {
            readonly __type: "[ID]";
        };
        readonly order: {
            readonly __type: "OrderEnum";
        };
        readonly orderby: {
            readonly __type: "TermObjectsConnectionOrderbyEnum";
        };
        readonly padCounts: {
            readonly __type: "Boolean";
        };
        readonly parent: {
            readonly __type: "Int";
        };
        readonly search: {
            readonly __type: "String";
        };
        readonly slug: {
            readonly __type: "[String]";
        };
        readonly taxonomies: {
            readonly __type: "[TaxonomyEnum]";
        };
        readonly termTaxonomId: {
            readonly __type: "[ID]";
        };
        readonly updateTermMetaCache: {
            readonly __type: "Boolean";
        };
    };
    readonly PostToTermNodeConnection: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly edges: {
            readonly __type: "[PostToTermNodeConnectionEdge]";
        };
        readonly nodes: {
            readonly __type: "[TermNode]";
        };
        readonly pageInfo: {
            readonly __type: "WPPageInfo";
        };
    };
    readonly PostToTermNodeConnectionEdge: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly cursor: {
            readonly __type: "String";
        };
        readonly node: {
            readonly __type: "TermNode";
        };
    };
    readonly UserToContentRevisionUnionConnectionWhereArgs: {
        readonly contentTypes: {
            readonly __type: "[ContentTypeEnum]";
        };
        readonly dateQuery: {
            readonly __type: "DateQueryInput";
        };
        readonly hasPassword: {
            readonly __type: "Boolean";
        };
        readonly id: {
            readonly __type: "Int";
        };
        readonly in: {
            readonly __type: "[ID]";
        };
        readonly mimeType: {
            readonly __type: "MimeTypeEnum";
        };
        readonly name: {
            readonly __type: "String";
        };
        readonly nameIn: {
            readonly __type: "[String]";
        };
        readonly notIn: {
            readonly __type: "[ID]";
        };
        readonly orderby: {
            readonly __type: "[PostObjectsConnectionOrderbyInput]";
        };
        readonly parent: {
            readonly __type: "ID";
        };
        readonly parentIn: {
            readonly __type: "[ID]";
        };
        readonly parentNotIn: {
            readonly __type: "[ID]";
        };
        readonly password: {
            readonly __type: "String";
        };
        readonly search: {
            readonly __type: "String";
        };
        readonly stati: {
            readonly __type: "[PostStatusEnum]";
        };
        readonly status: {
            readonly __type: "PostStatusEnum";
        };
        readonly title: {
            readonly __type: "String";
        };
    };
    readonly UserToContentRevisionUnionConnection: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly edges: {
            readonly __type: "[UserToContentRevisionUnionConnectionEdge]";
        };
        readonly nodes: {
            readonly __type: "[ContentRevisionUnion]";
        };
        readonly pageInfo: {
            readonly __type: "WPPageInfo";
        };
    };
    readonly UserToContentRevisionUnionConnectionEdge: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly cursor: {
            readonly __type: "String";
        };
        readonly node: {
            readonly __type: "ContentRevisionUnion";
        };
    };
    readonly UserToUserRoleConnection: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly edges: {
            readonly __type: "[UserToUserRoleConnectionEdge]";
        };
        readonly nodes: {
            readonly __type: "[UserRole]";
        };
        readonly pageInfo: {
            readonly __type: "WPPageInfo";
        };
    };
    readonly UserToUserRoleConnectionEdge: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly cursor: {
            readonly __type: "String";
        };
        readonly node: {
            readonly __type: "UserRole";
        };
    };
    readonly UserRole: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly capabilities: {
            readonly __type: "[String]";
        };
        readonly displayName: {
            readonly __type: "String";
        };
        readonly id: {
            readonly __type: "ID!";
        };
        readonly isRestricted: {
            readonly __type: "Boolean";
        };
        readonly name: {
            readonly __type: "String";
        };
    };
    readonly CategoryToParentCategoryConnectionEdge: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly node: {
            readonly __type: "Category";
        };
    };
    readonly CategoryToPostConnectionWhereArgs: {
        readonly author: {
            readonly __type: "Int";
        };
        readonly authorIn: {
            readonly __type: "[ID]";
        };
        readonly authorName: {
            readonly __type: "String";
        };
        readonly authorNotIn: {
            readonly __type: "[ID]";
        };
        readonly categoryId: {
            readonly __type: "Int";
        };
        readonly categoryIn: {
            readonly __type: "[ID]";
        };
        readonly categoryName: {
            readonly __type: "String";
        };
        readonly categoryNotIn: {
            readonly __type: "[ID]";
        };
        readonly dateQuery: {
            readonly __type: "DateQueryInput";
        };
        readonly hasPassword: {
            readonly __type: "Boolean";
        };
        readonly id: {
            readonly __type: "Int";
        };
        readonly in: {
            readonly __type: "[ID]";
        };
        readonly mimeType: {
            readonly __type: "MimeTypeEnum";
        };
        readonly name: {
            readonly __type: "String";
        };
        readonly nameIn: {
            readonly __type: "[String]";
        };
        readonly notIn: {
            readonly __type: "[ID]";
        };
        readonly orderby: {
            readonly __type: "[PostObjectsConnectionOrderbyInput]";
        };
        readonly parent: {
            readonly __type: "ID";
        };
        readonly parentIn: {
            readonly __type: "[ID]";
        };
        readonly parentNotIn: {
            readonly __type: "[ID]";
        };
        readonly password: {
            readonly __type: "String";
        };
        readonly search: {
            readonly __type: "String";
        };
        readonly stati: {
            readonly __type: "[PostStatusEnum]";
        };
        readonly status: {
            readonly __type: "PostStatusEnum";
        };
        readonly tag: {
            readonly __type: "String";
        };
        readonly tagId: {
            readonly __type: "String";
        };
        readonly tagIn: {
            readonly __type: "[ID]";
        };
        readonly tagNotIn: {
            readonly __type: "[ID]";
        };
        readonly tagSlugAnd: {
            readonly __type: "[String]";
        };
        readonly tagSlugIn: {
            readonly __type: "[String]";
        };
        readonly title: {
            readonly __type: "String";
        };
    };
    readonly CategoryToPostConnection: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly edges: {
            readonly __type: "[CategoryToPostConnectionEdge]";
        };
        readonly nodes: {
            readonly __type: "[Post]";
        };
        readonly pageInfo: {
            readonly __type: "WPPageInfo";
        };
    };
    readonly CategoryToPostConnectionEdge: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly cursor: {
            readonly __type: "String";
        };
        readonly node: {
            readonly __type: "Post";
        };
    };
    readonly CategoryToTaxonomyConnectionEdge: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly node: {
            readonly __type: "Taxonomy";
        };
    };
    readonly RootQueryToCommentConnectionWhereArgs: {
        readonly authorEmail: {
            readonly __type: "String";
        };
        readonly authorIn: {
            readonly __type: "[ID]";
        };
        readonly authorNotIn: {
            readonly __type: "[ID]";
        };
        readonly authorUrl: {
            readonly __type: "String";
        };
        readonly commentIn: {
            readonly __type: "[ID]";
        };
        readonly commentNotIn: {
            readonly __type: "[ID]";
        };
        readonly commentType: {
            readonly __type: "String";
        };
        readonly commentTypeIn: {
            readonly __type: "[String]";
        };
        readonly commentTypeNotIn: {
            readonly __type: "String";
        };
        readonly contentAuthor: {
            readonly __type: "[ID]";
        };
        readonly contentAuthorIn: {
            readonly __type: "[ID]";
        };
        readonly contentAuthorNotIn: {
            readonly __type: "[ID]";
        };
        readonly contentId: {
            readonly __type: "ID";
        };
        readonly contentIdIn: {
            readonly __type: "[ID]";
        };
        readonly contentIdNotIn: {
            readonly __type: "[ID]";
        };
        readonly contentName: {
            readonly __type: "String";
        };
        readonly contentParent: {
            readonly __type: "Int";
        };
        readonly contentStatus: {
            readonly __type: "[PostStatusEnum]";
        };
        readonly contentType: {
            readonly __type: "[ContentTypeEnum]";
        };
        readonly includeUnapproved: {
            readonly __type: "[ID]";
        };
        readonly karma: {
            readonly __type: "Int";
        };
        readonly order: {
            readonly __type: "OrderEnum";
        };
        readonly orderby: {
            readonly __type: "CommentsConnectionOrderbyEnum";
        };
        readonly parent: {
            readonly __type: "Int";
        };
        readonly parentIn: {
            readonly __type: "[ID]";
        };
        readonly parentNotIn: {
            readonly __type: "[ID]";
        };
        readonly search: {
            readonly __type: "String";
        };
        readonly status: {
            readonly __type: "String";
        };
        readonly userId: {
            readonly __type: "ID";
        };
    };
    readonly RootQueryToCommentConnection: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly edges: {
            readonly __type: "[RootQueryToCommentConnectionEdge]";
        };
        readonly nodes: {
            readonly __type: "[Comment]";
        };
        readonly pageInfo: {
            readonly __type: "WPPageInfo";
        };
    };
    readonly RootQueryToCommentConnectionEdge: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly cursor: {
            readonly __type: "String";
        };
        readonly node: {
            readonly __type: "Comment";
        };
    };
    readonly RootQueryToContentNodeConnectionWhereArgs: {
        readonly contentTypes: {
            readonly __type: "[ContentTypeEnum]";
        };
        readonly dateQuery: {
            readonly __type: "DateQueryInput";
        };
        readonly hasPassword: {
            readonly __type: "Boolean";
        };
        readonly id: {
            readonly __type: "Int";
        };
        readonly in: {
            readonly __type: "[ID]";
        };
        readonly mimeType: {
            readonly __type: "MimeTypeEnum";
        };
        readonly name: {
            readonly __type: "String";
        };
        readonly nameIn: {
            readonly __type: "[String]";
        };
        readonly notIn: {
            readonly __type: "[ID]";
        };
        readonly orderby: {
            readonly __type: "[PostObjectsConnectionOrderbyInput]";
        };
        readonly parent: {
            readonly __type: "ID";
        };
        readonly parentIn: {
            readonly __type: "[ID]";
        };
        readonly parentNotIn: {
            readonly __type: "[ID]";
        };
        readonly password: {
            readonly __type: "String";
        };
        readonly search: {
            readonly __type: "String";
        };
        readonly stati: {
            readonly __type: "[PostStatusEnum]";
        };
        readonly status: {
            readonly __type: "PostStatusEnum";
        };
        readonly title: {
            readonly __type: "String";
        };
    };
    readonly RootQueryToContentNodeConnection: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly edges: {
            readonly __type: "[RootQueryToContentNodeConnectionEdge]";
        };
        readonly nodes: {
            readonly __type: "[ContentNode]";
        };
        readonly pageInfo: {
            readonly __type: "WPPageInfo";
        };
    };
    readonly RootQueryToContentNodeConnectionEdge: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly cursor: {
            readonly __type: "String";
        };
        readonly node: {
            readonly __type: "ContentNode";
        };
    };
    readonly RootQueryToContentTypeConnection: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly edges: {
            readonly __type: "[RootQueryToContentTypeConnectionEdge]";
        };
        readonly nodes: {
            readonly __type: "[ContentType]";
        };
        readonly pageInfo: {
            readonly __type: "WPPageInfo";
        };
    };
    readonly RootQueryToContentTypeConnectionEdge: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly cursor: {
            readonly __type: "String";
        };
        readonly node: {
            readonly __type: "ContentType";
        };
    };
    readonly DiscussionSettings: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly defaultCommentStatus: {
            readonly __type: "String";
        };
        readonly defaultPingStatus: {
            readonly __type: "String";
        };
    };
    readonly GeneralSettings: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly dateFormat: {
            readonly __type: "String";
        };
        readonly description: {
            readonly __type: "String";
        };
        readonly email: {
            readonly __type: "String";
        };
        readonly language: {
            readonly __type: "String";
        };
        readonly startOfWeek: {
            readonly __type: "Int";
        };
        readonly timeFormat: {
            readonly __type: "String";
        };
        readonly timezone: {
            readonly __type: "String";
        };
        readonly title: {
            readonly __type: "String";
        };
        readonly url: {
            readonly __type: "String";
        };
    };
    readonly RootQueryToMediaItemConnectionWhereArgs: {
        readonly author: {
            readonly __type: "Int";
        };
        readonly authorIn: {
            readonly __type: "[ID]";
        };
        readonly authorName: {
            readonly __type: "String";
        };
        readonly authorNotIn: {
            readonly __type: "[ID]";
        };
        readonly dateQuery: {
            readonly __type: "DateQueryInput";
        };
        readonly hasPassword: {
            readonly __type: "Boolean";
        };
        readonly id: {
            readonly __type: "Int";
        };
        readonly in: {
            readonly __type: "[ID]";
        };
        readonly mimeType: {
            readonly __type: "MimeTypeEnum";
        };
        readonly name: {
            readonly __type: "String";
        };
        readonly nameIn: {
            readonly __type: "[String]";
        };
        readonly notIn: {
            readonly __type: "[ID]";
        };
        readonly orderby: {
            readonly __type: "[PostObjectsConnectionOrderbyInput]";
        };
        readonly parent: {
            readonly __type: "ID";
        };
        readonly parentIn: {
            readonly __type: "[ID]";
        };
        readonly parentNotIn: {
            readonly __type: "[ID]";
        };
        readonly password: {
            readonly __type: "String";
        };
        readonly search: {
            readonly __type: "String";
        };
        readonly stati: {
            readonly __type: "[PostStatusEnum]";
        };
        readonly status: {
            readonly __type: "PostStatusEnum";
        };
        readonly title: {
            readonly __type: "String";
        };
    };
    readonly RootQueryToMediaItemConnection: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly edges: {
            readonly __type: "[RootQueryToMediaItemConnectionEdge]";
        };
        readonly nodes: {
            readonly __type: "[MediaItem]";
        };
        readonly pageInfo: {
            readonly __type: "WPPageInfo";
        };
    };
    readonly RootQueryToMediaItemConnectionEdge: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly cursor: {
            readonly __type: "String";
        };
        readonly node: {
            readonly __type: "MediaItem";
        };
    };
    readonly Menu: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly count: {
            readonly __type: "Int";
        };
        readonly databaseId: {
            readonly __type: "Int!";
        };
        readonly id: {
            readonly __type: "ID!";
        };
        readonly isRestricted: {
            readonly __type: "Boolean";
        };
        readonly locations: {
            readonly __type: "[MenuLocationEnum]";
        };
        readonly menuId: {
            readonly __type: "Int";
        };
        readonly menuItems: {
            readonly __type: "MenuToMenuItemConnection";
            readonly __args: {
                readonly first: "Int";
                readonly last: "Int";
                readonly after: "String";
                readonly before: "String";
                readonly where: "MenuToMenuItemConnectionWhereArgs";
            };
        };
        readonly name: {
            readonly __type: "String";
        };
        readonly slug: {
            readonly __type: "String";
        };
    };
    readonly MenuToMenuItemConnectionWhereArgs: {
        readonly id: {
            readonly __type: "Int";
        };
        readonly location: {
            readonly __type: "MenuLocationEnum";
        };
        readonly parentDatabaseId: {
            readonly __type: "Int";
        };
        readonly parentId: {
            readonly __type: "ID";
        };
    };
    readonly MenuToMenuItemConnection: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly edges: {
            readonly __type: "[MenuToMenuItemConnectionEdge]";
        };
        readonly nodes: {
            readonly __type: "[MenuItem]";
        };
        readonly pageInfo: {
            readonly __type: "WPPageInfo";
        };
    };
    readonly MenuToMenuItemConnectionEdge: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly cursor: {
            readonly __type: "String";
        };
        readonly node: {
            readonly __type: "MenuItem";
        };
    };
    readonly MenuItem: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly childItems: {
            readonly __type: "MenuItemToMenuItemConnection";
            readonly __args: {
                readonly first: "Int";
                readonly last: "Int";
                readonly after: "String";
                readonly before: "String";
                readonly where: "MenuItemToMenuItemConnectionWhereArgs";
            };
        };
        readonly connectedNode: {
            readonly __type: "MenuItemToMenuItemLinkableConnectionEdge";
        };
        readonly connectedObject: {
            readonly __type: "MenuItemObjectUnion";
        };
        readonly cssClasses: {
            readonly __type: "[String]";
        };
        readonly databaseId: {
            readonly __type: "Int!";
        };
        readonly description: {
            readonly __type: "String";
        };
        readonly id: {
            readonly __type: "ID!";
        };
        readonly isRestricted: {
            readonly __type: "Boolean";
        };
        readonly label: {
            readonly __type: "String";
        };
        readonly linkRelationship: {
            readonly __type: "String";
        };
        readonly locations: {
            readonly __type: "[MenuLocationEnum]";
        };
        readonly menu: {
            readonly __type: "MenuItemToMenuConnectionEdge";
        };
        readonly menuItemId: {
            readonly __type: "Int";
        };
        readonly order: {
            readonly __type: "Int";
        };
        readonly parentDatabaseId: {
            readonly __type: "Int";
        };
        readonly parentId: {
            readonly __type: "ID";
        };
        readonly path: {
            readonly __type: "String";
        };
        readonly target: {
            readonly __type: "String";
        };
        readonly title: {
            readonly __type: "String";
        };
        readonly url: {
            readonly __type: "String";
        };
    };
    readonly MenuItemToMenuItemConnectionWhereArgs: {
        readonly id: {
            readonly __type: "Int";
        };
        readonly location: {
            readonly __type: "MenuLocationEnum";
        };
        readonly parentDatabaseId: {
            readonly __type: "Int";
        };
        readonly parentId: {
            readonly __type: "ID";
        };
    };
    readonly MenuItemToMenuItemConnection: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly edges: {
            readonly __type: "[MenuItemToMenuItemConnectionEdge]";
        };
        readonly nodes: {
            readonly __type: "[MenuItem]";
        };
        readonly pageInfo: {
            readonly __type: "WPPageInfo";
        };
    };
    readonly MenuItemToMenuItemConnectionEdge: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly cursor: {
            readonly __type: "String";
        };
        readonly node: {
            readonly __type: "MenuItem";
        };
    };
    readonly MenuItemToMenuItemLinkableConnectionEdge: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly node: {
            readonly __type: "MenuItemLinkable";
        };
    };
    readonly MenuItemToMenuConnectionEdge: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly node: {
            readonly __type: "Menu";
        };
    };
    readonly RootQueryToMenuItemConnectionWhereArgs: {
        readonly id: {
            readonly __type: "Int";
        };
        readonly location: {
            readonly __type: "MenuLocationEnum";
        };
        readonly parentDatabaseId: {
            readonly __type: "Int";
        };
        readonly parentId: {
            readonly __type: "ID";
        };
    };
    readonly RootQueryToMenuItemConnection: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly edges: {
            readonly __type: "[RootQueryToMenuItemConnectionEdge]";
        };
        readonly nodes: {
            readonly __type: "[MenuItem]";
        };
        readonly pageInfo: {
            readonly __type: "WPPageInfo";
        };
    };
    readonly RootQueryToMenuItemConnectionEdge: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly cursor: {
            readonly __type: "String";
        };
        readonly node: {
            readonly __type: "MenuItem";
        };
    };
    readonly RootQueryToMenuConnectionWhereArgs: {
        readonly id: {
            readonly __type: "Int";
        };
        readonly location: {
            readonly __type: "MenuLocationEnum";
        };
        readonly slug: {
            readonly __type: "String";
        };
    };
    readonly RootQueryToMenuConnection: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly edges: {
            readonly __type: "[RootQueryToMenuConnectionEdge]";
        };
        readonly nodes: {
            readonly __type: "[Menu]";
        };
        readonly pageInfo: {
            readonly __type: "WPPageInfo";
        };
    };
    readonly RootQueryToMenuConnectionEdge: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly cursor: {
            readonly __type: "String";
        };
        readonly node: {
            readonly __type: "Menu";
        };
    };
    readonly RootQueryToPageConnectionWhereArgs: {
        readonly author: {
            readonly __type: "Int";
        };
        readonly authorIn: {
            readonly __type: "[ID]";
        };
        readonly authorName: {
            readonly __type: "String";
        };
        readonly authorNotIn: {
            readonly __type: "[ID]";
        };
        readonly dateQuery: {
            readonly __type: "DateQueryInput";
        };
        readonly hasPassword: {
            readonly __type: "Boolean";
        };
        readonly id: {
            readonly __type: "Int";
        };
        readonly in: {
            readonly __type: "[ID]";
        };
        readonly mimeType: {
            readonly __type: "MimeTypeEnum";
        };
        readonly name: {
            readonly __type: "String";
        };
        readonly nameIn: {
            readonly __type: "[String]";
        };
        readonly notIn: {
            readonly __type: "[ID]";
        };
        readonly orderby: {
            readonly __type: "[PostObjectsConnectionOrderbyInput]";
        };
        readonly parent: {
            readonly __type: "ID";
        };
        readonly parentIn: {
            readonly __type: "[ID]";
        };
        readonly parentNotIn: {
            readonly __type: "[ID]";
        };
        readonly password: {
            readonly __type: "String";
        };
        readonly search: {
            readonly __type: "String";
        };
        readonly stati: {
            readonly __type: "[PostStatusEnum]";
        };
        readonly status: {
            readonly __type: "PostStatusEnum";
        };
        readonly title: {
            readonly __type: "String";
        };
    };
    readonly RootQueryToPageConnection: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly edges: {
            readonly __type: "[RootQueryToPageConnectionEdge]";
        };
        readonly nodes: {
            readonly __type: "[Page]";
        };
        readonly pageInfo: {
            readonly __type: "WPPageInfo";
        };
    };
    readonly RootQueryToPageConnectionEdge: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly cursor: {
            readonly __type: "String";
        };
        readonly node: {
            readonly __type: "Page";
        };
    };
    readonly Plugin: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly author: {
            readonly __type: "String";
        };
        readonly authorUri: {
            readonly __type: "String";
        };
        readonly description: {
            readonly __type: "String";
        };
        readonly id: {
            readonly __type: "ID!";
        };
        readonly isRestricted: {
            readonly __type: "Boolean";
        };
        readonly name: {
            readonly __type: "String";
        };
        readonly path: {
            readonly __type: "String";
        };
        readonly pluginUri: {
            readonly __type: "String";
        };
        readonly version: {
            readonly __type: "String";
        };
    };
    readonly RootQueryToPluginConnection: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly edges: {
            readonly __type: "[RootQueryToPluginConnectionEdge]";
        };
        readonly nodes: {
            readonly __type: "[Plugin]";
        };
        readonly pageInfo: {
            readonly __type: "WPPageInfo";
        };
    };
    readonly RootQueryToPluginConnectionEdge: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly cursor: {
            readonly __type: "String";
        };
        readonly node: {
            readonly __type: "Plugin";
        };
    };
    readonly RootQueryToPostFormatConnectionWhereArgs: {
        readonly cacheDomain: {
            readonly __type: "String";
        };
        readonly childOf: {
            readonly __type: "Int";
        };
        readonly childless: {
            readonly __type: "Boolean";
        };
        readonly descriptionLike: {
            readonly __type: "String";
        };
        readonly exclude: {
            readonly __type: "[ID]";
        };
        readonly excludeTree: {
            readonly __type: "[ID]";
        };
        readonly hideEmpty: {
            readonly __type: "Boolean";
        };
        readonly hierarchical: {
            readonly __type: "Boolean";
        };
        readonly include: {
            readonly __type: "[ID]";
        };
        readonly name: {
            readonly __type: "[String]";
        };
        readonly nameLike: {
            readonly __type: "String";
        };
        readonly objectIds: {
            readonly __type: "[ID]";
        };
        readonly order: {
            readonly __type: "OrderEnum";
        };
        readonly orderby: {
            readonly __type: "TermObjectsConnectionOrderbyEnum";
        };
        readonly padCounts: {
            readonly __type: "Boolean";
        };
        readonly parent: {
            readonly __type: "Int";
        };
        readonly search: {
            readonly __type: "String";
        };
        readonly slug: {
            readonly __type: "[String]";
        };
        readonly termTaxonomId: {
            readonly __type: "[ID]";
        };
        readonly updateTermMetaCache: {
            readonly __type: "Boolean";
        };
    };
    readonly RootQueryToPostFormatConnection: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly edges: {
            readonly __type: "[RootQueryToPostFormatConnectionEdge]";
        };
        readonly nodes: {
            readonly __type: "[PostFormat]";
        };
        readonly pageInfo: {
            readonly __type: "WPPageInfo";
        };
    };
    readonly RootQueryToPostFormatConnectionEdge: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly cursor: {
            readonly __type: "String";
        };
        readonly node: {
            readonly __type: "PostFormat";
        };
    };
    readonly RootQueryToPostConnectionWhereArgs: {
        readonly author: {
            readonly __type: "Int";
        };
        readonly authorIn: {
            readonly __type: "[ID]";
        };
        readonly authorName: {
            readonly __type: "String";
        };
        readonly authorNotIn: {
            readonly __type: "[ID]";
        };
        readonly categoryId: {
            readonly __type: "Int";
        };
        readonly categoryIn: {
            readonly __type: "[ID]";
        };
        readonly categoryName: {
            readonly __type: "String";
        };
        readonly categoryNotIn: {
            readonly __type: "[ID]";
        };
        readonly dateQuery: {
            readonly __type: "DateQueryInput";
        };
        readonly hasPassword: {
            readonly __type: "Boolean";
        };
        readonly id: {
            readonly __type: "Int";
        };
        readonly in: {
            readonly __type: "[ID]";
        };
        readonly mimeType: {
            readonly __type: "MimeTypeEnum";
        };
        readonly name: {
            readonly __type: "String";
        };
        readonly nameIn: {
            readonly __type: "[String]";
        };
        readonly notIn: {
            readonly __type: "[ID]";
        };
        readonly orderby: {
            readonly __type: "[PostObjectsConnectionOrderbyInput]";
        };
        readonly parent: {
            readonly __type: "ID";
        };
        readonly parentIn: {
            readonly __type: "[ID]";
        };
        readonly parentNotIn: {
            readonly __type: "[ID]";
        };
        readonly password: {
            readonly __type: "String";
        };
        readonly search: {
            readonly __type: "String";
        };
        readonly stati: {
            readonly __type: "[PostStatusEnum]";
        };
        readonly status: {
            readonly __type: "PostStatusEnum";
        };
        readonly tag: {
            readonly __type: "String";
        };
        readonly tagId: {
            readonly __type: "String";
        };
        readonly tagIn: {
            readonly __type: "[ID]";
        };
        readonly tagNotIn: {
            readonly __type: "[ID]";
        };
        readonly tagSlugAnd: {
            readonly __type: "[String]";
        };
        readonly tagSlugIn: {
            readonly __type: "[String]";
        };
        readonly title: {
            readonly __type: "String";
        };
    };
    readonly RootQueryToPostConnection: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly edges: {
            readonly __type: "[RootQueryToPostConnectionEdge]";
        };
        readonly nodes: {
            readonly __type: "[Post]";
        };
        readonly pageInfo: {
            readonly __type: "WPPageInfo";
        };
    };
    readonly RootQueryToPostConnectionEdge: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly cursor: {
            readonly __type: "String";
        };
        readonly node: {
            readonly __type: "Post";
        };
    };
    readonly ReadingSettings: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly postsPerPage: {
            readonly __type: "Int";
        };
    };
    readonly RootQueryToEnqueuedScriptConnection: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly edges: {
            readonly __type: "[RootQueryToEnqueuedScriptConnectionEdge]";
        };
        readonly nodes: {
            readonly __type: "[EnqueuedScript]";
        };
        readonly pageInfo: {
            readonly __type: "WPPageInfo";
        };
    };
    readonly RootQueryToEnqueuedScriptConnectionEdge: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly cursor: {
            readonly __type: "String";
        };
        readonly node: {
            readonly __type: "EnqueuedScript";
        };
    };
    readonly RootQueryToEnqueuedStylesheetConnection: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly edges: {
            readonly __type: "[RootQueryToEnqueuedStylesheetConnectionEdge]";
        };
        readonly nodes: {
            readonly __type: "[EnqueuedStylesheet]";
        };
        readonly pageInfo: {
            readonly __type: "WPPageInfo";
        };
    };
    readonly RootQueryToEnqueuedStylesheetConnectionEdge: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly cursor: {
            readonly __type: "String";
        };
        readonly node: {
            readonly __type: "EnqueuedStylesheet";
        };
    };
    readonly RootQueryToContentRevisionUnionConnectionWhereArgs: {
        readonly contentTypes: {
            readonly __type: "[ContentTypeEnum]";
        };
        readonly dateQuery: {
            readonly __type: "DateQueryInput";
        };
        readonly hasPassword: {
            readonly __type: "Boolean";
        };
        readonly id: {
            readonly __type: "Int";
        };
        readonly in: {
            readonly __type: "[ID]";
        };
        readonly mimeType: {
            readonly __type: "MimeTypeEnum";
        };
        readonly name: {
            readonly __type: "String";
        };
        readonly nameIn: {
            readonly __type: "[String]";
        };
        readonly notIn: {
            readonly __type: "[ID]";
        };
        readonly orderby: {
            readonly __type: "[PostObjectsConnectionOrderbyInput]";
        };
        readonly parent: {
            readonly __type: "ID";
        };
        readonly parentIn: {
            readonly __type: "[ID]";
        };
        readonly parentNotIn: {
            readonly __type: "[ID]";
        };
        readonly password: {
            readonly __type: "String";
        };
        readonly search: {
            readonly __type: "String";
        };
        readonly stati: {
            readonly __type: "[PostStatusEnum]";
        };
        readonly status: {
            readonly __type: "PostStatusEnum";
        };
        readonly title: {
            readonly __type: "String";
        };
    };
    readonly RootQueryToContentRevisionUnionConnection: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly edges: {
            readonly __type: "[RootQueryToContentRevisionUnionConnectionEdge]";
        };
        readonly nodes: {
            readonly __type: "[ContentRevisionUnion]";
        };
        readonly pageInfo: {
            readonly __type: "WPPageInfo";
        };
    };
    readonly RootQueryToContentRevisionUnionConnectionEdge: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly cursor: {
            readonly __type: "String";
        };
        readonly node: {
            readonly __type: "ContentRevisionUnion";
        };
    };
    readonly RootQueryToTagConnectionWhereArgs: {
        readonly cacheDomain: {
            readonly __type: "String";
        };
        readonly childOf: {
            readonly __type: "Int";
        };
        readonly childless: {
            readonly __type: "Boolean";
        };
        readonly descriptionLike: {
            readonly __type: "String";
        };
        readonly exclude: {
            readonly __type: "[ID]";
        };
        readonly excludeTree: {
            readonly __type: "[ID]";
        };
        readonly hideEmpty: {
            readonly __type: "Boolean";
        };
        readonly hierarchical: {
            readonly __type: "Boolean";
        };
        readonly include: {
            readonly __type: "[ID]";
        };
        readonly name: {
            readonly __type: "[String]";
        };
        readonly nameLike: {
            readonly __type: "String";
        };
        readonly objectIds: {
            readonly __type: "[ID]";
        };
        readonly order: {
            readonly __type: "OrderEnum";
        };
        readonly orderby: {
            readonly __type: "TermObjectsConnectionOrderbyEnum";
        };
        readonly padCounts: {
            readonly __type: "Boolean";
        };
        readonly parent: {
            readonly __type: "Int";
        };
        readonly search: {
            readonly __type: "String";
        };
        readonly slug: {
            readonly __type: "[String]";
        };
        readonly termTaxonomId: {
            readonly __type: "[ID]";
        };
        readonly updateTermMetaCache: {
            readonly __type: "Boolean";
        };
    };
    readonly RootQueryToTagConnection: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly edges: {
            readonly __type: "[RootQueryToTagConnectionEdge]";
        };
        readonly nodes: {
            readonly __type: "[Tag]";
        };
        readonly pageInfo: {
            readonly __type: "WPPageInfo";
        };
    };
    readonly RootQueryToTagConnectionEdge: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly cursor: {
            readonly __type: "String";
        };
        readonly node: {
            readonly __type: "Tag";
        };
    };
    readonly RootQueryToTaxonomyConnection: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly edges: {
            readonly __type: "[RootQueryToTaxonomyConnectionEdge]";
        };
        readonly nodes: {
            readonly __type: "[Taxonomy]";
        };
        readonly pageInfo: {
            readonly __type: "WPPageInfo";
        };
    };
    readonly RootQueryToTaxonomyConnectionEdge: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly cursor: {
            readonly __type: "String";
        };
        readonly node: {
            readonly __type: "Taxonomy";
        };
    };
    readonly RootQueryToTermNodeConnectionWhereArgs: {
        readonly cacheDomain: {
            readonly __type: "String";
        };
        readonly childOf: {
            readonly __type: "Int";
        };
        readonly childless: {
            readonly __type: "Boolean";
        };
        readonly descriptionLike: {
            readonly __type: "String";
        };
        readonly exclude: {
            readonly __type: "[ID]";
        };
        readonly excludeTree: {
            readonly __type: "[ID]";
        };
        readonly hideEmpty: {
            readonly __type: "Boolean";
        };
        readonly hierarchical: {
            readonly __type: "Boolean";
        };
        readonly include: {
            readonly __type: "[ID]";
        };
        readonly name: {
            readonly __type: "[String]";
        };
        readonly nameLike: {
            readonly __type: "String";
        };
        readonly objectIds: {
            readonly __type: "[ID]";
        };
        readonly order: {
            readonly __type: "OrderEnum";
        };
        readonly orderby: {
            readonly __type: "TermObjectsConnectionOrderbyEnum";
        };
        readonly padCounts: {
            readonly __type: "Boolean";
        };
        readonly parent: {
            readonly __type: "Int";
        };
        readonly search: {
            readonly __type: "String";
        };
        readonly slug: {
            readonly __type: "[String]";
        };
        readonly taxonomies: {
            readonly __type: "[TaxonomyEnum]";
        };
        readonly termTaxonomId: {
            readonly __type: "[ID]";
        };
        readonly updateTermMetaCache: {
            readonly __type: "Boolean";
        };
    };
    readonly RootQueryToTermNodeConnection: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly edges: {
            readonly __type: "[RootQueryToTermNodeConnectionEdge]";
        };
        readonly nodes: {
            readonly __type: "[TermNode]";
        };
        readonly pageInfo: {
            readonly __type: "WPPageInfo";
        };
    };
    readonly RootQueryToTermNodeConnectionEdge: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly cursor: {
            readonly __type: "String";
        };
        readonly node: {
            readonly __type: "TermNode";
        };
    };
    readonly Theme: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly author: {
            readonly __type: "String";
        };
        readonly authorUri: {
            readonly __type: "String";
        };
        readonly description: {
            readonly __type: "String";
        };
        readonly id: {
            readonly __type: "ID!";
        };
        readonly isRestricted: {
            readonly __type: "Boolean";
        };
        readonly name: {
            readonly __type: "String";
        };
        readonly screenshot: {
            readonly __type: "String";
        };
        readonly slug: {
            readonly __type: "String";
        };
        readonly tags: {
            readonly __type: "[String]";
        };
        readonly themeUri: {
            readonly __type: "String";
        };
        readonly version: {
            readonly __type: "String";
        };
    };
    readonly RootQueryToThemeConnection: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly edges: {
            readonly __type: "[RootQueryToThemeConnectionEdge]";
        };
        readonly nodes: {
            readonly __type: "[Theme]";
        };
        readonly pageInfo: {
            readonly __type: "WPPageInfo";
        };
    };
    readonly RootQueryToThemeConnectionEdge: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly cursor: {
            readonly __type: "String";
        };
        readonly node: {
            readonly __type: "Theme";
        };
    };
    readonly RootQueryToUserRoleConnection: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly edges: {
            readonly __type: "[RootQueryToUserRoleConnectionEdge]";
        };
        readonly nodes: {
            readonly __type: "[UserRole]";
        };
        readonly pageInfo: {
            readonly __type: "WPPageInfo";
        };
    };
    readonly RootQueryToUserRoleConnectionEdge: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly cursor: {
            readonly __type: "String";
        };
        readonly node: {
            readonly __type: "UserRole";
        };
    };
    readonly RootQueryToUserConnectionWhereArgs: {
        readonly exclude: {
            readonly __type: "[Int]";
        };
        readonly hasPublishedPosts: {
            readonly __type: "[ContentTypeEnum]";
        };
        readonly include: {
            readonly __type: "[Int]";
        };
        readonly login: {
            readonly __type: "String";
        };
        readonly loginIn: {
            readonly __type: "[String]";
        };
        readonly loginNotIn: {
            readonly __type: "[String]";
        };
        readonly nicename: {
            readonly __type: "String";
        };
        readonly nicenameIn: {
            readonly __type: "[String]";
        };
        readonly nicenameNotIn: {
            readonly __type: "[String]";
        };
        readonly orderby: {
            readonly __type: "[UsersConnectionOrderbyInput]";
        };
        readonly role: {
            readonly __type: "UserRoleEnum";
        };
        readonly roleIn: {
            readonly __type: "[UserRoleEnum]";
        };
        readonly roleNotIn: {
            readonly __type: "[UserRoleEnum]";
        };
        readonly search: {
            readonly __type: "String";
        };
        readonly searchColumns: {
            readonly __type: "[UsersConnectionSearchColumnEnum]";
        };
    };
    readonly UsersConnectionOrderbyInput: {
        readonly field: {
            readonly __type: "UsersConnectionOrderbyEnum!";
        };
        readonly order: {
            readonly __type: "OrderEnum";
        };
    };
    readonly RootQueryToUserConnection: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly edges: {
            readonly __type: "[RootQueryToUserConnectionEdge]";
        };
        readonly nodes: {
            readonly __type: "[User]";
        };
        readonly pageInfo: {
            readonly __type: "WPPageInfo";
        };
    };
    readonly RootQueryToUserConnectionEdge: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly cursor: {
            readonly __type: "String";
        };
        readonly node: {
            readonly __type: "User";
        };
    };
    readonly WritingSettings: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly defaultCategory: {
            readonly __type: "Int";
        };
        readonly defaultPostFormat: {
            readonly __type: "String";
        };
        readonly useSmilies: {
            readonly __type: "Boolean";
        };
    };
    readonly CreateCategoryInput: {
        readonly aliasOf: {
            readonly __type: "String";
        };
        readonly clientMutationId: {
            readonly __type: "String";
        };
        readonly description: {
            readonly __type: "String";
        };
        readonly name: {
            readonly __type: "String!";
        };
        readonly parentId: {
            readonly __type: "ID";
        };
        readonly slug: {
            readonly __type: "String";
        };
    };
    readonly CreateCategoryPayload: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly category: {
            readonly __type: "Category";
        };
        readonly clientMutationId: {
            readonly __type: "String";
        };
    };
    readonly CreateCommentInput: {
        readonly approved: {
            readonly __type: "String";
        };
        readonly author: {
            readonly __type: "String";
        };
        readonly authorEmail: {
            readonly __type: "String";
        };
        readonly authorUrl: {
            readonly __type: "String";
        };
        readonly clientMutationId: {
            readonly __type: "String";
        };
        readonly commentOn: {
            readonly __type: "Int";
        };
        readonly content: {
            readonly __type: "String";
        };
        readonly date: {
            readonly __type: "String";
        };
        readonly parent: {
            readonly __type: "ID";
        };
        readonly type: {
            readonly __type: "String";
        };
    };
    readonly CreateCommentPayload: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly clientMutationId: {
            readonly __type: "String";
        };
        readonly comment: {
            readonly __type: "Comment";
        };
        readonly success: {
            readonly __type: "Boolean";
        };
    };
    readonly CreateMediaItemInput: {
        readonly altText: {
            readonly __type: "String";
        };
        readonly authorId: {
            readonly __type: "ID";
        };
        readonly caption: {
            readonly __type: "String";
        };
        readonly clientMutationId: {
            readonly __type: "String";
        };
        readonly commentStatus: {
            readonly __type: "String";
        };
        readonly date: {
            readonly __type: "String";
        };
        readonly dateGmt: {
            readonly __type: "String";
        };
        readonly description: {
            readonly __type: "String";
        };
        readonly filePath: {
            readonly __type: "String";
        };
        readonly fileType: {
            readonly __type: "MimeTypeEnum";
        };
        readonly parentId: {
            readonly __type: "ID";
        };
        readonly pingStatus: {
            readonly __type: "String";
        };
        readonly slug: {
            readonly __type: "String";
        };
        readonly status: {
            readonly __type: "MediaItemStatusEnum";
        };
        readonly title: {
            readonly __type: "String";
        };
    };
    readonly CreateMediaItemPayload: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly clientMutationId: {
            readonly __type: "String";
        };
        readonly mediaItem: {
            readonly __type: "MediaItem";
        };
    };
    readonly CreatePageInput: {
        readonly authorId: {
            readonly __type: "ID";
        };
        readonly clientMutationId: {
            readonly __type: "String";
        };
        readonly commentStatus: {
            readonly __type: "String";
        };
        readonly content: {
            readonly __type: "String";
        };
        readonly date: {
            readonly __type: "String";
        };
        readonly menuOrder: {
            readonly __type: "Int";
        };
        readonly parentId: {
            readonly __type: "ID";
        };
        readonly password: {
            readonly __type: "String";
        };
        readonly slug: {
            readonly __type: "String";
        };
        readonly status: {
            readonly __type: "PostStatusEnum";
        };
        readonly title: {
            readonly __type: "String";
        };
    };
    readonly CreatePagePayload: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly clientMutationId: {
            readonly __type: "String";
        };
        readonly page: {
            readonly __type: "Page";
        };
    };
    readonly CreatePostInput: {
        readonly authorId: {
            readonly __type: "ID";
        };
        readonly categories: {
            readonly __type: "PostCategoriesInput";
        };
        readonly clientMutationId: {
            readonly __type: "String";
        };
        readonly commentStatus: {
            readonly __type: "String";
        };
        readonly content: {
            readonly __type: "String";
        };
        readonly date: {
            readonly __type: "String";
        };
        readonly excerpt: {
            readonly __type: "String";
        };
        readonly menuOrder: {
            readonly __type: "Int";
        };
        readonly password: {
            readonly __type: "String";
        };
        readonly pingStatus: {
            readonly __type: "String";
        };
        readonly pinged: {
            readonly __type: "[String]";
        };
        readonly postFormats: {
            readonly __type: "PostPostFormatsInput";
        };
        readonly slug: {
            readonly __type: "String";
        };
        readonly status: {
            readonly __type: "PostStatusEnum";
        };
        readonly tags: {
            readonly __type: "PostTagsInput";
        };
        readonly title: {
            readonly __type: "String";
        };
        readonly toPing: {
            readonly __type: "[String]";
        };
    };
    readonly PostCategoriesInput: {
        readonly append: {
            readonly __type: "Boolean";
        };
        readonly nodes: {
            readonly __type: "[PostCategoriesNodeInput]";
        };
    };
    readonly PostCategoriesNodeInput: {
        readonly description: {
            readonly __type: "String";
        };
        readonly id: {
            readonly __type: "ID";
        };
        readonly name: {
            readonly __type: "String";
        };
        readonly slug: {
            readonly __type: "String";
        };
    };
    readonly PostPostFormatsInput: {
        readonly append: {
            readonly __type: "Boolean";
        };
        readonly nodes: {
            readonly __type: "[PostPostFormatsNodeInput]";
        };
    };
    readonly PostPostFormatsNodeInput: {
        readonly description: {
            readonly __type: "String";
        };
        readonly id: {
            readonly __type: "ID";
        };
        readonly name: {
            readonly __type: "String";
        };
        readonly slug: {
            readonly __type: "String";
        };
    };
    readonly PostTagsInput: {
        readonly append: {
            readonly __type: "Boolean";
        };
        readonly nodes: {
            readonly __type: "[PostTagsNodeInput]";
        };
    };
    readonly PostTagsNodeInput: {
        readonly description: {
            readonly __type: "String";
        };
        readonly id: {
            readonly __type: "ID";
        };
        readonly name: {
            readonly __type: "String";
        };
        readonly slug: {
            readonly __type: "String";
        };
    };
    readonly CreatePostPayload: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly clientMutationId: {
            readonly __type: "String";
        };
        readonly post: {
            readonly __type: "Post";
        };
    };
    readonly CreatePostFormatInput: {
        readonly aliasOf: {
            readonly __type: "String";
        };
        readonly clientMutationId: {
            readonly __type: "String";
        };
        readonly description: {
            readonly __type: "String";
        };
        readonly name: {
            readonly __type: "String!";
        };
        readonly slug: {
            readonly __type: "String";
        };
    };
    readonly CreatePostFormatPayload: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly clientMutationId: {
            readonly __type: "String";
        };
        readonly postFormat: {
            readonly __type: "PostFormat";
        };
    };
    readonly CreateTagInput: {
        readonly aliasOf: {
            readonly __type: "String";
        };
        readonly clientMutationId: {
            readonly __type: "String";
        };
        readonly description: {
            readonly __type: "String";
        };
        readonly name: {
            readonly __type: "String!";
        };
        readonly slug: {
            readonly __type: "String";
        };
    };
    readonly CreateTagPayload: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly clientMutationId: {
            readonly __type: "String";
        };
        readonly tag: {
            readonly __type: "Tag";
        };
    };
    readonly CreateUserInput: {
        readonly aim: {
            readonly __type: "String";
        };
        readonly clientMutationId: {
            readonly __type: "String";
        };
        readonly description: {
            readonly __type: "String";
        };
        readonly displayName: {
            readonly __type: "String";
        };
        readonly email: {
            readonly __type: "String";
        };
        readonly firstName: {
            readonly __type: "String";
        };
        readonly jabber: {
            readonly __type: "String";
        };
        readonly lastName: {
            readonly __type: "String";
        };
        readonly locale: {
            readonly __type: "String";
        };
        readonly nicename: {
            readonly __type: "String";
        };
        readonly nickname: {
            readonly __type: "String";
        };
        readonly password: {
            readonly __type: "String";
        };
        readonly registered: {
            readonly __type: "String";
        };
        readonly richEditing: {
            readonly __type: "String";
        };
        readonly roles: {
            readonly __type: "[String]";
        };
        readonly username: {
            readonly __type: "String!";
        };
        readonly websiteUrl: {
            readonly __type: "String";
        };
        readonly yim: {
            readonly __type: "String";
        };
    };
    readonly CreateUserPayload: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly clientMutationId: {
            readonly __type: "String";
        };
        readonly user: {
            readonly __type: "User";
        };
    };
    readonly DeleteCategoryInput: {
        readonly clientMutationId: {
            readonly __type: "String";
        };
        readonly id: {
            readonly __type: "ID!";
        };
    };
    readonly DeleteCategoryPayload: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly category: {
            readonly __type: "Category";
        };
        readonly clientMutationId: {
            readonly __type: "String";
        };
        readonly deletedId: {
            readonly __type: "ID";
        };
    };
    readonly DeleteCommentInput: {
        readonly clientMutationId: {
            readonly __type: "String";
        };
        readonly forceDelete: {
            readonly __type: "Boolean";
        };
        readonly id: {
            readonly __type: "ID!";
        };
    };
    readonly DeleteCommentPayload: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly clientMutationId: {
            readonly __type: "String";
        };
        readonly comment: {
            readonly __type: "Comment";
        };
        readonly deletedId: {
            readonly __type: "ID";
        };
    };
    readonly DeleteMediaItemInput: {
        readonly clientMutationId: {
            readonly __type: "String";
        };
        readonly forceDelete: {
            readonly __type: "Boolean";
        };
        readonly id: {
            readonly __type: "ID!";
        };
    };
    readonly DeleteMediaItemPayload: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly clientMutationId: {
            readonly __type: "String";
        };
        readonly deletedId: {
            readonly __type: "ID";
        };
        readonly mediaItem: {
            readonly __type: "MediaItem";
        };
    };
    readonly DeletePageInput: {
        readonly clientMutationId: {
            readonly __type: "String";
        };
        readonly forceDelete: {
            readonly __type: "Boolean";
        };
        readonly id: {
            readonly __type: "ID!";
        };
    };
    readonly DeletePagePayload: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly clientMutationId: {
            readonly __type: "String";
        };
        readonly deletedId: {
            readonly __type: "ID";
        };
        readonly page: {
            readonly __type: "Page";
        };
    };
    readonly DeletePostInput: {
        readonly clientMutationId: {
            readonly __type: "String";
        };
        readonly forceDelete: {
            readonly __type: "Boolean";
        };
        readonly id: {
            readonly __type: "ID!";
        };
    };
    readonly DeletePostPayload: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly clientMutationId: {
            readonly __type: "String";
        };
        readonly deletedId: {
            readonly __type: "ID";
        };
        readonly post: {
            readonly __type: "Post";
        };
    };
    readonly DeletePostFormatInput: {
        readonly clientMutationId: {
            readonly __type: "String";
        };
        readonly id: {
            readonly __type: "ID!";
        };
    };
    readonly DeletePostFormatPayload: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly clientMutationId: {
            readonly __type: "String";
        };
        readonly deletedId: {
            readonly __type: "ID";
        };
        readonly postFormat: {
            readonly __type: "PostFormat";
        };
    };
    readonly DeleteTagInput: {
        readonly clientMutationId: {
            readonly __type: "String";
        };
        readonly id: {
            readonly __type: "ID!";
        };
    };
    readonly DeleteTagPayload: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly clientMutationId: {
            readonly __type: "String";
        };
        readonly deletedId: {
            readonly __type: "ID";
        };
        readonly tag: {
            readonly __type: "Tag";
        };
    };
    readonly DeleteUserInput: {
        readonly clientMutationId: {
            readonly __type: "String";
        };
        readonly id: {
            readonly __type: "ID!";
        };
        readonly reassignId: {
            readonly __type: "ID";
        };
    };
    readonly DeleteUserPayload: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly clientMutationId: {
            readonly __type: "String";
        };
        readonly deletedId: {
            readonly __type: "ID";
        };
        readonly user: {
            readonly __type: "User";
        };
    };
    readonly RegisterUserInput: {
        readonly aim: {
            readonly __type: "String";
        };
        readonly clientMutationId: {
            readonly __type: "String";
        };
        readonly description: {
            readonly __type: "String";
        };
        readonly displayName: {
            readonly __type: "String";
        };
        readonly email: {
            readonly __type: "String";
        };
        readonly firstName: {
            readonly __type: "String";
        };
        readonly jabber: {
            readonly __type: "String";
        };
        readonly lastName: {
            readonly __type: "String";
        };
        readonly locale: {
            readonly __type: "String";
        };
        readonly nicename: {
            readonly __type: "String";
        };
        readonly nickname: {
            readonly __type: "String";
        };
        readonly password: {
            readonly __type: "String";
        };
        readonly registered: {
            readonly __type: "String";
        };
        readonly richEditing: {
            readonly __type: "String";
        };
        readonly username: {
            readonly __type: "String!";
        };
        readonly websiteUrl: {
            readonly __type: "String";
        };
        readonly yim: {
            readonly __type: "String";
        };
    };
    readonly RegisterUserPayload: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly clientMutationId: {
            readonly __type: "String";
        };
        readonly user: {
            readonly __type: "User";
        };
    };
    readonly ResetUserPasswordInput: {
        readonly clientMutationId: {
            readonly __type: "String";
        };
        readonly key: {
            readonly __type: "String";
        };
        readonly login: {
            readonly __type: "String";
        };
        readonly password: {
            readonly __type: "String";
        };
    };
    readonly ResetUserPasswordPayload: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly clientMutationId: {
            readonly __type: "String";
        };
        readonly user: {
            readonly __type: "User";
        };
    };
    readonly RestoreCommentInput: {
        readonly clientMutationId: {
            readonly __type: "String";
        };
        readonly id: {
            readonly __type: "ID!";
        };
    };
    readonly RestoreCommentPayload: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly clientMutationId: {
            readonly __type: "String";
        };
        readonly comment: {
            readonly __type: "Comment";
        };
        readonly restoredId: {
            readonly __type: "ID";
        };
    };
    readonly SendPasswordResetEmailInput: {
        readonly clientMutationId: {
            readonly __type: "String";
        };
        readonly username: {
            readonly __type: "String!";
        };
    };
    readonly SendPasswordResetEmailPayload: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly clientMutationId: {
            readonly __type: "String";
        };
        readonly user: {
            readonly __type: "User";
        };
    };
    readonly UpdateCategoryInput: {
        readonly aliasOf: {
            readonly __type: "String";
        };
        readonly clientMutationId: {
            readonly __type: "String";
        };
        readonly description: {
            readonly __type: "String";
        };
        readonly id: {
            readonly __type: "ID!";
        };
        readonly name: {
            readonly __type: "String";
        };
        readonly parentId: {
            readonly __type: "ID";
        };
        readonly slug: {
            readonly __type: "String";
        };
    };
    readonly UpdateCategoryPayload: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly category: {
            readonly __type: "Category";
        };
        readonly clientMutationId: {
            readonly __type: "String";
        };
    };
    readonly UpdateCommentInput: {
        readonly approved: {
            readonly __type: "String";
        };
        readonly author: {
            readonly __type: "String";
        };
        readonly authorEmail: {
            readonly __type: "String";
        };
        readonly authorUrl: {
            readonly __type: "String";
        };
        readonly clientMutationId: {
            readonly __type: "String";
        };
        readonly commentOn: {
            readonly __type: "Int";
        };
        readonly content: {
            readonly __type: "String";
        };
        readonly date: {
            readonly __type: "String";
        };
        readonly id: {
            readonly __type: "ID!";
        };
        readonly parent: {
            readonly __type: "ID";
        };
        readonly type: {
            readonly __type: "String";
        };
    };
    readonly UpdateCommentPayload: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly clientMutationId: {
            readonly __type: "String";
        };
        readonly comment: {
            readonly __type: "Comment";
        };
        readonly success: {
            readonly __type: "Boolean";
        };
    };
    readonly UpdateMediaItemInput: {
        readonly altText: {
            readonly __type: "String";
        };
        readonly authorId: {
            readonly __type: "ID";
        };
        readonly caption: {
            readonly __type: "String";
        };
        readonly clientMutationId: {
            readonly __type: "String";
        };
        readonly commentStatus: {
            readonly __type: "String";
        };
        readonly date: {
            readonly __type: "String";
        };
        readonly dateGmt: {
            readonly __type: "String";
        };
        readonly description: {
            readonly __type: "String";
        };
        readonly filePath: {
            readonly __type: "String";
        };
        readonly fileType: {
            readonly __type: "MimeTypeEnum";
        };
        readonly id: {
            readonly __type: "ID!";
        };
        readonly parentId: {
            readonly __type: "ID";
        };
        readonly pingStatus: {
            readonly __type: "String";
        };
        readonly slug: {
            readonly __type: "String";
        };
        readonly status: {
            readonly __type: "MediaItemStatusEnum";
        };
        readonly title: {
            readonly __type: "String";
        };
    };
    readonly UpdateMediaItemPayload: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly clientMutationId: {
            readonly __type: "String";
        };
        readonly mediaItem: {
            readonly __type: "MediaItem";
        };
    };
    readonly UpdatePageInput: {
        readonly authorId: {
            readonly __type: "ID";
        };
        readonly clientMutationId: {
            readonly __type: "String";
        };
        readonly commentStatus: {
            readonly __type: "String";
        };
        readonly content: {
            readonly __type: "String";
        };
        readonly date: {
            readonly __type: "String";
        };
        readonly id: {
            readonly __type: "ID!";
        };
        readonly menuOrder: {
            readonly __type: "Int";
        };
        readonly parentId: {
            readonly __type: "ID";
        };
        readonly password: {
            readonly __type: "String";
        };
        readonly slug: {
            readonly __type: "String";
        };
        readonly status: {
            readonly __type: "PostStatusEnum";
        };
        readonly title: {
            readonly __type: "String";
        };
    };
    readonly UpdatePagePayload: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly clientMutationId: {
            readonly __type: "String";
        };
        readonly page: {
            readonly __type: "Page";
        };
    };
    readonly UpdatePostInput: {
        readonly authorId: {
            readonly __type: "ID";
        };
        readonly categories: {
            readonly __type: "PostCategoriesInput";
        };
        readonly clientMutationId: {
            readonly __type: "String";
        };
        readonly commentStatus: {
            readonly __type: "String";
        };
        readonly content: {
            readonly __type: "String";
        };
        readonly date: {
            readonly __type: "String";
        };
        readonly excerpt: {
            readonly __type: "String";
        };
        readonly id: {
            readonly __type: "ID!";
        };
        readonly menuOrder: {
            readonly __type: "Int";
        };
        readonly password: {
            readonly __type: "String";
        };
        readonly pingStatus: {
            readonly __type: "String";
        };
        readonly pinged: {
            readonly __type: "[String]";
        };
        readonly postFormats: {
            readonly __type: "PostPostFormatsInput";
        };
        readonly slug: {
            readonly __type: "String";
        };
        readonly status: {
            readonly __type: "PostStatusEnum";
        };
        readonly tags: {
            readonly __type: "PostTagsInput";
        };
        readonly title: {
            readonly __type: "String";
        };
        readonly toPing: {
            readonly __type: "[String]";
        };
    };
    readonly UpdatePostPayload: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly clientMutationId: {
            readonly __type: "String";
        };
        readonly post: {
            readonly __type: "Post";
        };
    };
    readonly UpdatePostFormatInput: {
        readonly aliasOf: {
            readonly __type: "String";
        };
        readonly clientMutationId: {
            readonly __type: "String";
        };
        readonly description: {
            readonly __type: "String";
        };
        readonly id: {
            readonly __type: "ID!";
        };
        readonly name: {
            readonly __type: "String";
        };
        readonly slug: {
            readonly __type: "String";
        };
    };
    readonly UpdatePostFormatPayload: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly clientMutationId: {
            readonly __type: "String";
        };
        readonly postFormat: {
            readonly __type: "PostFormat";
        };
    };
    readonly UpdateSettingsInput: {
        readonly clientMutationId: {
            readonly __type: "String";
        };
        readonly discussionSettingsDefaultCommentStatus: {
            readonly __type: "String";
        };
        readonly discussionSettingsDefaultPingStatus: {
            readonly __type: "String";
        };
        readonly generalSettingsDateFormat: {
            readonly __type: "String";
        };
        readonly generalSettingsDescription: {
            readonly __type: "String";
        };
        readonly generalSettingsEmail: {
            readonly __type: "String";
        };
        readonly generalSettingsLanguage: {
            readonly __type: "String";
        };
        readonly generalSettingsStartOfWeek: {
            readonly __type: "Int";
        };
        readonly generalSettingsTimeFormat: {
            readonly __type: "String";
        };
        readonly generalSettingsTimezone: {
            readonly __type: "String";
        };
        readonly generalSettingsTitle: {
            readonly __type: "String";
        };
        readonly generalSettingsUrl: {
            readonly __type: "String";
        };
        readonly readingSettingsPostsPerPage: {
            readonly __type: "Int";
        };
        readonly writingSettingsDefaultCategory: {
            readonly __type: "Int";
        };
        readonly writingSettingsDefaultPostFormat: {
            readonly __type: "String";
        };
        readonly writingSettingsUseSmilies: {
            readonly __type: "Boolean";
        };
    };
    readonly UpdateSettingsPayload: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly allSettings: {
            readonly __type: "Settings";
        };
        readonly clientMutationId: {
            readonly __type: "String";
        };
        readonly discussionSettings: {
            readonly __type: "DiscussionSettings";
        };
        readonly generalSettings: {
            readonly __type: "GeneralSettings";
        };
        readonly readingSettings: {
            readonly __type: "ReadingSettings";
        };
        readonly writingSettings: {
            readonly __type: "WritingSettings";
        };
    };
    readonly UpdateTagInput: {
        readonly aliasOf: {
            readonly __type: "String";
        };
        readonly clientMutationId: {
            readonly __type: "String";
        };
        readonly description: {
            readonly __type: "String";
        };
        readonly id: {
            readonly __type: "ID!";
        };
        readonly name: {
            readonly __type: "String";
        };
        readonly slug: {
            readonly __type: "String";
        };
    };
    readonly UpdateTagPayload: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly clientMutationId: {
            readonly __type: "String";
        };
        readonly tag: {
            readonly __type: "Tag";
        };
    };
    readonly UpdateUserInput: {
        readonly aim: {
            readonly __type: "String";
        };
        readonly clientMutationId: {
            readonly __type: "String";
        };
        readonly description: {
            readonly __type: "String";
        };
        readonly displayName: {
            readonly __type: "String";
        };
        readonly email: {
            readonly __type: "String";
        };
        readonly firstName: {
            readonly __type: "String";
        };
        readonly id: {
            readonly __type: "ID!";
        };
        readonly jabber: {
            readonly __type: "String";
        };
        readonly lastName: {
            readonly __type: "String";
        };
        readonly locale: {
            readonly __type: "String";
        };
        readonly nicename: {
            readonly __type: "String";
        };
        readonly nickname: {
            readonly __type: "String";
        };
        readonly password: {
            readonly __type: "String";
        };
        readonly registered: {
            readonly __type: "String";
        };
        readonly richEditing: {
            readonly __type: "String";
        };
        readonly roles: {
            readonly __type: "[String]";
        };
        readonly websiteUrl: {
            readonly __type: "String";
        };
        readonly yim: {
            readonly __type: "String";
        };
    };
    readonly UpdateUserPayload: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly clientMutationId: {
            readonly __type: "String";
        };
        readonly user: {
            readonly __type: "User";
        };
    };
    readonly CommentAuthor: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly databaseId: {
            readonly __type: "Int!";
        };
        readonly email: {
            readonly __type: "String";
        };
        readonly id: {
            readonly __type: "ID!";
        };
        readonly isRestricted: {
            readonly __type: "Boolean";
        };
        readonly name: {
            readonly __type: "String";
        };
        readonly url: {
            readonly __type: "String";
        };
    };
    readonly DefaultTemplate: {
        readonly __typename: {
            readonly __type: "String!";
        };
        readonly templateName: {
            readonly __type: "String";
        };
    };
    readonly [SchemaUnionsKey]: {
        readonly ContentRevisionUnion: readonly ["Post", "Page"];
        readonly MenuItemObjectUnion: readonly ["Post", "Page", "Category", "Tag", "PostFormat"];
    };
};
export interface Query {
    __typename: 'Query' | undefined;
    allSettings?: Maybe<Settings>;
    categories: (args?: {
        first?: Maybe<Scalars['Int']>;
        last?: Maybe<Scalars['Int']>;
        after?: Maybe<Scalars['String']>;
        before?: Maybe<Scalars['String']>;
        where?: Maybe<RootQueryToCategoryConnectionWhereArgs>;
    }) => Maybe<RootQueryToCategoryConnection>;
    category: (args: {
        id: Scalars['ID'];
        idType?: Maybe<CategoryIdType>;
    }) => Maybe<Category>;
    comment: (args: {
        id: Scalars['ID'];
    }) => Maybe<Comment>;
    comments: (args?: {
        first?: Maybe<Scalars['Int']>;
        last?: Maybe<Scalars['Int']>;
        after?: Maybe<Scalars['String']>;
        before?: Maybe<Scalars['String']>;
        where?: Maybe<RootQueryToCommentConnectionWhereArgs>;
    }) => Maybe<RootQueryToCommentConnection>;
    contentNode: (args: {
        id: Scalars['ID'];
        idType?: Maybe<ContentNodeIdTypeEnum>;
        contentType?: Maybe<ContentTypeEnum>;
        asPreview?: Maybe<Scalars['Boolean']>;
    }) => Maybe<ContentNode>;
    contentNodes: (args?: {
        first?: Maybe<Scalars['Int']>;
        last?: Maybe<Scalars['Int']>;
        after?: Maybe<Scalars['String']>;
        before?: Maybe<Scalars['String']>;
        where?: Maybe<RootQueryToContentNodeConnectionWhereArgs>;
    }) => Maybe<RootQueryToContentNodeConnection>;
    contentType: (args: {
        id: Scalars['ID'];
        idType?: Maybe<ContentTypeIdTypeEnum>;
    }) => Maybe<ContentType>;
    contentTypes: (args?: {
        first?: Maybe<Scalars['Int']>;
        last?: Maybe<Scalars['Int']>;
        after?: Maybe<Scalars['String']>;
        before?: Maybe<Scalars['String']>;
    }) => Maybe<RootQueryToContentTypeConnection>;
    discussionSettings?: Maybe<DiscussionSettings>;
    generalSettings?: Maybe<GeneralSettings>;
    mediaItem: (args: {
        id: Scalars['ID'];
        idType?: Maybe<MediaItemIdType>;
        asPreview?: Maybe<Scalars['Boolean']>;
    }) => Maybe<MediaItem>;
    mediaItemBy: (args?: {
        id?: Maybe<Scalars['ID']>;
        mediaItemId?: Maybe<Scalars['Int']>;
        uri?: Maybe<Scalars['String']>;
        slug?: Maybe<Scalars['String']>;
    }) => Maybe<MediaItem>;
    mediaItems: (args?: {
        first?: Maybe<Scalars['Int']>;
        last?: Maybe<Scalars['Int']>;
        after?: Maybe<Scalars['String']>;
        before?: Maybe<Scalars['String']>;
        where?: Maybe<RootQueryToMediaItemConnectionWhereArgs>;
    }) => Maybe<RootQueryToMediaItemConnection>;
    menu: (args: {
        id: Scalars['ID'];
        idType?: Maybe<MenuNodeIdTypeEnum>;
    }) => Maybe<Menu>;
    menuItem: (args: {
        id: Scalars['ID'];
        idType?: Maybe<MenuItemNodeIdTypeEnum>;
    }) => Maybe<MenuItem>;
    menuItems: (args?: {
        first?: Maybe<Scalars['Int']>;
        last?: Maybe<Scalars['Int']>;
        after?: Maybe<Scalars['String']>;
        before?: Maybe<Scalars['String']>;
        where?: Maybe<RootQueryToMenuItemConnectionWhereArgs>;
    }) => Maybe<RootQueryToMenuItemConnection>;
    menus: (args?: {
        first?: Maybe<Scalars['Int']>;
        last?: Maybe<Scalars['Int']>;
        after?: Maybe<Scalars['String']>;
        before?: Maybe<Scalars['String']>;
        where?: Maybe<RootQueryToMenuConnectionWhereArgs>;
    }) => Maybe<RootQueryToMenuConnection>;
    node: (args?: {
        id?: Maybe<Scalars['ID']>;
    }) => Maybe<Node>;
    nodeByUri: (args: {
        uri: Scalars['String'];
    }) => Maybe<UniformResourceIdentifiable>;
    page: (args: {
        id: Scalars['ID'];
        idType?: Maybe<PageIdType>;
        asPreview?: Maybe<Scalars['Boolean']>;
    }) => Maybe<Page>;
    pageBy: (args?: {
        id?: Maybe<Scalars['ID']>;
        pageId?: Maybe<Scalars['Int']>;
        uri?: Maybe<Scalars['String']>;
    }) => Maybe<Page>;
    pages: (args?: {
        first?: Maybe<Scalars['Int']>;
        last?: Maybe<Scalars['Int']>;
        after?: Maybe<Scalars['String']>;
        before?: Maybe<Scalars['String']>;
        where?: Maybe<RootQueryToPageConnectionWhereArgs>;
    }) => Maybe<RootQueryToPageConnection>;
    plugin: (args: {
        id: Scalars['ID'];
    }) => Maybe<Plugin>;
    plugins: (args?: {
        first?: Maybe<Scalars['Int']>;
        last?: Maybe<Scalars['Int']>;
        after?: Maybe<Scalars['String']>;
        before?: Maybe<Scalars['String']>;
    }) => Maybe<RootQueryToPluginConnection>;
    post: (args: {
        id: Scalars['ID'];
        idType?: Maybe<PostIdType>;
        asPreview?: Maybe<Scalars['Boolean']>;
    }) => Maybe<Post>;
    postBy: (args?: {
        id?: Maybe<Scalars['ID']>;
        postId?: Maybe<Scalars['Int']>;
        uri?: Maybe<Scalars['String']>;
        slug?: Maybe<Scalars['String']>;
    }) => Maybe<Post>;
    postFormat: (args: {
        id: Scalars['ID'];
        idType?: Maybe<PostFormatIdType>;
    }) => Maybe<PostFormat>;
    postFormats: (args?: {
        first?: Maybe<Scalars['Int']>;
        last?: Maybe<Scalars['Int']>;
        after?: Maybe<Scalars['String']>;
        before?: Maybe<Scalars['String']>;
        where?: Maybe<RootQueryToPostFormatConnectionWhereArgs>;
    }) => Maybe<RootQueryToPostFormatConnection>;
    posts: (args?: {
        first?: Maybe<Scalars['Int']>;
        last?: Maybe<Scalars['Int']>;
        after?: Maybe<Scalars['String']>;
        before?: Maybe<Scalars['String']>;
        where?: Maybe<RootQueryToPostConnectionWhereArgs>;
    }) => Maybe<RootQueryToPostConnection>;
    readingSettings?: Maybe<ReadingSettings>;
    registeredScripts: (args?: {
        first?: Maybe<Scalars['Int']>;
        last?: Maybe<Scalars['Int']>;
        after?: Maybe<Scalars['String']>;
        before?: Maybe<Scalars['String']>;
    }) => Maybe<RootQueryToEnqueuedScriptConnection>;
    registeredStylesheets: (args?: {
        first?: Maybe<Scalars['Int']>;
        last?: Maybe<Scalars['Int']>;
        after?: Maybe<Scalars['String']>;
        before?: Maybe<Scalars['String']>;
    }) => Maybe<RootQueryToEnqueuedStylesheetConnection>;
    revisions: (args?: {
        first?: Maybe<Scalars['Int']>;
        last?: Maybe<Scalars['Int']>;
        after?: Maybe<Scalars['String']>;
        before?: Maybe<Scalars['String']>;
        where?: Maybe<RootQueryToContentRevisionUnionConnectionWhereArgs>;
    }) => Maybe<RootQueryToContentRevisionUnionConnection>;
    tag: (args: {
        id: Scalars['ID'];
        idType?: Maybe<TagIdType>;
    }) => Maybe<Tag>;
    tags: (args?: {
        first?: Maybe<Scalars['Int']>;
        last?: Maybe<Scalars['Int']>;
        after?: Maybe<Scalars['String']>;
        before?: Maybe<Scalars['String']>;
        where?: Maybe<RootQueryToTagConnectionWhereArgs>;
    }) => Maybe<RootQueryToTagConnection>;
    taxonomies: (args?: {
        first?: Maybe<Scalars['Int']>;
        last?: Maybe<Scalars['Int']>;
        after?: Maybe<Scalars['String']>;
        before?: Maybe<Scalars['String']>;
    }) => Maybe<RootQueryToTaxonomyConnection>;
    taxonomy: (args: {
        id: Scalars['ID'];
        idType?: Maybe<TaxonomyIdTypeEnum>;
    }) => Maybe<Taxonomy>;
    termNode: (args: {
        id: Scalars['ID'];
        idType?: Maybe<TermNodeIdTypeEnum>;
        taxonomy?: Maybe<TaxonomyEnum>;
    }) => Maybe<TermNode>;
    terms: (args?: {
        first?: Maybe<Scalars['Int']>;
        last?: Maybe<Scalars['Int']>;
        after?: Maybe<Scalars['String']>;
        before?: Maybe<Scalars['String']>;
        where?: Maybe<RootQueryToTermNodeConnectionWhereArgs>;
    }) => Maybe<RootQueryToTermNodeConnection>;
    theme: (args: {
        id: Scalars['ID'];
    }) => Maybe<Theme>;
    themes: (args?: {
        first?: Maybe<Scalars['Int']>;
        last?: Maybe<Scalars['Int']>;
        after?: Maybe<Scalars['String']>;
        before?: Maybe<Scalars['String']>;
    }) => Maybe<RootQueryToThemeConnection>;
    user: (args: {
        id: Scalars['ID'];
        idType?: Maybe<UserNodeIdTypeEnum>;
    }) => Maybe<User>;
    userRole: (args: {
        id: Scalars['ID'];
    }) => Maybe<UserRole>;
    userRoles: (args?: {
        first?: Maybe<Scalars['Int']>;
        last?: Maybe<Scalars['Int']>;
        after?: Maybe<Scalars['String']>;
        before?: Maybe<Scalars['String']>;
    }) => Maybe<RootQueryToUserRoleConnection>;
    users: (args?: {
        first?: Maybe<Scalars['Int']>;
        last?: Maybe<Scalars['Int']>;
        after?: Maybe<Scalars['String']>;
        before?: Maybe<Scalars['String']>;
        where?: Maybe<RootQueryToUserConnectionWhereArgs>;
    }) => Maybe<RootQueryToUserConnection>;
    viewer?: Maybe<User>;
    writingSettings?: Maybe<WritingSettings>;
}
export interface Mutation {
    __typename: 'Mutation' | undefined;
    createCategory: (args: {
        input: CreateCategoryInput;
    }) => Maybe<CreateCategoryPayload>;
    createComment: (args: {
        input: CreateCommentInput;
    }) => Maybe<CreateCommentPayload>;
    createMediaItem: (args: {
        input: CreateMediaItemInput;
    }) => Maybe<CreateMediaItemPayload>;
    createPage: (args: {
        input: CreatePageInput;
    }) => Maybe<CreatePagePayload>;
    createPost: (args: {
        input: CreatePostInput;
    }) => Maybe<CreatePostPayload>;
    createPostFormat: (args: {
        input: CreatePostFormatInput;
    }) => Maybe<CreatePostFormatPayload>;
    createTag: (args: {
        input: CreateTagInput;
    }) => Maybe<CreateTagPayload>;
    createUser: (args: {
        input: CreateUserInput;
    }) => Maybe<CreateUserPayload>;
    deleteCategory: (args: {
        input: DeleteCategoryInput;
    }) => Maybe<DeleteCategoryPayload>;
    deleteComment: (args: {
        input: DeleteCommentInput;
    }) => Maybe<DeleteCommentPayload>;
    deleteMediaItem: (args: {
        input: DeleteMediaItemInput;
    }) => Maybe<DeleteMediaItemPayload>;
    deletePage: (args: {
        input: DeletePageInput;
    }) => Maybe<DeletePagePayload>;
    deletePost: (args: {
        input: DeletePostInput;
    }) => Maybe<DeletePostPayload>;
    deletePostFormat: (args: {
        input: DeletePostFormatInput;
    }) => Maybe<DeletePostFormatPayload>;
    deleteTag: (args: {
        input: DeleteTagInput;
    }) => Maybe<DeleteTagPayload>;
    deleteUser: (args: {
        input: DeleteUserInput;
    }) => Maybe<DeleteUserPayload>;
    increaseCount: (args?: {
        count?: Maybe<Scalars['Int']>;
    }) => Maybe<ScalarsEnums['Int']>;
    registerUser: (args: {
        input: RegisterUserInput;
    }) => Maybe<RegisterUserPayload>;
    resetUserPassword: (args: {
        input: ResetUserPasswordInput;
    }) => Maybe<ResetUserPasswordPayload>;
    restoreComment: (args: {
        input: RestoreCommentInput;
    }) => Maybe<RestoreCommentPayload>;
    sendPasswordResetEmail: (args: {
        input: SendPasswordResetEmailInput;
    }) => Maybe<SendPasswordResetEmailPayload>;
    updateCategory: (args: {
        input: UpdateCategoryInput;
    }) => Maybe<UpdateCategoryPayload>;
    updateComment: (args: {
        input: UpdateCommentInput;
    }) => Maybe<UpdateCommentPayload>;
    updateMediaItem: (args: {
        input: UpdateMediaItemInput;
    }) => Maybe<UpdateMediaItemPayload>;
    updatePage: (args: {
        input: UpdatePageInput;
    }) => Maybe<UpdatePagePayload>;
    updatePost: (args: {
        input: UpdatePostInput;
    }) => Maybe<UpdatePostPayload>;
    updatePostFormat: (args: {
        input: UpdatePostFormatInput;
    }) => Maybe<UpdatePostFormatPayload>;
    updateSettings: (args: {
        input: UpdateSettingsInput;
    }) => Maybe<UpdateSettingsPayload>;
    updateTag: (args: {
        input: UpdateTagInput;
    }) => Maybe<UpdateTagPayload>;
    updateUser: (args: {
        input: UpdateUserInput;
    }) => Maybe<UpdateUserPayload>;
}
export interface Subscription {
    __typename: 'Subscription' | undefined;
}
export interface Settings {
    __typename: 'Settings' | undefined;
    discussionSettingsDefaultCommentStatus?: Maybe<ScalarsEnums['String']>;
    discussionSettingsDefaultPingStatus?: Maybe<ScalarsEnums['String']>;
    generalSettingsDateFormat?: Maybe<ScalarsEnums['String']>;
    generalSettingsDescription?: Maybe<ScalarsEnums['String']>;
    generalSettingsEmail?: Maybe<ScalarsEnums['String']>;
    generalSettingsLanguage?: Maybe<ScalarsEnums['String']>;
    generalSettingsStartOfWeek?: Maybe<ScalarsEnums['Int']>;
    generalSettingsTimeFormat?: Maybe<ScalarsEnums['String']>;
    generalSettingsTimezone?: Maybe<ScalarsEnums['String']>;
    generalSettingsTitle?: Maybe<ScalarsEnums['String']>;
    generalSettingsUrl?: Maybe<ScalarsEnums['String']>;
    readingSettingsPostsPerPage?: Maybe<ScalarsEnums['Int']>;
    writingSettingsDefaultCategory?: Maybe<ScalarsEnums['Int']>;
    writingSettingsDefaultPostFormat?: Maybe<ScalarsEnums['String']>;
    writingSettingsUseSmilies?: Maybe<ScalarsEnums['Boolean']>;
}
export interface RootQueryToCategoryConnection {
    __typename: 'RootQueryToCategoryConnection' | undefined;
    edges?: Maybe<Array<Maybe<RootQueryToCategoryConnectionEdge>>>;
    nodes?: Maybe<Array<Maybe<Category>>>;
    pageInfo?: Maybe<WPPageInfo>;
}
export interface RootQueryToCategoryConnectionEdge {
    __typename: 'RootQueryToCategoryConnectionEdge' | undefined;
    cursor?: Maybe<ScalarsEnums['String']>;
    node?: Maybe<Category>;
}
export interface Category extends Omit<Node, '__typename'>, Omit<TermNode, '__typename'>, Omit<UniformResourceIdentifiable, '__typename'>, Omit<DatabaseIdentifier, '__typename'>, Omit<HierarchicalTermNode, '__typename'>, Omit<MenuItemLinkable, '__typename'> {
    __typename: 'Category' | undefined;
    ancestors: (args?: {
        first?: Maybe<Scalars['Int']>;
        last?: Maybe<Scalars['Int']>;
        after?: Maybe<Scalars['String']>;
        before?: Maybe<Scalars['String']>;
    }) => Maybe<CategoryToAncestorsCategoryConnection>;
    categoryId?: Maybe<ScalarsEnums['Int']>;
    children: (args?: {
        first?: Maybe<Scalars['Int']>;
        last?: Maybe<Scalars['Int']>;
        after?: Maybe<Scalars['String']>;
        before?: Maybe<Scalars['String']>;
        where?: Maybe<CategoryToCategoryConnectionWhereArgs>;
    }) => Maybe<CategoryToCategoryConnection>;
    contentNodes: (args?: {
        first?: Maybe<Scalars['Int']>;
        last?: Maybe<Scalars['Int']>;
        after?: Maybe<Scalars['String']>;
        before?: Maybe<Scalars['String']>;
        where?: Maybe<CategoryToContentNodeConnectionWhereArgs>;
    }) => Maybe<CategoryToContentNodeConnection>;
    count?: Maybe<ScalarsEnums['Int']>;
    databaseId: ScalarsEnums['Int'];
    description?: Maybe<ScalarsEnums['String']>;
    enqueuedScripts: (args?: {
        first?: Maybe<Scalars['Int']>;
        last?: Maybe<Scalars['Int']>;
        after?: Maybe<Scalars['String']>;
        before?: Maybe<Scalars['String']>;
    }) => Maybe<TermNodeToEnqueuedScriptConnection>;
    enqueuedStylesheets: (args?: {
        first?: Maybe<Scalars['Int']>;
        last?: Maybe<Scalars['Int']>;
        after?: Maybe<Scalars['String']>;
        before?: Maybe<Scalars['String']>;
    }) => Maybe<TermNodeToEnqueuedStylesheetConnection>;
    id: ScalarsEnums['ID'];
    isContentNode: ScalarsEnums['Boolean'];
    isRestricted?: Maybe<ScalarsEnums['Boolean']>;
    isTermNode: ScalarsEnums['Boolean'];
    link?: Maybe<ScalarsEnums['String']>;
    name?: Maybe<ScalarsEnums['String']>;
    parent?: Maybe<CategoryToParentCategoryConnectionEdge>;
    parentDatabaseId?: Maybe<ScalarsEnums['Int']>;
    parentId?: Maybe<ScalarsEnums['ID']>;
    posts: (args?: {
        first?: Maybe<Scalars['Int']>;
        last?: Maybe<Scalars['Int']>;
        after?: Maybe<Scalars['String']>;
        before?: Maybe<Scalars['String']>;
        where?: Maybe<CategoryToPostConnectionWhereArgs>;
    }) => Maybe<CategoryToPostConnection>;
    slug?: Maybe<ScalarsEnums['String']>;
    taxonomy?: Maybe<CategoryToTaxonomyConnectionEdge>;
    termGroupId?: Maybe<ScalarsEnums['Int']>;
    termTaxonomyId?: Maybe<ScalarsEnums['Int']>;
    uri?: Maybe<ScalarsEnums['String']>;
}
export interface Node {
    __typename: 'Node' | undefined;
    id: ScalarsEnums['ID'];
}
export interface TermNode {
    __typename: 'TermNode' | undefined;
    count?: Maybe<ScalarsEnums['Int']>;
    databaseId: ScalarsEnums['Int'];
    description?: Maybe<ScalarsEnums['String']>;
    enqueuedScripts: (args?: {
        first?: Maybe<Scalars['Int']>;
        last?: Maybe<Scalars['Int']>;
        after?: Maybe<Scalars['String']>;
        before?: Maybe<Scalars['String']>;
    }) => Maybe<TermNodeToEnqueuedScriptConnection>;
    enqueuedStylesheets: (args?: {
        first?: Maybe<Scalars['Int']>;
        last?: Maybe<Scalars['Int']>;
        after?: Maybe<Scalars['String']>;
        before?: Maybe<Scalars['String']>;
    }) => Maybe<TermNodeToEnqueuedStylesheetConnection>;
    id: ScalarsEnums['ID'];
    isContentNode: ScalarsEnums['Boolean'];
    isRestricted?: Maybe<ScalarsEnums['Boolean']>;
    isTermNode: ScalarsEnums['Boolean'];
    link?: Maybe<ScalarsEnums['String']>;
    name?: Maybe<ScalarsEnums['String']>;
    slug?: Maybe<ScalarsEnums['String']>;
    termGroupId?: Maybe<ScalarsEnums['Int']>;
    termTaxonomyId?: Maybe<ScalarsEnums['Int']>;
    uri?: Maybe<ScalarsEnums['String']>;
}
export interface UniformResourceIdentifiable {
    __typename: 'UniformResourceIdentifiable' | undefined;
    id: ScalarsEnums['ID'];
    isContentNode: ScalarsEnums['Boolean'];
    isTermNode: ScalarsEnums['Boolean'];
    uri?: Maybe<ScalarsEnums['String']>;
}
export interface TermNodeToEnqueuedScriptConnection {
    __typename: 'TermNodeToEnqueuedScriptConnection' | undefined;
    edges?: Maybe<Array<Maybe<TermNodeToEnqueuedScriptConnectionEdge>>>;
    nodes?: Maybe<Array<Maybe<EnqueuedScript>>>;
    pageInfo?: Maybe<WPPageInfo>;
}
export interface TermNodeToEnqueuedScriptConnectionEdge {
    __typename: 'TermNodeToEnqueuedScriptConnectionEdge' | undefined;
    cursor?: Maybe<ScalarsEnums['String']>;
    node?: Maybe<EnqueuedScript>;
}
export interface EnqueuedScript extends Omit<Node, '__typename'>, Omit<EnqueuedAsset, '__typename'> {
    __typename: 'EnqueuedScript' | undefined;
    args?: Maybe<ScalarsEnums['Boolean']>;
    dependencies?: Maybe<Array<Maybe<EnqueuedScript>>>;
    extra?: Maybe<ScalarsEnums['String']>;
    handle?: Maybe<ScalarsEnums['String']>;
    id: ScalarsEnums['ID'];
    src?: Maybe<ScalarsEnums['String']>;
    version?: Maybe<ScalarsEnums['String']>;
}
export interface EnqueuedAsset {
    __typename: 'EnqueuedAsset' | undefined;
    args?: Maybe<ScalarsEnums['Boolean']>;
    dependencies?: Maybe<Array<Maybe<EnqueuedScript>>>;
    extra?: Maybe<ScalarsEnums['String']>;
    handle?: Maybe<ScalarsEnums['String']>;
    id: ScalarsEnums['ID'];
    src?: Maybe<ScalarsEnums['String']>;
    version?: Maybe<ScalarsEnums['String']>;
}
export interface WPPageInfo {
    __typename: 'WPPageInfo' | undefined;
    endCursor?: Maybe<ScalarsEnums['String']>;
    hasNextPage: ScalarsEnums['Boolean'];
    hasPreviousPage: ScalarsEnums['Boolean'];
    startCursor?: Maybe<ScalarsEnums['String']>;
}
export interface TermNodeToEnqueuedStylesheetConnection {
    __typename: 'TermNodeToEnqueuedStylesheetConnection' | undefined;
    edges?: Maybe<Array<Maybe<TermNodeToEnqueuedStylesheetConnectionEdge>>>;
    nodes?: Maybe<Array<Maybe<EnqueuedStylesheet>>>;
    pageInfo?: Maybe<WPPageInfo>;
}
export interface TermNodeToEnqueuedStylesheetConnectionEdge {
    __typename: 'TermNodeToEnqueuedStylesheetConnectionEdge' | undefined;
    cursor?: Maybe<ScalarsEnums['String']>;
    node?: Maybe<EnqueuedStylesheet>;
}
export interface EnqueuedStylesheet extends Omit<Node, '__typename'>, Omit<EnqueuedAsset, '__typename'> {
    __typename: 'EnqueuedStylesheet' | undefined;
    args?: Maybe<ScalarsEnums['Boolean']>;
    dependencies?: Maybe<Array<Maybe<EnqueuedScript>>>;
    extra?: Maybe<ScalarsEnums['String']>;
    handle?: Maybe<ScalarsEnums['String']>;
    id: ScalarsEnums['ID'];
    src?: Maybe<ScalarsEnums['String']>;
    version?: Maybe<ScalarsEnums['String']>;
}
export interface DatabaseIdentifier {
    __typename: 'DatabaseIdentifier' | undefined;
    databaseId: ScalarsEnums['Int'];
}
export interface HierarchicalTermNode {
    __typename: 'HierarchicalTermNode' | undefined;
    parentDatabaseId?: Maybe<ScalarsEnums['Int']>;
    parentId?: Maybe<ScalarsEnums['ID']>;
}
export interface MenuItemLinkable {
    __typename: 'MenuItemLinkable' | undefined;
    databaseId: ScalarsEnums['Int'];
    id: ScalarsEnums['ID'];
    uri?: Maybe<ScalarsEnums['String']>;
}
export interface CategoryToAncestorsCategoryConnection {
    __typename: 'CategoryToAncestorsCategoryConnection' | undefined;
    edges?: Maybe<Array<Maybe<CategoryToAncestorsCategoryConnectionEdge>>>;
    nodes?: Maybe<Array<Maybe<Category>>>;
    pageInfo?: Maybe<WPPageInfo>;
}
export interface CategoryToAncestorsCategoryConnectionEdge {
    __typename: 'CategoryToAncestorsCategoryConnectionEdge' | undefined;
    cursor?: Maybe<ScalarsEnums['String']>;
    node?: Maybe<Category>;
}
export interface CategoryToCategoryConnection {
    __typename: 'CategoryToCategoryConnection' | undefined;
    edges?: Maybe<Array<Maybe<CategoryToCategoryConnectionEdge>>>;
    nodes?: Maybe<Array<Maybe<Category>>>;
    pageInfo?: Maybe<WPPageInfo>;
}
export interface CategoryToCategoryConnectionEdge {
    __typename: 'CategoryToCategoryConnectionEdge' | undefined;
    cursor?: Maybe<ScalarsEnums['String']>;
    node?: Maybe<Category>;
}
export interface CategoryToContentNodeConnection {
    __typename: 'CategoryToContentNodeConnection' | undefined;
    edges?: Maybe<Array<Maybe<CategoryToContentNodeConnectionEdge>>>;
    nodes?: Maybe<Array<Maybe<ContentNode>>>;
    pageInfo?: Maybe<WPPageInfo>;
}
export interface CategoryToContentNodeConnectionEdge {
    __typename: 'CategoryToContentNodeConnectionEdge' | undefined;
    cursor?: Maybe<ScalarsEnums['String']>;
    node?: Maybe<ContentNode>;
}
export interface ContentNode {
    __typename: 'ContentNode' | undefined;
    contentType?: Maybe<ContentNodeToContentTypeConnectionEdge>;
    databaseId: ScalarsEnums['Int'];
    date?: Maybe<ScalarsEnums['String']>;
    dateGmt?: Maybe<ScalarsEnums['String']>;
    desiredSlug?: Maybe<ScalarsEnums['String']>;
    editingLockedBy?: Maybe<ContentNodeToEditLockConnectionEdge>;
    enclosure?: Maybe<ScalarsEnums['String']>;
    enqueuedScripts: (args?: {
        first?: Maybe<Scalars['Int']>;
        last?: Maybe<Scalars['Int']>;
        after?: Maybe<Scalars['String']>;
        before?: Maybe<Scalars['String']>;
    }) => Maybe<ContentNodeToEnqueuedScriptConnection>;
    enqueuedStylesheets: (args?: {
        first?: Maybe<Scalars['Int']>;
        last?: Maybe<Scalars['Int']>;
        after?: Maybe<Scalars['String']>;
        before?: Maybe<Scalars['String']>;
    }) => Maybe<ContentNodeToEnqueuedStylesheetConnection>;
    guid?: Maybe<ScalarsEnums['String']>;
    id: ScalarsEnums['ID'];
    isContentNode: ScalarsEnums['Boolean'];
    isPreview?: Maybe<ScalarsEnums['Boolean']>;
    isRestricted?: Maybe<ScalarsEnums['Boolean']>;
    isTermNode: ScalarsEnums['Boolean'];
    lastEditedBy?: Maybe<ContentNodeToEditLastConnectionEdge>;
    link?: Maybe<ScalarsEnums['String']>;
    modified?: Maybe<ScalarsEnums['String']>;
    modifiedGmt?: Maybe<ScalarsEnums['String']>;
    previewRevisionDatabaseId?: Maybe<ScalarsEnums['Int']>;
    previewRevisionId?: Maybe<ScalarsEnums['ID']>;
    slug?: Maybe<ScalarsEnums['String']>;
    status?: Maybe<ScalarsEnums['String']>;
    template?: Maybe<ContentTemplate>;
    uri?: Maybe<ScalarsEnums['String']>;
}
export interface ContentNodeToContentTypeConnectionEdge {
    __typename: 'ContentNodeToContentTypeConnectionEdge' | undefined;
    node?: Maybe<ContentType>;
}
export interface ContentType extends Omit<Node, '__typename'>, Omit<UniformResourceIdentifiable, '__typename'> {
    __typename: 'ContentType' | undefined;
    canExport?: Maybe<ScalarsEnums['Boolean']>;
    connectedTaxonomies: (args?: {
        first?: Maybe<Scalars['Int']>;
        last?: Maybe<Scalars['Int']>;
        after?: Maybe<Scalars['String']>;
        before?: Maybe<Scalars['String']>;
    }) => Maybe<ContentTypeToTaxonomyConnection>;
    contentNodes: (args?: {
        first?: Maybe<Scalars['Int']>;
        last?: Maybe<Scalars['Int']>;
        after?: Maybe<Scalars['String']>;
        before?: Maybe<Scalars['String']>;
        where?: Maybe<ContentTypeToContentNodeConnectionWhereArgs>;
    }) => Maybe<ContentTypeToContentNodeConnection>;
    deleteWithUser?: Maybe<ScalarsEnums['Boolean']>;
    description?: Maybe<ScalarsEnums['String']>;
    excludeFromSearch?: Maybe<ScalarsEnums['Boolean']>;
    graphqlPluralName?: Maybe<ScalarsEnums['String']>;
    graphqlSingleName?: Maybe<ScalarsEnums['String']>;
    hasArchive?: Maybe<ScalarsEnums['Boolean']>;
    hierarchical?: Maybe<ScalarsEnums['Boolean']>;
    id: ScalarsEnums['ID'];
    isContentNode: ScalarsEnums['Boolean'];
    isFrontPage: ScalarsEnums['Boolean'];
    isPostsPage: ScalarsEnums['Boolean'];
    isRestricted?: Maybe<ScalarsEnums['Boolean']>;
    isTermNode: ScalarsEnums['Boolean'];
    label?: Maybe<ScalarsEnums['String']>;
    labels?: Maybe<PostTypeLabelDetails>;
    menuIcon?: Maybe<ScalarsEnums['String']>;
    menuPosition?: Maybe<ScalarsEnums['Int']>;
    name?: Maybe<ScalarsEnums['String']>;
    public?: Maybe<ScalarsEnums['Boolean']>;
    publiclyQueryable?: Maybe<ScalarsEnums['Boolean']>;
    restBase?: Maybe<ScalarsEnums['String']>;
    restControllerClass?: Maybe<ScalarsEnums['String']>;
    showInAdminBar?: Maybe<ScalarsEnums['Boolean']>;
    showInGraphql?: Maybe<ScalarsEnums['Boolean']>;
    showInMenu?: Maybe<ScalarsEnums['Boolean']>;
    showInNavMenus?: Maybe<ScalarsEnums['Boolean']>;
    showInRest?: Maybe<ScalarsEnums['Boolean']>;
    showUi?: Maybe<ScalarsEnums['Boolean']>;
    uri?: Maybe<ScalarsEnums['String']>;
}
export interface ContentTypeToTaxonomyConnection {
    __typename: 'ContentTypeToTaxonomyConnection' | undefined;
    edges?: Maybe<Array<Maybe<ContentTypeToTaxonomyConnectionEdge>>>;
    nodes?: Maybe<Array<Maybe<Taxonomy>>>;
    pageInfo?: Maybe<WPPageInfo>;
}
export interface ContentTypeToTaxonomyConnectionEdge {
    __typename: 'ContentTypeToTaxonomyConnectionEdge' | undefined;
    cursor?: Maybe<ScalarsEnums['String']>;
    node?: Maybe<Taxonomy>;
}
export interface Taxonomy extends Omit<Node, '__typename'> {
    __typename: 'Taxonomy' | undefined;
    connectedContentTypes: (args?: {
        first?: Maybe<Scalars['Int']>;
        last?: Maybe<Scalars['Int']>;
        after?: Maybe<Scalars['String']>;
        before?: Maybe<Scalars['String']>;
    }) => Maybe<TaxonomyToContentTypeConnection>;
    description?: Maybe<ScalarsEnums['String']>;
    graphqlPluralName?: Maybe<ScalarsEnums['String']>;
    graphqlSingleName?: Maybe<ScalarsEnums['String']>;
    hierarchical?: Maybe<ScalarsEnums['Boolean']>;
    id: ScalarsEnums['ID'];
    isRestricted?: Maybe<ScalarsEnums['Boolean']>;
    label?: Maybe<ScalarsEnums['String']>;
    name?: Maybe<ScalarsEnums['String']>;
    public?: Maybe<ScalarsEnums['Boolean']>;
    restBase?: Maybe<ScalarsEnums['String']>;
    restControllerClass?: Maybe<ScalarsEnums['String']>;
    showCloud?: Maybe<ScalarsEnums['Boolean']>;
    showInAdminColumn?: Maybe<ScalarsEnums['Boolean']>;
    showInGraphql?: Maybe<ScalarsEnums['Boolean']>;
    showInMenu?: Maybe<ScalarsEnums['Boolean']>;
    showInNavMenus?: Maybe<ScalarsEnums['Boolean']>;
    showInQuickEdit?: Maybe<ScalarsEnums['Boolean']>;
    showInRest?: Maybe<ScalarsEnums['Boolean']>;
    showUi?: Maybe<ScalarsEnums['Boolean']>;
}
export interface TaxonomyToContentTypeConnection {
    __typename: 'TaxonomyToContentTypeConnection' | undefined;
    edges?: Maybe<Array<Maybe<TaxonomyToContentTypeConnectionEdge>>>;
    nodes?: Maybe<Array<Maybe<ContentType>>>;
    pageInfo?: Maybe<WPPageInfo>;
}
export interface TaxonomyToContentTypeConnectionEdge {
    __typename: 'TaxonomyToContentTypeConnectionEdge' | undefined;
    cursor?: Maybe<ScalarsEnums['String']>;
    node?: Maybe<ContentType>;
}
export interface ContentTypeToContentNodeConnection {
    __typename: 'ContentTypeToContentNodeConnection' | undefined;
    edges?: Maybe<Array<Maybe<ContentTypeToContentNodeConnectionEdge>>>;
    nodes?: Maybe<Array<Maybe<ContentNode>>>;
    pageInfo?: Maybe<WPPageInfo>;
}
export interface ContentTypeToContentNodeConnectionEdge {
    __typename: 'ContentTypeToContentNodeConnectionEdge' | undefined;
    cursor?: Maybe<ScalarsEnums['String']>;
    node?: Maybe<ContentNode>;
}
export interface PostTypeLabelDetails {
    __typename: 'PostTypeLabelDetails' | undefined;
    addNew?: Maybe<ScalarsEnums['String']>;
    addNewItem?: Maybe<ScalarsEnums['String']>;
    allItems?: Maybe<ScalarsEnums['String']>;
    archives?: Maybe<ScalarsEnums['String']>;
    attributes?: Maybe<ScalarsEnums['String']>;
    editItem?: Maybe<ScalarsEnums['String']>;
    featuredImage?: Maybe<ScalarsEnums['String']>;
    filterItemsList?: Maybe<ScalarsEnums['String']>;
    insertIntoItem?: Maybe<ScalarsEnums['String']>;
    itemsList?: Maybe<ScalarsEnums['String']>;
    itemsListNavigation?: Maybe<ScalarsEnums['String']>;
    menuName?: Maybe<ScalarsEnums['String']>;
    name?: Maybe<ScalarsEnums['String']>;
    newItem?: Maybe<ScalarsEnums['String']>;
    notFound?: Maybe<ScalarsEnums['String']>;
    notFoundInTrash?: Maybe<ScalarsEnums['String']>;
    parentItemColon?: Maybe<ScalarsEnums['String']>;
    removeFeaturedImage?: Maybe<ScalarsEnums['String']>;
    searchItems?: Maybe<ScalarsEnums['String']>;
    setFeaturedImage?: Maybe<ScalarsEnums['String']>;
    singularName?: Maybe<ScalarsEnums['String']>;
    uploadedToThisItem?: Maybe<ScalarsEnums['String']>;
    useFeaturedImage?: Maybe<ScalarsEnums['String']>;
    viewItem?: Maybe<ScalarsEnums['String']>;
    viewItems?: Maybe<ScalarsEnums['String']>;
}
export interface ContentNodeToEditLockConnectionEdge {
    __typename: 'ContentNodeToEditLockConnectionEdge' | undefined;
    lockTimestamp?: Maybe<ScalarsEnums['String']>;
    node?: Maybe<User>;
}
export interface User extends Omit<Node, '__typename'>, Omit<UniformResourceIdentifiable, '__typename'>, Omit<Commenter, '__typename'>, Omit<DatabaseIdentifier, '__typename'> {
    __typename: 'User' | undefined;
    avatar: (args?: {
        size?: Maybe<Scalars['Int']>;
        forceDefault?: Maybe<Scalars['Boolean']>;
        rating?: Maybe<AvatarRatingEnum>;
    }) => Maybe<Avatar>;
    capKey?: Maybe<ScalarsEnums['String']>;
    capabilities?: Maybe<Array<Maybe<ScalarsEnums['String']>>>;
    comments: (args?: {
        first?: Maybe<Scalars['Int']>;
        last?: Maybe<Scalars['Int']>;
        after?: Maybe<Scalars['String']>;
        before?: Maybe<Scalars['String']>;
        where?: Maybe<UserToCommentConnectionWhereArgs>;
    }) => Maybe<UserToCommentConnection>;
    databaseId: ScalarsEnums['Int'];
    description?: Maybe<ScalarsEnums['String']>;
    email?: Maybe<ScalarsEnums['String']>;
    enqueuedScripts: (args?: {
        first?: Maybe<Scalars['Int']>;
        last?: Maybe<Scalars['Int']>;
        after?: Maybe<Scalars['String']>;
        before?: Maybe<Scalars['String']>;
    }) => Maybe<UserToEnqueuedScriptConnection>;
    enqueuedStylesheets: (args?: {
        first?: Maybe<Scalars['Int']>;
        last?: Maybe<Scalars['Int']>;
        after?: Maybe<Scalars['String']>;
        before?: Maybe<Scalars['String']>;
    }) => Maybe<UserToEnqueuedStylesheetConnection>;
    extraCapabilities?: Maybe<Array<Maybe<ScalarsEnums['String']>>>;
    firstName?: Maybe<ScalarsEnums['String']>;
    id: ScalarsEnums['ID'];
    isContentNode: ScalarsEnums['Boolean'];
    isRestricted?: Maybe<ScalarsEnums['Boolean']>;
    isTermNode: ScalarsEnums['Boolean'];
    lastName?: Maybe<ScalarsEnums['String']>;
    locale?: Maybe<ScalarsEnums['String']>;
    mediaItems: (args?: {
        first?: Maybe<Scalars['Int']>;
        last?: Maybe<Scalars['Int']>;
        after?: Maybe<Scalars['String']>;
        before?: Maybe<Scalars['String']>;
        where?: Maybe<UserToMediaItemConnectionWhereArgs>;
    }) => Maybe<UserToMediaItemConnection>;
    name?: Maybe<ScalarsEnums['String']>;
    nicename?: Maybe<ScalarsEnums['String']>;
    nickname?: Maybe<ScalarsEnums['String']>;
    pages: (args?: {
        first?: Maybe<Scalars['Int']>;
        last?: Maybe<Scalars['Int']>;
        after?: Maybe<Scalars['String']>;
        before?: Maybe<Scalars['String']>;
        where?: Maybe<UserToPageConnectionWhereArgs>;
    }) => Maybe<UserToPageConnection>;
    posts: (args?: {
        first?: Maybe<Scalars['Int']>;
        last?: Maybe<Scalars['Int']>;
        after?: Maybe<Scalars['String']>;
        before?: Maybe<Scalars['String']>;
        where?: Maybe<UserToPostConnectionWhereArgs>;
    }) => Maybe<UserToPostConnection>;
    registeredDate?: Maybe<ScalarsEnums['String']>;
    revisions: (args?: {
        first?: Maybe<Scalars['Int']>;
        last?: Maybe<Scalars['Int']>;
        after?: Maybe<Scalars['String']>;
        before?: Maybe<Scalars['String']>;
        where?: Maybe<UserToContentRevisionUnionConnectionWhereArgs>;
    }) => Maybe<UserToContentRevisionUnionConnection>;
    roles: (args?: {
        first?: Maybe<Scalars['Int']>;
        last?: Maybe<Scalars['Int']>;
        after?: Maybe<Scalars['String']>;
        before?: Maybe<Scalars['String']>;
    }) => Maybe<UserToUserRoleConnection>;
    slug?: Maybe<ScalarsEnums['String']>;
    uri?: Maybe<ScalarsEnums['String']>;
    url?: Maybe<ScalarsEnums['String']>;
    userId?: Maybe<ScalarsEnums['Int']>;
    username?: Maybe<ScalarsEnums['String']>;
}
export interface Commenter {
    __typename: 'Commenter' | undefined;
    databaseId: ScalarsEnums['Int'];
    email?: Maybe<ScalarsEnums['String']>;
    id: ScalarsEnums['ID'];
    isRestricted?: Maybe<ScalarsEnums['Boolean']>;
    name?: Maybe<ScalarsEnums['String']>;
    url?: Maybe<ScalarsEnums['String']>;
}
export interface Avatar {
    __typename: 'Avatar' | undefined;
    default?: Maybe<ScalarsEnums['String']>;
    extraAttr?: Maybe<ScalarsEnums['String']>;
    forceDefault?: Maybe<ScalarsEnums['Boolean']>;
    foundAvatar?: Maybe<ScalarsEnums['Boolean']>;
    height?: Maybe<ScalarsEnums['Int']>;
    isRestricted?: Maybe<ScalarsEnums['Boolean']>;
    rating?: Maybe<ScalarsEnums['String']>;
    scheme?: Maybe<ScalarsEnums['String']>;
    size?: Maybe<ScalarsEnums['Int']>;
    url?: Maybe<ScalarsEnums['String']>;
    width?: Maybe<ScalarsEnums['Int']>;
}
export interface UserToCommentConnection {
    __typename: 'UserToCommentConnection' | undefined;
    edges?: Maybe<Array<Maybe<UserToCommentConnectionEdge>>>;
    nodes?: Maybe<Array<Maybe<Comment>>>;
    pageInfo?: Maybe<WPPageInfo>;
}
export interface UserToCommentConnectionEdge {
    __typename: 'UserToCommentConnectionEdge' | undefined;
    cursor?: Maybe<ScalarsEnums['String']>;
    node?: Maybe<Comment>;
}
export interface Comment extends Omit<Node, '__typename'>, Omit<DatabaseIdentifier, '__typename'> {
    __typename: 'Comment' | undefined;
    agent?: Maybe<ScalarsEnums['String']>;
    approved?: Maybe<ScalarsEnums['Boolean']>;
    author?: Maybe<CommentToCommenterConnectionEdge>;
    authorIp?: Maybe<ScalarsEnums['String']>;
    commentId?: Maybe<ScalarsEnums['Int']>;
    commentedOn?: Maybe<CommentToContentNodeConnectionEdge>;
    content: (args?: {
        format?: Maybe<PostObjectFieldFormatEnum>;
    }) => Maybe<ScalarsEnums['String']>;
    databaseId: ScalarsEnums['Int'];
    date?: Maybe<ScalarsEnums['String']>;
    dateGmt?: Maybe<ScalarsEnums['String']>;
    id: ScalarsEnums['ID'];
    isRestricted?: Maybe<ScalarsEnums['Boolean']>;
    karma?: Maybe<ScalarsEnums['Int']>;
    parent: (args?: {
        where?: Maybe<CommentToParentCommentConnectionWhereArgs>;
    }) => Maybe<CommentToParentCommentConnectionEdge>;
    parentDatabaseId?: Maybe<ScalarsEnums['Int']>;
    parentId?: Maybe<ScalarsEnums['ID']>;
    replies: (args?: {
        first?: Maybe<Scalars['Int']>;
        last?: Maybe<Scalars['Int']>;
        after?: Maybe<Scalars['String']>;
        before?: Maybe<Scalars['String']>;
        where?: Maybe<CommentToCommentConnectionWhereArgs>;
    }) => Maybe<CommentToCommentConnection>;
    type?: Maybe<ScalarsEnums['String']>;
}
export interface CommentToCommenterConnectionEdge {
    __typename: 'CommentToCommenterConnectionEdge' | undefined;
    node?: Maybe<Commenter>;
}
export interface CommentToContentNodeConnectionEdge {
    __typename: 'CommentToContentNodeConnectionEdge' | undefined;
    node?: Maybe<ContentNode>;
}
export interface CommentToParentCommentConnectionEdge {
    __typename: 'CommentToParentCommentConnectionEdge' | undefined;
    node?: Maybe<Comment>;
}
export interface CommentToCommentConnection {
    __typename: 'CommentToCommentConnection' | undefined;
    edges?: Maybe<Array<Maybe<CommentToCommentConnectionEdge>>>;
    nodes?: Maybe<Array<Maybe<Comment>>>;
    pageInfo?: Maybe<WPPageInfo>;
}
export interface CommentToCommentConnectionEdge {
    __typename: 'CommentToCommentConnectionEdge' | undefined;
    cursor?: Maybe<ScalarsEnums['String']>;
    node?: Maybe<Comment>;
}
export interface UserToEnqueuedScriptConnection {
    __typename: 'UserToEnqueuedScriptConnection' | undefined;
    edges?: Maybe<Array<Maybe<UserToEnqueuedScriptConnectionEdge>>>;
    nodes?: Maybe<Array<Maybe<EnqueuedScript>>>;
    pageInfo?: Maybe<WPPageInfo>;
}
export interface UserToEnqueuedScriptConnectionEdge {
    __typename: 'UserToEnqueuedScriptConnectionEdge' | undefined;
    cursor?: Maybe<ScalarsEnums['String']>;
    node?: Maybe<EnqueuedScript>;
}
export interface UserToEnqueuedStylesheetConnection {
    __typename: 'UserToEnqueuedStylesheetConnection' | undefined;
    edges?: Maybe<Array<Maybe<UserToEnqueuedStylesheetConnectionEdge>>>;
    nodes?: Maybe<Array<Maybe<EnqueuedStylesheet>>>;
    pageInfo?: Maybe<WPPageInfo>;
}
export interface UserToEnqueuedStylesheetConnectionEdge {
    __typename: 'UserToEnqueuedStylesheetConnectionEdge' | undefined;
    cursor?: Maybe<ScalarsEnums['String']>;
    node?: Maybe<EnqueuedStylesheet>;
}
export interface UserToMediaItemConnection {
    __typename: 'UserToMediaItemConnection' | undefined;
    edges?: Maybe<Array<Maybe<UserToMediaItemConnectionEdge>>>;
    nodes?: Maybe<Array<Maybe<MediaItem>>>;
    pageInfo?: Maybe<WPPageInfo>;
}
export interface UserToMediaItemConnectionEdge {
    __typename: 'UserToMediaItemConnectionEdge' | undefined;
    cursor?: Maybe<ScalarsEnums['String']>;
    node?: Maybe<MediaItem>;
}
export interface MediaItem extends Omit<Node, '__typename'>, Omit<ContentNode, '__typename'>, Omit<UniformResourceIdentifiable, '__typename'>, Omit<DatabaseIdentifier, '__typename'>, Omit<NodeWithTemplate, '__typename'>, Omit<NodeWithTitle, '__typename'>, Omit<NodeWithAuthor, '__typename'>, Omit<NodeWithComments, '__typename'>, Omit<HierarchicalContentNode, '__typename'> {
    __typename: 'MediaItem' | undefined;
    altText?: Maybe<ScalarsEnums['String']>;
    ancestors: (args?: {
        first?: Maybe<Scalars['Int']>;
        last?: Maybe<Scalars['Int']>;
        after?: Maybe<Scalars['String']>;
        before?: Maybe<Scalars['String']>;
        where?: Maybe<HierarchicalContentNodeToContentNodeAncestorsConnectionWhereArgs>;
    }) => Maybe<HierarchicalContentNodeToContentNodeAncestorsConnection>;
    author?: Maybe<NodeWithAuthorToUserConnectionEdge>;
    authorDatabaseId?: Maybe<ScalarsEnums['Int']>;
    authorId?: Maybe<ScalarsEnums['ID']>;
    caption: (args?: {
        format?: Maybe<PostObjectFieldFormatEnum>;
    }) => Maybe<ScalarsEnums['String']>;
    children: (args?: {
        first?: Maybe<Scalars['Int']>;
        last?: Maybe<Scalars['Int']>;
        after?: Maybe<Scalars['String']>;
        before?: Maybe<Scalars['String']>;
        where?: Maybe<HierarchicalContentNodeToContentNodeChildrenConnectionWhereArgs>;
    }) => Maybe<HierarchicalContentNodeToContentNodeChildrenConnection>;
    commentCount?: Maybe<ScalarsEnums['Int']>;
    commentStatus?: Maybe<ScalarsEnums['String']>;
    comments: (args?: {
        first?: Maybe<Scalars['Int']>;
        last?: Maybe<Scalars['Int']>;
        after?: Maybe<Scalars['String']>;
        before?: Maybe<Scalars['String']>;
        where?: Maybe<MediaItemToCommentConnectionWhereArgs>;
    }) => Maybe<MediaItemToCommentConnection>;
    contentType?: Maybe<ContentNodeToContentTypeConnectionEdge>;
    databaseId: ScalarsEnums['Int'];
    date?: Maybe<ScalarsEnums['String']>;
    dateGmt?: Maybe<ScalarsEnums['String']>;
    description: (args?: {
        format?: Maybe<PostObjectFieldFormatEnum>;
    }) => Maybe<ScalarsEnums['String']>;
    desiredSlug?: Maybe<ScalarsEnums['String']>;
    editingLockedBy?: Maybe<ContentNodeToEditLockConnectionEdge>;
    enclosure?: Maybe<ScalarsEnums['String']>;
    enqueuedScripts: (args?: {
        first?: Maybe<Scalars['Int']>;
        last?: Maybe<Scalars['Int']>;
        after?: Maybe<Scalars['String']>;
        before?: Maybe<Scalars['String']>;
    }) => Maybe<ContentNodeToEnqueuedScriptConnection>;
    enqueuedStylesheets: (args?: {
        first?: Maybe<Scalars['Int']>;
        last?: Maybe<Scalars['Int']>;
        after?: Maybe<Scalars['String']>;
        before?: Maybe<Scalars['String']>;
    }) => Maybe<ContentNodeToEnqueuedStylesheetConnection>;
    fileSize: (args?: {
        size?: Maybe<MediaItemSizeEnum>;
    }) => Maybe<ScalarsEnums['Int']>;
    guid?: Maybe<ScalarsEnums['String']>;
    id: ScalarsEnums['ID'];
    isContentNode: ScalarsEnums['Boolean'];
    isPreview?: Maybe<ScalarsEnums['Boolean']>;
    isRestricted?: Maybe<ScalarsEnums['Boolean']>;
    isTermNode: ScalarsEnums['Boolean'];
    lastEditedBy?: Maybe<ContentNodeToEditLastConnectionEdge>;
    link?: Maybe<ScalarsEnums['String']>;
    mediaDetails?: Maybe<MediaDetails>;
    mediaItemId: ScalarsEnums['Int'];
    mediaItemUrl?: Maybe<ScalarsEnums['String']>;
    mediaType?: Maybe<ScalarsEnums['String']>;
    mimeType?: Maybe<ScalarsEnums['String']>;
    modified?: Maybe<ScalarsEnums['String']>;
    modifiedGmt?: Maybe<ScalarsEnums['String']>;
    parent?: Maybe<HierarchicalContentNodeToParentContentNodeConnectionEdge>;
    parentDatabaseId?: Maybe<ScalarsEnums['Int']>;
    parentId?: Maybe<ScalarsEnums['ID']>;
    previewRevisionDatabaseId?: Maybe<ScalarsEnums['Int']>;
    previewRevisionId?: Maybe<ScalarsEnums['ID']>;
    sizes: (args?: {
        size?: Maybe<MediaItemSizeEnum>;
    }) => Maybe<ScalarsEnums['String']>;
    slug?: Maybe<ScalarsEnums['String']>;
    sourceUrl: (args?: {
        size?: Maybe<MediaItemSizeEnum>;
    }) => Maybe<ScalarsEnums['String']>;
    srcSet: (args?: {
        size?: Maybe<MediaItemSizeEnum>;
    }) => Maybe<ScalarsEnums['String']>;
    status?: Maybe<ScalarsEnums['String']>;
    template?: Maybe<ContentTemplate>;
    title: (args?: {
        format?: Maybe<PostObjectFieldFormatEnum>;
    }) => Maybe<ScalarsEnums['String']>;
    uri?: Maybe<ScalarsEnums['String']>;
}
export interface NodeWithTemplate {
    __typename: 'NodeWithTemplate' | undefined;
    template?: Maybe<ContentTemplate>;
}
export interface ContentTemplate {
    __typename: 'ContentTemplate' | undefined;
    templateName?: Maybe<ScalarsEnums['String']>;
}
export interface NodeWithTitle {
    __typename: 'NodeWithTitle' | undefined;
    title: (args?: {
        format?: Maybe<PostObjectFieldFormatEnum>;
    }) => Maybe<ScalarsEnums['String']>;
}
export interface NodeWithAuthor {
    __typename: 'NodeWithAuthor' | undefined;
    author?: Maybe<NodeWithAuthorToUserConnectionEdge>;
    authorDatabaseId?: Maybe<ScalarsEnums['Int']>;
    authorId?: Maybe<ScalarsEnums['ID']>;
}
export interface NodeWithAuthorToUserConnectionEdge {
    __typename: 'NodeWithAuthorToUserConnectionEdge' | undefined;
    node?: Maybe<User>;
}
export interface NodeWithComments {
    __typename: 'NodeWithComments' | undefined;
    commentCount?: Maybe<ScalarsEnums['Int']>;
    commentStatus?: Maybe<ScalarsEnums['String']>;
}
export interface HierarchicalContentNode {
    __typename: 'HierarchicalContentNode' | undefined;
    ancestors: (args?: {
        first?: Maybe<Scalars['Int']>;
        last?: Maybe<Scalars['Int']>;
        after?: Maybe<Scalars['String']>;
        before?: Maybe<Scalars['String']>;
        where?: Maybe<HierarchicalContentNodeToContentNodeAncestorsConnectionWhereArgs>;
    }) => Maybe<HierarchicalContentNodeToContentNodeAncestorsConnection>;
    children: (args?: {
        first?: Maybe<Scalars['Int']>;
        last?: Maybe<Scalars['Int']>;
        after?: Maybe<Scalars['String']>;
        before?: Maybe<Scalars['String']>;
        where?: Maybe<HierarchicalContentNodeToContentNodeChildrenConnectionWhereArgs>;
    }) => Maybe<HierarchicalContentNodeToContentNodeChildrenConnection>;
    parent?: Maybe<HierarchicalContentNodeToParentContentNodeConnectionEdge>;
    parentDatabaseId?: Maybe<ScalarsEnums['Int']>;
    parentId?: Maybe<ScalarsEnums['ID']>;
}
export interface HierarchicalContentNodeToContentNodeAncestorsConnection {
    __typename: 'HierarchicalContentNodeToContentNodeAncestorsConnection' | undefined;
    edges?: Maybe<Array<Maybe<HierarchicalContentNodeToContentNodeAncestorsConnectionEdge>>>;
    nodes?: Maybe<Array<Maybe<ContentNode>>>;
    pageInfo?: Maybe<WPPageInfo>;
}
export interface HierarchicalContentNodeToContentNodeAncestorsConnectionEdge {
    __typename: 'HierarchicalContentNodeToContentNodeAncestorsConnectionEdge' | undefined;
    cursor?: Maybe<ScalarsEnums['String']>;
    node?: Maybe<ContentNode>;
}
export interface HierarchicalContentNodeToContentNodeChildrenConnection {
    __typename: 'HierarchicalContentNodeToContentNodeChildrenConnection' | undefined;
    edges?: Maybe<Array<Maybe<HierarchicalContentNodeToContentNodeChildrenConnectionEdge>>>;
    nodes?: Maybe<Array<Maybe<ContentNode>>>;
    pageInfo?: Maybe<WPPageInfo>;
}
export interface HierarchicalContentNodeToContentNodeChildrenConnectionEdge {
    __typename: 'HierarchicalContentNodeToContentNodeChildrenConnectionEdge' | undefined;
    cursor?: Maybe<ScalarsEnums['String']>;
    node?: Maybe<ContentNode>;
}
export interface HierarchicalContentNodeToParentContentNodeConnectionEdge {
    __typename: 'HierarchicalContentNodeToParentContentNodeConnectionEdge' | undefined;
    node?: Maybe<ContentNode>;
}
export interface MediaItemToCommentConnection {
    __typename: 'MediaItemToCommentConnection' | undefined;
    edges?: Maybe<Array<Maybe<MediaItemToCommentConnectionEdge>>>;
    nodes?: Maybe<Array<Maybe<Comment>>>;
    pageInfo?: Maybe<WPPageInfo>;
}
export interface MediaItemToCommentConnectionEdge {
    __typename: 'MediaItemToCommentConnectionEdge' | undefined;
    cursor?: Maybe<ScalarsEnums['String']>;
    node?: Maybe<Comment>;
}
export interface ContentNodeToEnqueuedScriptConnection {
    __typename: 'ContentNodeToEnqueuedScriptConnection' | undefined;
    edges?: Maybe<Array<Maybe<ContentNodeToEnqueuedScriptConnectionEdge>>>;
    nodes?: Maybe<Array<Maybe<EnqueuedScript>>>;
    pageInfo?: Maybe<WPPageInfo>;
}
export interface ContentNodeToEnqueuedScriptConnectionEdge {
    __typename: 'ContentNodeToEnqueuedScriptConnectionEdge' | undefined;
    cursor?: Maybe<ScalarsEnums['String']>;
    node?: Maybe<EnqueuedScript>;
}
export interface ContentNodeToEnqueuedStylesheetConnection {
    __typename: 'ContentNodeToEnqueuedStylesheetConnection' | undefined;
    edges?: Maybe<Array<Maybe<ContentNodeToEnqueuedStylesheetConnectionEdge>>>;
    nodes?: Maybe<Array<Maybe<EnqueuedStylesheet>>>;
    pageInfo?: Maybe<WPPageInfo>;
}
export interface ContentNodeToEnqueuedStylesheetConnectionEdge {
    __typename: 'ContentNodeToEnqueuedStylesheetConnectionEdge' | undefined;
    cursor?: Maybe<ScalarsEnums['String']>;
    node?: Maybe<EnqueuedStylesheet>;
}
export interface ContentNodeToEditLastConnectionEdge {
    __typename: 'ContentNodeToEditLastConnectionEdge' | undefined;
    node?: Maybe<User>;
}
export interface MediaDetails {
    __typename: 'MediaDetails' | undefined;
    file?: Maybe<ScalarsEnums['String']>;
    height?: Maybe<ScalarsEnums['Int']>;
    meta?: Maybe<MediaItemMeta>;
    sizes?: Maybe<Array<Maybe<MediaSize>>>;
    width?: Maybe<ScalarsEnums['Int']>;
}
export interface MediaItemMeta {
    __typename: 'MediaItemMeta' | undefined;
    aperture?: Maybe<ScalarsEnums['Float']>;
    camera?: Maybe<ScalarsEnums['String']>;
    caption?: Maybe<ScalarsEnums['String']>;
    copyright?: Maybe<ScalarsEnums['String']>;
    createdTimestamp?: Maybe<ScalarsEnums['Int']>;
    credit?: Maybe<ScalarsEnums['String']>;
    focalLength?: Maybe<ScalarsEnums['Float']>;
    iso?: Maybe<ScalarsEnums['Int']>;
    keywords?: Maybe<Array<Maybe<ScalarsEnums['String']>>>;
    orientation?: Maybe<ScalarsEnums['String']>;
    shutterSpeed?: Maybe<ScalarsEnums['Float']>;
    title?: Maybe<ScalarsEnums['String']>;
}
export interface MediaSize {
    __typename: 'MediaSize' | undefined;
    file?: Maybe<ScalarsEnums['String']>;
    fileSize?: Maybe<ScalarsEnums['Int']>;
    height?: Maybe<ScalarsEnums['String']>;
    mimeType?: Maybe<ScalarsEnums['String']>;
    name?: Maybe<ScalarsEnums['String']>;
    sourceUrl?: Maybe<ScalarsEnums['String']>;
    width?: Maybe<ScalarsEnums['String']>;
}
export interface UserToPageConnection {
    __typename: 'UserToPageConnection' | undefined;
    edges?: Maybe<Array<Maybe<UserToPageConnectionEdge>>>;
    nodes?: Maybe<Array<Maybe<Page>>>;
    pageInfo?: Maybe<WPPageInfo>;
}
export interface UserToPageConnectionEdge {
    __typename: 'UserToPageConnectionEdge' | undefined;
    cursor?: Maybe<ScalarsEnums['String']>;
    node?: Maybe<Page>;
}
export interface Page extends Omit<Node, '__typename'>, Omit<ContentNode, '__typename'>, Omit<UniformResourceIdentifiable, '__typename'>, Omit<DatabaseIdentifier, '__typename'>, Omit<NodeWithTemplate, '__typename'>, Omit<NodeWithTitle, '__typename'>, Omit<NodeWithContentEditor, '__typename'>, Omit<NodeWithAuthor, '__typename'>, Omit<NodeWithFeaturedImage, '__typename'>, Omit<NodeWithComments, '__typename'>, Omit<NodeWithRevisions, '__typename'>, Omit<NodeWithPageAttributes, '__typename'>, Omit<HierarchicalContentNode, '__typename'>, Omit<MenuItemLinkable, '__typename'> {
    __typename: 'Page' | undefined;
    ancestors: (args?: {
        first?: Maybe<Scalars['Int']>;
        last?: Maybe<Scalars['Int']>;
        after?: Maybe<Scalars['String']>;
        before?: Maybe<Scalars['String']>;
        where?: Maybe<HierarchicalContentNodeToContentNodeAncestorsConnectionWhereArgs>;
    }) => Maybe<HierarchicalContentNodeToContentNodeAncestorsConnection>;
    author?: Maybe<NodeWithAuthorToUserConnectionEdge>;
    authorDatabaseId?: Maybe<ScalarsEnums['Int']>;
    authorId?: Maybe<ScalarsEnums['ID']>;
    children: (args?: {
        first?: Maybe<Scalars['Int']>;
        last?: Maybe<Scalars['Int']>;
        after?: Maybe<Scalars['String']>;
        before?: Maybe<Scalars['String']>;
        where?: Maybe<HierarchicalContentNodeToContentNodeChildrenConnectionWhereArgs>;
    }) => Maybe<HierarchicalContentNodeToContentNodeChildrenConnection>;
    commentCount?: Maybe<ScalarsEnums['Int']>;
    commentStatus?: Maybe<ScalarsEnums['String']>;
    comments: (args?: {
        first?: Maybe<Scalars['Int']>;
        last?: Maybe<Scalars['Int']>;
        after?: Maybe<Scalars['String']>;
        before?: Maybe<Scalars['String']>;
        where?: Maybe<PageToCommentConnectionWhereArgs>;
    }) => Maybe<PageToCommentConnection>;
    content: (args?: {
        format?: Maybe<PostObjectFieldFormatEnum>;
    }) => Maybe<ScalarsEnums['String']>;
    contentType?: Maybe<ContentNodeToContentTypeConnectionEdge>;
    databaseId: ScalarsEnums['Int'];
    date?: Maybe<ScalarsEnums['String']>;
    dateGmt?: Maybe<ScalarsEnums['String']>;
    desiredSlug?: Maybe<ScalarsEnums['String']>;
    editingLockedBy?: Maybe<ContentNodeToEditLockConnectionEdge>;
    enclosure?: Maybe<ScalarsEnums['String']>;
    enqueuedScripts: (args?: {
        first?: Maybe<Scalars['Int']>;
        last?: Maybe<Scalars['Int']>;
        after?: Maybe<Scalars['String']>;
        before?: Maybe<Scalars['String']>;
    }) => Maybe<ContentNodeToEnqueuedScriptConnection>;
    enqueuedStylesheets: (args?: {
        first?: Maybe<Scalars['Int']>;
        last?: Maybe<Scalars['Int']>;
        after?: Maybe<Scalars['String']>;
        before?: Maybe<Scalars['String']>;
    }) => Maybe<ContentNodeToEnqueuedStylesheetConnection>;
    featuredImage?: Maybe<NodeWithFeaturedImageToMediaItemConnectionEdge>;
    featuredImageDatabaseId?: Maybe<ScalarsEnums['Int']>;
    featuredImageId?: Maybe<ScalarsEnums['ID']>;
    guid?: Maybe<ScalarsEnums['String']>;
    id: ScalarsEnums['ID'];
    isContentNode: ScalarsEnums['Boolean'];
    isFrontPage: ScalarsEnums['Boolean'];
    isPostsPage: ScalarsEnums['Boolean'];
    isPreview?: Maybe<ScalarsEnums['Boolean']>;
    isPrivacyPage: ScalarsEnums['Boolean'];
    isRestricted?: Maybe<ScalarsEnums['Boolean']>;
    isRevision?: Maybe<ScalarsEnums['Boolean']>;
    isTermNode: ScalarsEnums['Boolean'];
    lastEditedBy?: Maybe<ContentNodeToEditLastConnectionEdge>;
    link?: Maybe<ScalarsEnums['String']>;
    menuOrder?: Maybe<ScalarsEnums['Int']>;
    modified?: Maybe<ScalarsEnums['String']>;
    modifiedGmt?: Maybe<ScalarsEnums['String']>;
    pageId: ScalarsEnums['Int'];
    parent?: Maybe<HierarchicalContentNodeToParentContentNodeConnectionEdge>;
    parentDatabaseId?: Maybe<ScalarsEnums['Int']>;
    parentId?: Maybe<ScalarsEnums['ID']>;
    preview?: Maybe<PageToPreviewConnectionEdge>;
    previewRevisionDatabaseId?: Maybe<ScalarsEnums['Int']>;
    previewRevisionId?: Maybe<ScalarsEnums['ID']>;
    revisionOf?: Maybe<NodeWithRevisionsToContentNodeConnectionEdge>;
    revisions: (args?: {
        first?: Maybe<Scalars['Int']>;
        last?: Maybe<Scalars['Int']>;
        after?: Maybe<Scalars['String']>;
        before?: Maybe<Scalars['String']>;
        where?: Maybe<PageToRevisionConnectionWhereArgs>;
    }) => Maybe<PageToRevisionConnection>;
    slug?: Maybe<ScalarsEnums['String']>;
    status?: Maybe<ScalarsEnums['String']>;
    template?: Maybe<ContentTemplate>;
    title: (args?: {
        format?: Maybe<PostObjectFieldFormatEnum>;
    }) => Maybe<ScalarsEnums['String']>;
    uri?: Maybe<ScalarsEnums['String']>;
}
export interface NodeWithContentEditor {
    __typename: 'NodeWithContentEditor' | undefined;
    content: (args?: {
        format?: Maybe<PostObjectFieldFormatEnum>;
    }) => Maybe<ScalarsEnums['String']>;
}
export interface NodeWithFeaturedImage {
    __typename: 'NodeWithFeaturedImage' | undefined;
    contentType?: Maybe<ContentNodeToContentTypeConnectionEdge>;
    databaseId: ScalarsEnums['Int'];
    date?: Maybe<ScalarsEnums['String']>;
    dateGmt?: Maybe<ScalarsEnums['String']>;
    desiredSlug?: Maybe<ScalarsEnums['String']>;
    editingLockedBy?: Maybe<ContentNodeToEditLockConnectionEdge>;
    enclosure?: Maybe<ScalarsEnums['String']>;
    enqueuedScripts: (args?: {
        first?: Maybe<Scalars['Int']>;
        last?: Maybe<Scalars['Int']>;
        after?: Maybe<Scalars['String']>;
        before?: Maybe<Scalars['String']>;
    }) => Maybe<ContentNodeToEnqueuedScriptConnection>;
    enqueuedStylesheets: (args?: {
        first?: Maybe<Scalars['Int']>;
        last?: Maybe<Scalars['Int']>;
        after?: Maybe<Scalars['String']>;
        before?: Maybe<Scalars['String']>;
    }) => Maybe<ContentNodeToEnqueuedStylesheetConnection>;
    featuredImage?: Maybe<NodeWithFeaturedImageToMediaItemConnectionEdge>;
    featuredImageDatabaseId?: Maybe<ScalarsEnums['Int']>;
    featuredImageId?: Maybe<ScalarsEnums['ID']>;
    guid?: Maybe<ScalarsEnums['String']>;
    id: ScalarsEnums['ID'];
    isContentNode: ScalarsEnums['Boolean'];
    isPreview?: Maybe<ScalarsEnums['Boolean']>;
    isRestricted?: Maybe<ScalarsEnums['Boolean']>;
    isTermNode: ScalarsEnums['Boolean'];
    lastEditedBy?: Maybe<ContentNodeToEditLastConnectionEdge>;
    link?: Maybe<ScalarsEnums['String']>;
    modified?: Maybe<ScalarsEnums['String']>;
    modifiedGmt?: Maybe<ScalarsEnums['String']>;
    previewRevisionDatabaseId?: Maybe<ScalarsEnums['Int']>;
    previewRevisionId?: Maybe<ScalarsEnums['ID']>;
    slug?: Maybe<ScalarsEnums['String']>;
    status?: Maybe<ScalarsEnums['String']>;
    template?: Maybe<ContentTemplate>;
    uri?: Maybe<ScalarsEnums['String']>;
}
export interface NodeWithFeaturedImageToMediaItemConnectionEdge {
    __typename: 'NodeWithFeaturedImageToMediaItemConnectionEdge' | undefined;
    node?: Maybe<MediaItem>;
}
export interface NodeWithRevisions {
    __typename: 'NodeWithRevisions' | undefined;
    isRevision?: Maybe<ScalarsEnums['Boolean']>;
    revisionOf?: Maybe<NodeWithRevisionsToContentNodeConnectionEdge>;
}
export interface NodeWithRevisionsToContentNodeConnectionEdge {
    __typename: 'NodeWithRevisionsToContentNodeConnectionEdge' | undefined;
    node?: Maybe<ContentNode>;
}
export interface NodeWithPageAttributes {
    __typename: 'NodeWithPageAttributes' | undefined;
    menuOrder?: Maybe<ScalarsEnums['Int']>;
}
export interface PageToCommentConnection {
    __typename: 'PageToCommentConnection' | undefined;
    edges?: Maybe<Array<Maybe<PageToCommentConnectionEdge>>>;
    nodes?: Maybe<Array<Maybe<Comment>>>;
    pageInfo?: Maybe<WPPageInfo>;
}
export interface PageToCommentConnectionEdge {
    __typename: 'PageToCommentConnectionEdge' | undefined;
    cursor?: Maybe<ScalarsEnums['String']>;
    node?: Maybe<Comment>;
}
export interface PageToPreviewConnectionEdge {
    __typename: 'PageToPreviewConnectionEdge' | undefined;
    node?: Maybe<Page>;
}
export interface PageToRevisionConnection {
    __typename: 'PageToRevisionConnection' | undefined;
    edges?: Maybe<Array<Maybe<PageToRevisionConnectionEdge>>>;
    nodes?: Maybe<Array<Maybe<Page>>>;
    pageInfo?: Maybe<WPPageInfo>;
}
export interface PageToRevisionConnectionEdge {
    __typename: 'PageToRevisionConnectionEdge' | undefined;
    cursor?: Maybe<ScalarsEnums['String']>;
    node?: Maybe<Page>;
}
export interface UserToPostConnection {
    __typename: 'UserToPostConnection' | undefined;
    edges?: Maybe<Array<Maybe<UserToPostConnectionEdge>>>;
    nodes?: Maybe<Array<Maybe<Post>>>;
    pageInfo?: Maybe<WPPageInfo>;
}
export interface UserToPostConnectionEdge {
    __typename: 'UserToPostConnectionEdge' | undefined;
    cursor?: Maybe<ScalarsEnums['String']>;
    node?: Maybe<Post>;
}
export interface Post extends Omit<Node, '__typename'>, Omit<ContentNode, '__typename'>, Omit<UniformResourceIdentifiable, '__typename'>, Omit<DatabaseIdentifier, '__typename'>, Omit<NodeWithTemplate, '__typename'>, Omit<NodeWithTitle, '__typename'>, Omit<NodeWithContentEditor, '__typename'>, Omit<NodeWithAuthor, '__typename'>, Omit<NodeWithFeaturedImage, '__typename'>, Omit<NodeWithExcerpt, '__typename'>, Omit<NodeWithComments, '__typename'>, Omit<NodeWithTrackbacks, '__typename'>, Omit<NodeWithRevisions, '__typename'>, Omit<MenuItemLinkable, '__typename'> {
    __typename: 'Post' | undefined;
    author?: Maybe<NodeWithAuthorToUserConnectionEdge>;
    authorDatabaseId?: Maybe<ScalarsEnums['Int']>;
    authorId?: Maybe<ScalarsEnums['ID']>;
    categories: (args?: {
        first?: Maybe<Scalars['Int']>;
        last?: Maybe<Scalars['Int']>;
        after?: Maybe<Scalars['String']>;
        before?: Maybe<Scalars['String']>;
        where?: Maybe<PostToCategoryConnectionWhereArgs>;
    }) => Maybe<PostToCategoryConnection>;
    commentCount?: Maybe<ScalarsEnums['Int']>;
    commentStatus?: Maybe<ScalarsEnums['String']>;
    comments: (args?: {
        first?: Maybe<Scalars['Int']>;
        last?: Maybe<Scalars['Int']>;
        after?: Maybe<Scalars['String']>;
        before?: Maybe<Scalars['String']>;
        where?: Maybe<PostToCommentConnectionWhereArgs>;
    }) => Maybe<PostToCommentConnection>;
    content: (args?: {
        format?: Maybe<PostObjectFieldFormatEnum>;
    }) => Maybe<ScalarsEnums['String']>;
    contentType?: Maybe<ContentNodeToContentTypeConnectionEdge>;
    databaseId: ScalarsEnums['Int'];
    date?: Maybe<ScalarsEnums['String']>;
    dateGmt?: Maybe<ScalarsEnums['String']>;
    desiredSlug?: Maybe<ScalarsEnums['String']>;
    editingLockedBy?: Maybe<ContentNodeToEditLockConnectionEdge>;
    enclosure?: Maybe<ScalarsEnums['String']>;
    enqueuedScripts: (args?: {
        first?: Maybe<Scalars['Int']>;
        last?: Maybe<Scalars['Int']>;
        after?: Maybe<Scalars['String']>;
        before?: Maybe<Scalars['String']>;
    }) => Maybe<ContentNodeToEnqueuedScriptConnection>;
    enqueuedStylesheets: (args?: {
        first?: Maybe<Scalars['Int']>;
        last?: Maybe<Scalars['Int']>;
        after?: Maybe<Scalars['String']>;
        before?: Maybe<Scalars['String']>;
    }) => Maybe<ContentNodeToEnqueuedStylesheetConnection>;
    excerpt: (args?: {
        format?: Maybe<PostObjectFieldFormatEnum>;
    }) => Maybe<ScalarsEnums['String']>;
    featuredImage?: Maybe<NodeWithFeaturedImageToMediaItemConnectionEdge>;
    featuredImageDatabaseId?: Maybe<ScalarsEnums['Int']>;
    featuredImageId?: Maybe<ScalarsEnums['ID']>;
    guid?: Maybe<ScalarsEnums['String']>;
    id: ScalarsEnums['ID'];
    isContentNode: ScalarsEnums['Boolean'];
    isPreview?: Maybe<ScalarsEnums['Boolean']>;
    isRestricted?: Maybe<ScalarsEnums['Boolean']>;
    isRevision?: Maybe<ScalarsEnums['Boolean']>;
    isSticky: ScalarsEnums['Boolean'];
    isTermNode: ScalarsEnums['Boolean'];
    lastEditedBy?: Maybe<ContentNodeToEditLastConnectionEdge>;
    link?: Maybe<ScalarsEnums['String']>;
    modified?: Maybe<ScalarsEnums['String']>;
    modifiedGmt?: Maybe<ScalarsEnums['String']>;
    pingStatus?: Maybe<ScalarsEnums['String']>;
    pinged?: Maybe<Array<Maybe<ScalarsEnums['String']>>>;
    postFormats: (args?: {
        first?: Maybe<Scalars['Int']>;
        last?: Maybe<Scalars['Int']>;
        after?: Maybe<Scalars['String']>;
        before?: Maybe<Scalars['String']>;
        where?: Maybe<PostToPostFormatConnectionWhereArgs>;
    }) => Maybe<PostToPostFormatConnection>;
    postId: ScalarsEnums['Int'];
    preview?: Maybe<PostToPreviewConnectionEdge>;
    previewRevisionDatabaseId?: Maybe<ScalarsEnums['Int']>;
    previewRevisionId?: Maybe<ScalarsEnums['ID']>;
    revisionOf?: Maybe<NodeWithRevisionsToContentNodeConnectionEdge>;
    revisions: (args?: {
        first?: Maybe<Scalars['Int']>;
        last?: Maybe<Scalars['Int']>;
        after?: Maybe<Scalars['String']>;
        before?: Maybe<Scalars['String']>;
        where?: Maybe<PostToRevisionConnectionWhereArgs>;
    }) => Maybe<PostToRevisionConnection>;
    slug?: Maybe<ScalarsEnums['String']>;
    status?: Maybe<ScalarsEnums['String']>;
    tags: (args?: {
        first?: Maybe<Scalars['Int']>;
        last?: Maybe<Scalars['Int']>;
        after?: Maybe<Scalars['String']>;
        before?: Maybe<Scalars['String']>;
        where?: Maybe<PostToTagConnectionWhereArgs>;
    }) => Maybe<PostToTagConnection>;
    template?: Maybe<ContentTemplate>;
    terms: (args?: {
        first?: Maybe<Scalars['Int']>;
        last?: Maybe<Scalars['Int']>;
        after?: Maybe<Scalars['String']>;
        before?: Maybe<Scalars['String']>;
        where?: Maybe<PostToTermNodeConnectionWhereArgs>;
    }) => Maybe<PostToTermNodeConnection>;
    title: (args?: {
        format?: Maybe<PostObjectFieldFormatEnum>;
    }) => Maybe<ScalarsEnums['String']>;
    toPing?: Maybe<Array<Maybe<ScalarsEnums['String']>>>;
    uri?: Maybe<ScalarsEnums['String']>;
}
export interface NodeWithExcerpt {
    __typename: 'NodeWithExcerpt' | undefined;
    excerpt: (args?: {
        format?: Maybe<PostObjectFieldFormatEnum>;
    }) => Maybe<ScalarsEnums['String']>;
}
export interface NodeWithTrackbacks {
    __typename: 'NodeWithTrackbacks' | undefined;
    pingStatus?: Maybe<ScalarsEnums['String']>;
    pinged?: Maybe<Array<Maybe<ScalarsEnums['String']>>>;
    toPing?: Maybe<Array<Maybe<ScalarsEnums['String']>>>;
}
export interface PostToCategoryConnection {
    __typename: 'PostToCategoryConnection' | undefined;
    edges?: Maybe<Array<Maybe<PostToCategoryConnectionEdge>>>;
    nodes?: Maybe<Array<Maybe<Category>>>;
    pageInfo?: Maybe<WPPageInfo>;
}
export interface PostToCategoryConnectionEdge {
    __typename: 'PostToCategoryConnectionEdge' | undefined;
    cursor?: Maybe<ScalarsEnums['String']>;
    node?: Maybe<Category>;
}
export interface PostToCommentConnection {
    __typename: 'PostToCommentConnection' | undefined;
    edges?: Maybe<Array<Maybe<PostToCommentConnectionEdge>>>;
    nodes?: Maybe<Array<Maybe<Comment>>>;
    pageInfo?: Maybe<WPPageInfo>;
}
export interface PostToCommentConnectionEdge {
    __typename: 'PostToCommentConnectionEdge' | undefined;
    cursor?: Maybe<ScalarsEnums['String']>;
    node?: Maybe<Comment>;
}
export interface PostToPostFormatConnection {
    __typename: 'PostToPostFormatConnection' | undefined;
    edges?: Maybe<Array<Maybe<PostToPostFormatConnectionEdge>>>;
    nodes?: Maybe<Array<Maybe<PostFormat>>>;
    pageInfo?: Maybe<WPPageInfo>;
}
export interface PostToPostFormatConnectionEdge {
    __typename: 'PostToPostFormatConnectionEdge' | undefined;
    cursor?: Maybe<ScalarsEnums['String']>;
    node?: Maybe<PostFormat>;
}
export interface PostFormat extends Omit<Node, '__typename'>, Omit<TermNode, '__typename'>, Omit<UniformResourceIdentifiable, '__typename'>, Omit<DatabaseIdentifier, '__typename'>, Omit<MenuItemLinkable, '__typename'> {
    __typename: 'PostFormat' | undefined;
    contentNodes: (args?: {
        first?: Maybe<Scalars['Int']>;
        last?: Maybe<Scalars['Int']>;
        after?: Maybe<Scalars['String']>;
        before?: Maybe<Scalars['String']>;
        where?: Maybe<PostFormatToContentNodeConnectionWhereArgs>;
    }) => Maybe<PostFormatToContentNodeConnection>;
    count?: Maybe<ScalarsEnums['Int']>;
    databaseId: ScalarsEnums['Int'];
    description?: Maybe<ScalarsEnums['String']>;
    enqueuedScripts: (args?: {
        first?: Maybe<Scalars['Int']>;
        last?: Maybe<Scalars['Int']>;
        after?: Maybe<Scalars['String']>;
        before?: Maybe<Scalars['String']>;
    }) => Maybe<TermNodeToEnqueuedScriptConnection>;
    enqueuedStylesheets: (args?: {
        first?: Maybe<Scalars['Int']>;
        last?: Maybe<Scalars['Int']>;
        after?: Maybe<Scalars['String']>;
        before?: Maybe<Scalars['String']>;
    }) => Maybe<TermNodeToEnqueuedStylesheetConnection>;
    id: ScalarsEnums['ID'];
    isContentNode: ScalarsEnums['Boolean'];
    isRestricted?: Maybe<ScalarsEnums['Boolean']>;
    isTermNode: ScalarsEnums['Boolean'];
    link?: Maybe<ScalarsEnums['String']>;
    name?: Maybe<ScalarsEnums['String']>;
    postFormatId?: Maybe<ScalarsEnums['Int']>;
    posts: (args?: {
        first?: Maybe<Scalars['Int']>;
        last?: Maybe<Scalars['Int']>;
        after?: Maybe<Scalars['String']>;
        before?: Maybe<Scalars['String']>;
        where?: Maybe<PostFormatToPostConnectionWhereArgs>;
    }) => Maybe<PostFormatToPostConnection>;
    slug?: Maybe<ScalarsEnums['String']>;
    taxonomy?: Maybe<PostFormatToTaxonomyConnectionEdge>;
    termGroupId?: Maybe<ScalarsEnums['Int']>;
    termTaxonomyId?: Maybe<ScalarsEnums['Int']>;
    uri?: Maybe<ScalarsEnums['String']>;
}
export interface PostFormatToContentNodeConnection {
    __typename: 'PostFormatToContentNodeConnection' | undefined;
    edges?: Maybe<Array<Maybe<PostFormatToContentNodeConnectionEdge>>>;
    nodes?: Maybe<Array<Maybe<ContentNode>>>;
    pageInfo?: Maybe<WPPageInfo>;
}
export interface PostFormatToContentNodeConnectionEdge {
    __typename: 'PostFormatToContentNodeConnectionEdge' | undefined;
    cursor?: Maybe<ScalarsEnums['String']>;
    node?: Maybe<ContentNode>;
}
export interface PostFormatToPostConnection {
    __typename: 'PostFormatToPostConnection' | undefined;
    edges?: Maybe<Array<Maybe<PostFormatToPostConnectionEdge>>>;
    nodes?: Maybe<Array<Maybe<Post>>>;
    pageInfo?: Maybe<WPPageInfo>;
}
export interface PostFormatToPostConnectionEdge {
    __typename: 'PostFormatToPostConnectionEdge' | undefined;
    cursor?: Maybe<ScalarsEnums['String']>;
    node?: Maybe<Post>;
}
export interface PostFormatToTaxonomyConnectionEdge {
    __typename: 'PostFormatToTaxonomyConnectionEdge' | undefined;
    node?: Maybe<Taxonomy>;
}
export interface PostToPreviewConnectionEdge {
    __typename: 'PostToPreviewConnectionEdge' | undefined;
    node?: Maybe<Post>;
}
export interface PostToRevisionConnection {
    __typename: 'PostToRevisionConnection' | undefined;
    edges?: Maybe<Array<Maybe<PostToRevisionConnectionEdge>>>;
    nodes?: Maybe<Array<Maybe<Post>>>;
    pageInfo?: Maybe<WPPageInfo>;
}
export interface PostToRevisionConnectionEdge {
    __typename: 'PostToRevisionConnectionEdge' | undefined;
    cursor?: Maybe<ScalarsEnums['String']>;
    node?: Maybe<Post>;
}
export interface PostToTagConnection {
    __typename: 'PostToTagConnection' | undefined;
    edges?: Maybe<Array<Maybe<PostToTagConnectionEdge>>>;
    nodes?: Maybe<Array<Maybe<Tag>>>;
    pageInfo?: Maybe<WPPageInfo>;
}
export interface PostToTagConnectionEdge {
    __typename: 'PostToTagConnectionEdge' | undefined;
    cursor?: Maybe<ScalarsEnums['String']>;
    node?: Maybe<Tag>;
}
export interface Tag extends Omit<Node, '__typename'>, Omit<TermNode, '__typename'>, Omit<UniformResourceIdentifiable, '__typename'>, Omit<DatabaseIdentifier, '__typename'>, Omit<MenuItemLinkable, '__typename'> {
    __typename: 'Tag' | undefined;
    contentNodes: (args?: {
        first?: Maybe<Scalars['Int']>;
        last?: Maybe<Scalars['Int']>;
        after?: Maybe<Scalars['String']>;
        before?: Maybe<Scalars['String']>;
        where?: Maybe<TagToContentNodeConnectionWhereArgs>;
    }) => Maybe<TagToContentNodeConnection>;
    count?: Maybe<ScalarsEnums['Int']>;
    databaseId: ScalarsEnums['Int'];
    description?: Maybe<ScalarsEnums['String']>;
    enqueuedScripts: (args?: {
        first?: Maybe<Scalars['Int']>;
        last?: Maybe<Scalars['Int']>;
        after?: Maybe<Scalars['String']>;
        before?: Maybe<Scalars['String']>;
    }) => Maybe<TermNodeToEnqueuedScriptConnection>;
    enqueuedStylesheets: (args?: {
        first?: Maybe<Scalars['Int']>;
        last?: Maybe<Scalars['Int']>;
        after?: Maybe<Scalars['String']>;
        before?: Maybe<Scalars['String']>;
    }) => Maybe<TermNodeToEnqueuedStylesheetConnection>;
    id: ScalarsEnums['ID'];
    isContentNode: ScalarsEnums['Boolean'];
    isRestricted?: Maybe<ScalarsEnums['Boolean']>;
    isTermNode: ScalarsEnums['Boolean'];
    link?: Maybe<ScalarsEnums['String']>;
    name?: Maybe<ScalarsEnums['String']>;
    posts: (args?: {
        first?: Maybe<Scalars['Int']>;
        last?: Maybe<Scalars['Int']>;
        after?: Maybe<Scalars['String']>;
        before?: Maybe<Scalars['String']>;
        where?: Maybe<TagToPostConnectionWhereArgs>;
    }) => Maybe<TagToPostConnection>;
    slug?: Maybe<ScalarsEnums['String']>;
    tagId?: Maybe<ScalarsEnums['Int']>;
    taxonomy?: Maybe<TagToTaxonomyConnectionEdge>;
    termGroupId?: Maybe<ScalarsEnums['Int']>;
    termTaxonomyId?: Maybe<ScalarsEnums['Int']>;
    uri?: Maybe<ScalarsEnums['String']>;
}
export interface TagToContentNodeConnection {
    __typename: 'TagToContentNodeConnection' | undefined;
    edges?: Maybe<Array<Maybe<TagToContentNodeConnectionEdge>>>;
    nodes?: Maybe<Array<Maybe<ContentNode>>>;
    pageInfo?: Maybe<WPPageInfo>;
}
export interface TagToContentNodeConnectionEdge {
    __typename: 'TagToContentNodeConnectionEdge' | undefined;
    cursor?: Maybe<ScalarsEnums['String']>;
    node?: Maybe<ContentNode>;
}
export interface TagToPostConnection {
    __typename: 'TagToPostConnection' | undefined;
    edges?: Maybe<Array<Maybe<TagToPostConnectionEdge>>>;
    nodes?: Maybe<Array<Maybe<Post>>>;
    pageInfo?: Maybe<WPPageInfo>;
}
export interface TagToPostConnectionEdge {
    __typename: 'TagToPostConnectionEdge' | undefined;
    cursor?: Maybe<ScalarsEnums['String']>;
    node?: Maybe<Post>;
}
export interface TagToTaxonomyConnectionEdge {
    __typename: 'TagToTaxonomyConnectionEdge' | undefined;
    node?: Maybe<Taxonomy>;
}
export interface PostToTermNodeConnection {
    __typename: 'PostToTermNodeConnection' | undefined;
    edges?: Maybe<Array<Maybe<PostToTermNodeConnectionEdge>>>;
    nodes?: Maybe<Array<Maybe<TermNode>>>;
    pageInfo?: Maybe<WPPageInfo>;
}
export interface PostToTermNodeConnectionEdge {
    __typename: 'PostToTermNodeConnectionEdge' | undefined;
    cursor?: Maybe<ScalarsEnums['String']>;
    node?: Maybe<TermNode>;
}
export interface UserToContentRevisionUnionConnection {
    __typename: 'UserToContentRevisionUnionConnection' | undefined;
    edges?: Maybe<Array<Maybe<UserToContentRevisionUnionConnectionEdge>>>;
    nodes?: Maybe<Array<Maybe<ContentRevisionUnion>>>;
    pageInfo?: Maybe<WPPageInfo>;
}
export interface UserToContentRevisionUnionConnectionEdge {
    __typename: 'UserToContentRevisionUnionConnectionEdge' | undefined;
    cursor?: Maybe<ScalarsEnums['String']>;
    node?: Maybe<ContentRevisionUnion>;
}
export interface UserToUserRoleConnection {
    __typename: 'UserToUserRoleConnection' | undefined;
    edges?: Maybe<Array<Maybe<UserToUserRoleConnectionEdge>>>;
    nodes?: Maybe<Array<Maybe<UserRole>>>;
    pageInfo?: Maybe<WPPageInfo>;
}
export interface UserToUserRoleConnectionEdge {
    __typename: 'UserToUserRoleConnectionEdge' | undefined;
    cursor?: Maybe<ScalarsEnums['String']>;
    node?: Maybe<UserRole>;
}
export interface UserRole extends Omit<Node, '__typename'> {
    __typename: 'UserRole' | undefined;
    capabilities?: Maybe<Array<Maybe<ScalarsEnums['String']>>>;
    displayName?: Maybe<ScalarsEnums['String']>;
    id: ScalarsEnums['ID'];
    isRestricted?: Maybe<ScalarsEnums['Boolean']>;
    name?: Maybe<ScalarsEnums['String']>;
}
export interface CategoryToParentCategoryConnectionEdge {
    __typename: 'CategoryToParentCategoryConnectionEdge' | undefined;
    node?: Maybe<Category>;
}
export interface CategoryToPostConnection {
    __typename: 'CategoryToPostConnection' | undefined;
    edges?: Maybe<Array<Maybe<CategoryToPostConnectionEdge>>>;
    nodes?: Maybe<Array<Maybe<Post>>>;
    pageInfo?: Maybe<WPPageInfo>;
}
export interface CategoryToPostConnectionEdge {
    __typename: 'CategoryToPostConnectionEdge' | undefined;
    cursor?: Maybe<ScalarsEnums['String']>;
    node?: Maybe<Post>;
}
export interface CategoryToTaxonomyConnectionEdge {
    __typename: 'CategoryToTaxonomyConnectionEdge' | undefined;
    node?: Maybe<Taxonomy>;
}
export interface RootQueryToCommentConnection {
    __typename: 'RootQueryToCommentConnection' | undefined;
    edges?: Maybe<Array<Maybe<RootQueryToCommentConnectionEdge>>>;
    nodes?: Maybe<Array<Maybe<Comment>>>;
    pageInfo?: Maybe<WPPageInfo>;
}
export interface RootQueryToCommentConnectionEdge {
    __typename: 'RootQueryToCommentConnectionEdge' | undefined;
    cursor?: Maybe<ScalarsEnums['String']>;
    node?: Maybe<Comment>;
}
export interface RootQueryToContentNodeConnection {
    __typename: 'RootQueryToContentNodeConnection' | undefined;
    edges?: Maybe<Array<Maybe<RootQueryToContentNodeConnectionEdge>>>;
    nodes?: Maybe<Array<Maybe<ContentNode>>>;
    pageInfo?: Maybe<WPPageInfo>;
}
export interface RootQueryToContentNodeConnectionEdge {
    __typename: 'RootQueryToContentNodeConnectionEdge' | undefined;
    cursor?: Maybe<ScalarsEnums['String']>;
    node?: Maybe<ContentNode>;
}
export interface RootQueryToContentTypeConnection {
    __typename: 'RootQueryToContentTypeConnection' | undefined;
    edges?: Maybe<Array<Maybe<RootQueryToContentTypeConnectionEdge>>>;
    nodes?: Maybe<Array<Maybe<ContentType>>>;
    pageInfo?: Maybe<WPPageInfo>;
}
export interface RootQueryToContentTypeConnectionEdge {
    __typename: 'RootQueryToContentTypeConnectionEdge' | undefined;
    cursor?: Maybe<ScalarsEnums['String']>;
    node?: Maybe<ContentType>;
}
export interface DiscussionSettings {
    __typename: 'DiscussionSettings' | undefined;
    defaultCommentStatus?: Maybe<ScalarsEnums['String']>;
    defaultPingStatus?: Maybe<ScalarsEnums['String']>;
}
export interface GeneralSettings {
    __typename: 'GeneralSettings' | undefined;
    dateFormat?: Maybe<ScalarsEnums['String']>;
    description?: Maybe<ScalarsEnums['String']>;
    email?: Maybe<ScalarsEnums['String']>;
    language?: Maybe<ScalarsEnums['String']>;
    startOfWeek?: Maybe<ScalarsEnums['Int']>;
    timeFormat?: Maybe<ScalarsEnums['String']>;
    timezone?: Maybe<ScalarsEnums['String']>;
    title?: Maybe<ScalarsEnums['String']>;
    url?: Maybe<ScalarsEnums['String']>;
}
export interface RootQueryToMediaItemConnection {
    __typename: 'RootQueryToMediaItemConnection' | undefined;
    edges?: Maybe<Array<Maybe<RootQueryToMediaItemConnectionEdge>>>;
    nodes?: Maybe<Array<Maybe<MediaItem>>>;
    pageInfo?: Maybe<WPPageInfo>;
}
export interface RootQueryToMediaItemConnectionEdge {
    __typename: 'RootQueryToMediaItemConnectionEdge' | undefined;
    cursor?: Maybe<ScalarsEnums['String']>;
    node?: Maybe<MediaItem>;
}
export interface Menu extends Omit<Node, '__typename'>, Omit<DatabaseIdentifier, '__typename'> {
    __typename: 'Menu' | undefined;
    count?: Maybe<ScalarsEnums['Int']>;
    databaseId: ScalarsEnums['Int'];
    id: ScalarsEnums['ID'];
    isRestricted?: Maybe<ScalarsEnums['Boolean']>;
    locations?: Maybe<Array<Maybe<ScalarsEnums['MenuLocationEnum']>>>;
    menuId?: Maybe<ScalarsEnums['Int']>;
    menuItems: (args?: {
        first?: Maybe<Scalars['Int']>;
        last?: Maybe<Scalars['Int']>;
        after?: Maybe<Scalars['String']>;
        before?: Maybe<Scalars['String']>;
        where?: Maybe<MenuToMenuItemConnectionWhereArgs>;
    }) => Maybe<MenuToMenuItemConnection>;
    name?: Maybe<ScalarsEnums['String']>;
    slug?: Maybe<ScalarsEnums['String']>;
}
export interface MenuToMenuItemConnection {
    __typename: 'MenuToMenuItemConnection' | undefined;
    edges?: Maybe<Array<Maybe<MenuToMenuItemConnectionEdge>>>;
    nodes?: Maybe<Array<Maybe<MenuItem>>>;
    pageInfo?: Maybe<WPPageInfo>;
}
export interface MenuToMenuItemConnectionEdge {
    __typename: 'MenuToMenuItemConnectionEdge' | undefined;
    cursor?: Maybe<ScalarsEnums['String']>;
    node?: Maybe<MenuItem>;
}
export interface MenuItem extends Omit<Node, '__typename'>, Omit<DatabaseIdentifier, '__typename'> {
    __typename: 'MenuItem' | undefined;
    childItems: (args?: {
        first?: Maybe<Scalars['Int']>;
        last?: Maybe<Scalars['Int']>;
        after?: Maybe<Scalars['String']>;
        before?: Maybe<Scalars['String']>;
        where?: Maybe<MenuItemToMenuItemConnectionWhereArgs>;
    }) => Maybe<MenuItemToMenuItemConnection>;
    connectedNode?: Maybe<MenuItemToMenuItemLinkableConnectionEdge>;
    connectedObject?: Maybe<MenuItemObjectUnion>;
    cssClasses?: Maybe<Array<Maybe<ScalarsEnums['String']>>>;
    databaseId: ScalarsEnums['Int'];
    description?: Maybe<ScalarsEnums['String']>;
    id: ScalarsEnums['ID'];
    isRestricted?: Maybe<ScalarsEnums['Boolean']>;
    label?: Maybe<ScalarsEnums['String']>;
    linkRelationship?: Maybe<ScalarsEnums['String']>;
    locations?: Maybe<Array<Maybe<ScalarsEnums['MenuLocationEnum']>>>;
    menu?: Maybe<MenuItemToMenuConnectionEdge>;
    menuItemId?: Maybe<ScalarsEnums['Int']>;
    order?: Maybe<ScalarsEnums['Int']>;
    parentDatabaseId?: Maybe<ScalarsEnums['Int']>;
    parentId?: Maybe<ScalarsEnums['ID']>;
    path?: Maybe<ScalarsEnums['String']>;
    target?: Maybe<ScalarsEnums['String']>;
    title?: Maybe<ScalarsEnums['String']>;
    url?: Maybe<ScalarsEnums['String']>;
}
export interface MenuItemToMenuItemConnection {
    __typename: 'MenuItemToMenuItemConnection' | undefined;
    edges?: Maybe<Array<Maybe<MenuItemToMenuItemConnectionEdge>>>;
    nodes?: Maybe<Array<Maybe<MenuItem>>>;
    pageInfo?: Maybe<WPPageInfo>;
}
export interface MenuItemToMenuItemConnectionEdge {
    __typename: 'MenuItemToMenuItemConnectionEdge' | undefined;
    cursor?: Maybe<ScalarsEnums['String']>;
    node?: Maybe<MenuItem>;
}
export interface MenuItemToMenuItemLinkableConnectionEdge {
    __typename: 'MenuItemToMenuItemLinkableConnectionEdge' | undefined;
    node?: Maybe<MenuItemLinkable>;
}
export interface MenuItemToMenuConnectionEdge {
    __typename: 'MenuItemToMenuConnectionEdge' | undefined;
    node?: Maybe<Menu>;
}
export interface RootQueryToMenuItemConnection {
    __typename: 'RootQueryToMenuItemConnection' | undefined;
    edges?: Maybe<Array<Maybe<RootQueryToMenuItemConnectionEdge>>>;
    nodes?: Maybe<Array<Maybe<MenuItem>>>;
    pageInfo?: Maybe<WPPageInfo>;
}
export interface RootQueryToMenuItemConnectionEdge {
    __typename: 'RootQueryToMenuItemConnectionEdge' | undefined;
    cursor?: Maybe<ScalarsEnums['String']>;
    node?: Maybe<MenuItem>;
}
export interface RootQueryToMenuConnection {
    __typename: 'RootQueryToMenuConnection' | undefined;
    edges?: Maybe<Array<Maybe<RootQueryToMenuConnectionEdge>>>;
    nodes?: Maybe<Array<Maybe<Menu>>>;
    pageInfo?: Maybe<WPPageInfo>;
}
export interface RootQueryToMenuConnectionEdge {
    __typename: 'RootQueryToMenuConnectionEdge' | undefined;
    cursor?: Maybe<ScalarsEnums['String']>;
    node?: Maybe<Menu>;
}
export interface RootQueryToPageConnection {
    __typename: 'RootQueryToPageConnection' | undefined;
    edges?: Maybe<Array<Maybe<RootQueryToPageConnectionEdge>>>;
    nodes?: Maybe<Array<Maybe<Page>>>;
    pageInfo?: Maybe<WPPageInfo>;
}
export interface RootQueryToPageConnectionEdge {
    __typename: 'RootQueryToPageConnectionEdge' | undefined;
    cursor?: Maybe<ScalarsEnums['String']>;
    node?: Maybe<Page>;
}
export interface Plugin extends Omit<Node, '__typename'> {
    __typename: 'Plugin' | undefined;
    author?: Maybe<ScalarsEnums['String']>;
    authorUri?: Maybe<ScalarsEnums['String']>;
    description?: Maybe<ScalarsEnums['String']>;
    id: ScalarsEnums['ID'];
    isRestricted?: Maybe<ScalarsEnums['Boolean']>;
    name?: Maybe<ScalarsEnums['String']>;
    path?: Maybe<ScalarsEnums['String']>;
    pluginUri?: Maybe<ScalarsEnums['String']>;
    version?: Maybe<ScalarsEnums['String']>;
}
export interface RootQueryToPluginConnection {
    __typename: 'RootQueryToPluginConnection' | undefined;
    edges?: Maybe<Array<Maybe<RootQueryToPluginConnectionEdge>>>;
    nodes?: Maybe<Array<Maybe<Plugin>>>;
    pageInfo?: Maybe<WPPageInfo>;
}
export interface RootQueryToPluginConnectionEdge {
    __typename: 'RootQueryToPluginConnectionEdge' | undefined;
    cursor?: Maybe<ScalarsEnums['String']>;
    node?: Maybe<Plugin>;
}
export interface RootQueryToPostFormatConnection {
    __typename: 'RootQueryToPostFormatConnection' | undefined;
    edges?: Maybe<Array<Maybe<RootQueryToPostFormatConnectionEdge>>>;
    nodes?: Maybe<Array<Maybe<PostFormat>>>;
    pageInfo?: Maybe<WPPageInfo>;
}
export interface RootQueryToPostFormatConnectionEdge {
    __typename: 'RootQueryToPostFormatConnectionEdge' | undefined;
    cursor?: Maybe<ScalarsEnums['String']>;
    node?: Maybe<PostFormat>;
}
export interface RootQueryToPostConnection {
    __typename: 'RootQueryToPostConnection' | undefined;
    edges?: Maybe<Array<Maybe<RootQueryToPostConnectionEdge>>>;
    nodes?: Maybe<Array<Maybe<Post>>>;
    pageInfo?: Maybe<WPPageInfo>;
}
export interface RootQueryToPostConnectionEdge {
    __typename: 'RootQueryToPostConnectionEdge' | undefined;
    cursor?: Maybe<ScalarsEnums['String']>;
    node?: Maybe<Post>;
}
export interface ReadingSettings {
    __typename: 'ReadingSettings' | undefined;
    postsPerPage?: Maybe<ScalarsEnums['Int']>;
}
export interface RootQueryToEnqueuedScriptConnection {
    __typename: 'RootQueryToEnqueuedScriptConnection' | undefined;
    edges?: Maybe<Array<Maybe<RootQueryToEnqueuedScriptConnectionEdge>>>;
    nodes?: Maybe<Array<Maybe<EnqueuedScript>>>;
    pageInfo?: Maybe<WPPageInfo>;
}
export interface RootQueryToEnqueuedScriptConnectionEdge {
    __typename: 'RootQueryToEnqueuedScriptConnectionEdge' | undefined;
    cursor?: Maybe<ScalarsEnums['String']>;
    node?: Maybe<EnqueuedScript>;
}
export interface RootQueryToEnqueuedStylesheetConnection {
    __typename: 'RootQueryToEnqueuedStylesheetConnection' | undefined;
    edges?: Maybe<Array<Maybe<RootQueryToEnqueuedStylesheetConnectionEdge>>>;
    nodes?: Maybe<Array<Maybe<EnqueuedStylesheet>>>;
    pageInfo?: Maybe<WPPageInfo>;
}
export interface RootQueryToEnqueuedStylesheetConnectionEdge {
    __typename: 'RootQueryToEnqueuedStylesheetConnectionEdge' | undefined;
    cursor?: Maybe<ScalarsEnums['String']>;
    node?: Maybe<EnqueuedStylesheet>;
}
export interface RootQueryToContentRevisionUnionConnection {
    __typename: 'RootQueryToContentRevisionUnionConnection' | undefined;
    edges?: Maybe<Array<Maybe<RootQueryToContentRevisionUnionConnectionEdge>>>;
    nodes?: Maybe<Array<Maybe<ContentRevisionUnion>>>;
    pageInfo?: Maybe<WPPageInfo>;
}
export interface RootQueryToContentRevisionUnionConnectionEdge {
    __typename: 'RootQueryToContentRevisionUnionConnectionEdge' | undefined;
    cursor?: Maybe<ScalarsEnums['String']>;
    node?: Maybe<ContentRevisionUnion>;
}
export interface RootQueryToTagConnection {
    __typename: 'RootQueryToTagConnection' | undefined;
    edges?: Maybe<Array<Maybe<RootQueryToTagConnectionEdge>>>;
    nodes?: Maybe<Array<Maybe<Tag>>>;
    pageInfo?: Maybe<WPPageInfo>;
}
export interface RootQueryToTagConnectionEdge {
    __typename: 'RootQueryToTagConnectionEdge' | undefined;
    cursor?: Maybe<ScalarsEnums['String']>;
    node?: Maybe<Tag>;
}
export interface RootQueryToTaxonomyConnection {
    __typename: 'RootQueryToTaxonomyConnection' | undefined;
    edges?: Maybe<Array<Maybe<RootQueryToTaxonomyConnectionEdge>>>;
    nodes?: Maybe<Array<Maybe<Taxonomy>>>;
    pageInfo?: Maybe<WPPageInfo>;
}
export interface RootQueryToTaxonomyConnectionEdge {
    __typename: 'RootQueryToTaxonomyConnectionEdge' | undefined;
    cursor?: Maybe<ScalarsEnums['String']>;
    node?: Maybe<Taxonomy>;
}
export interface RootQueryToTermNodeConnection {
    __typename: 'RootQueryToTermNodeConnection' | undefined;
    edges?: Maybe<Array<Maybe<RootQueryToTermNodeConnectionEdge>>>;
    nodes?: Maybe<Array<Maybe<TermNode>>>;
    pageInfo?: Maybe<WPPageInfo>;
}
export interface RootQueryToTermNodeConnectionEdge {
    __typename: 'RootQueryToTermNodeConnectionEdge' | undefined;
    cursor?: Maybe<ScalarsEnums['String']>;
    node?: Maybe<TermNode>;
}
export interface Theme extends Omit<Node, '__typename'> {
    __typename: 'Theme' | undefined;
    author?: Maybe<ScalarsEnums['String']>;
    authorUri?: Maybe<ScalarsEnums['String']>;
    description?: Maybe<ScalarsEnums['String']>;
    id: ScalarsEnums['ID'];
    isRestricted?: Maybe<ScalarsEnums['Boolean']>;
    name?: Maybe<ScalarsEnums['String']>;
    screenshot?: Maybe<ScalarsEnums['String']>;
    slug?: Maybe<ScalarsEnums['String']>;
    tags?: Maybe<Array<Maybe<ScalarsEnums['String']>>>;
    themeUri?: Maybe<ScalarsEnums['String']>;
    version?: Maybe<ScalarsEnums['String']>;
}
export interface RootQueryToThemeConnection {
    __typename: 'RootQueryToThemeConnection' | undefined;
    edges?: Maybe<Array<Maybe<RootQueryToThemeConnectionEdge>>>;
    nodes?: Maybe<Array<Maybe<Theme>>>;
    pageInfo?: Maybe<WPPageInfo>;
}
export interface RootQueryToThemeConnectionEdge {
    __typename: 'RootQueryToThemeConnectionEdge' | undefined;
    cursor?: Maybe<ScalarsEnums['String']>;
    node?: Maybe<Theme>;
}
export interface RootQueryToUserRoleConnection {
    __typename: 'RootQueryToUserRoleConnection' | undefined;
    edges?: Maybe<Array<Maybe<RootQueryToUserRoleConnectionEdge>>>;
    nodes?: Maybe<Array<Maybe<UserRole>>>;
    pageInfo?: Maybe<WPPageInfo>;
}
export interface RootQueryToUserRoleConnectionEdge {
    __typename: 'RootQueryToUserRoleConnectionEdge' | undefined;
    cursor?: Maybe<ScalarsEnums['String']>;
    node?: Maybe<UserRole>;
}
export interface RootQueryToUserConnection {
    __typename: 'RootQueryToUserConnection' | undefined;
    edges?: Maybe<Array<Maybe<RootQueryToUserConnectionEdge>>>;
    nodes?: Maybe<Array<Maybe<User>>>;
    pageInfo?: Maybe<WPPageInfo>;
}
export interface RootQueryToUserConnectionEdge {
    __typename: 'RootQueryToUserConnectionEdge' | undefined;
    cursor?: Maybe<ScalarsEnums['String']>;
    node?: Maybe<User>;
}
export interface WritingSettings {
    __typename: 'WritingSettings' | undefined;
    defaultCategory?: Maybe<ScalarsEnums['Int']>;
    defaultPostFormat?: Maybe<ScalarsEnums['String']>;
    useSmilies?: Maybe<ScalarsEnums['Boolean']>;
}
export interface CreateCategoryPayload {
    __typename: 'CreateCategoryPayload' | undefined;
    category?: Maybe<Category>;
    clientMutationId?: Maybe<ScalarsEnums['String']>;
}
export interface CreateCommentPayload {
    __typename: 'CreateCommentPayload' | undefined;
    clientMutationId?: Maybe<ScalarsEnums['String']>;
    comment?: Maybe<Comment>;
    success?: Maybe<ScalarsEnums['Boolean']>;
}
export interface CreateMediaItemPayload {
    __typename: 'CreateMediaItemPayload' | undefined;
    clientMutationId?: Maybe<ScalarsEnums['String']>;
    mediaItem?: Maybe<MediaItem>;
}
export interface CreatePagePayload {
    __typename: 'CreatePagePayload' | undefined;
    clientMutationId?: Maybe<ScalarsEnums['String']>;
    page?: Maybe<Page>;
}
export interface CreatePostPayload {
    __typename: 'CreatePostPayload' | undefined;
    clientMutationId?: Maybe<ScalarsEnums['String']>;
    post?: Maybe<Post>;
}
export interface CreatePostFormatPayload {
    __typename: 'CreatePostFormatPayload' | undefined;
    clientMutationId?: Maybe<ScalarsEnums['String']>;
    postFormat?: Maybe<PostFormat>;
}
export interface CreateTagPayload {
    __typename: 'CreateTagPayload' | undefined;
    clientMutationId?: Maybe<ScalarsEnums['String']>;
    tag?: Maybe<Tag>;
}
export interface CreateUserPayload {
    __typename: 'CreateUserPayload' | undefined;
    clientMutationId?: Maybe<ScalarsEnums['String']>;
    user?: Maybe<User>;
}
export interface DeleteCategoryPayload {
    __typename: 'DeleteCategoryPayload' | undefined;
    category?: Maybe<Category>;
    clientMutationId?: Maybe<ScalarsEnums['String']>;
    deletedId?: Maybe<ScalarsEnums['ID']>;
}
export interface DeleteCommentPayload {
    __typename: 'DeleteCommentPayload' | undefined;
    clientMutationId?: Maybe<ScalarsEnums['String']>;
    comment?: Maybe<Comment>;
    deletedId?: Maybe<ScalarsEnums['ID']>;
}
export interface DeleteMediaItemPayload {
    __typename: 'DeleteMediaItemPayload' | undefined;
    clientMutationId?: Maybe<ScalarsEnums['String']>;
    deletedId?: Maybe<ScalarsEnums['ID']>;
    mediaItem?: Maybe<MediaItem>;
}
export interface DeletePagePayload {
    __typename: 'DeletePagePayload' | undefined;
    clientMutationId?: Maybe<ScalarsEnums['String']>;
    deletedId?: Maybe<ScalarsEnums['ID']>;
    page?: Maybe<Page>;
}
export interface DeletePostPayload {
    __typename: 'DeletePostPayload' | undefined;
    clientMutationId?: Maybe<ScalarsEnums['String']>;
    deletedId?: Maybe<ScalarsEnums['ID']>;
    post?: Maybe<Post>;
}
export interface DeletePostFormatPayload {
    __typename: 'DeletePostFormatPayload' | undefined;
    clientMutationId?: Maybe<ScalarsEnums['String']>;
    deletedId?: Maybe<ScalarsEnums['ID']>;
    postFormat?: Maybe<PostFormat>;
}
export interface DeleteTagPayload {
    __typename: 'DeleteTagPayload' | undefined;
    clientMutationId?: Maybe<ScalarsEnums['String']>;
    deletedId?: Maybe<ScalarsEnums['ID']>;
    tag?: Maybe<Tag>;
}
export interface DeleteUserPayload {
    __typename: 'DeleteUserPayload' | undefined;
    clientMutationId?: Maybe<ScalarsEnums['String']>;
    deletedId?: Maybe<ScalarsEnums['ID']>;
    user?: Maybe<User>;
}
export interface RegisterUserPayload {
    __typename: 'RegisterUserPayload' | undefined;
    clientMutationId?: Maybe<ScalarsEnums['String']>;
    user?: Maybe<User>;
}
export interface ResetUserPasswordPayload {
    __typename: 'ResetUserPasswordPayload' | undefined;
    clientMutationId?: Maybe<ScalarsEnums['String']>;
    user?: Maybe<User>;
}
export interface RestoreCommentPayload {
    __typename: 'RestoreCommentPayload' | undefined;
    clientMutationId?: Maybe<ScalarsEnums['String']>;
    comment?: Maybe<Comment>;
    restoredId?: Maybe<ScalarsEnums['ID']>;
}
export interface SendPasswordResetEmailPayload {
    __typename: 'SendPasswordResetEmailPayload' | undefined;
    clientMutationId?: Maybe<ScalarsEnums['String']>;
    user?: Maybe<User>;
}
export interface UpdateCategoryPayload {
    __typename: 'UpdateCategoryPayload' | undefined;
    category?: Maybe<Category>;
    clientMutationId?: Maybe<ScalarsEnums['String']>;
}
export interface UpdateCommentPayload {
    __typename: 'UpdateCommentPayload' | undefined;
    clientMutationId?: Maybe<ScalarsEnums['String']>;
    comment?: Maybe<Comment>;
    success?: Maybe<ScalarsEnums['Boolean']>;
}
export interface UpdateMediaItemPayload {
    __typename: 'UpdateMediaItemPayload' | undefined;
    clientMutationId?: Maybe<ScalarsEnums['String']>;
    mediaItem?: Maybe<MediaItem>;
}
export interface UpdatePagePayload {
    __typename: 'UpdatePagePayload' | undefined;
    clientMutationId?: Maybe<ScalarsEnums['String']>;
    page?: Maybe<Page>;
}
export interface UpdatePostPayload {
    __typename: 'UpdatePostPayload' | undefined;
    clientMutationId?: Maybe<ScalarsEnums['String']>;
    post?: Maybe<Post>;
}
export interface UpdatePostFormatPayload {
    __typename: 'UpdatePostFormatPayload' | undefined;
    clientMutationId?: Maybe<ScalarsEnums['String']>;
    postFormat?: Maybe<PostFormat>;
}
export interface UpdateSettingsPayload {
    __typename: 'UpdateSettingsPayload' | undefined;
    allSettings?: Maybe<Settings>;
    clientMutationId?: Maybe<ScalarsEnums['String']>;
    discussionSettings?: Maybe<DiscussionSettings>;
    generalSettings?: Maybe<GeneralSettings>;
    readingSettings?: Maybe<ReadingSettings>;
    writingSettings?: Maybe<WritingSettings>;
}
export interface UpdateTagPayload {
    __typename: 'UpdateTagPayload' | undefined;
    clientMutationId?: Maybe<ScalarsEnums['String']>;
    tag?: Maybe<Tag>;
}
export interface UpdateUserPayload {
    __typename: 'UpdateUserPayload' | undefined;
    clientMutationId?: Maybe<ScalarsEnums['String']>;
    user?: Maybe<User>;
}
export interface CommentAuthor extends Omit<Node, '__typename'>, Omit<Commenter, '__typename'> {
    __typename: 'CommentAuthor' | undefined;
    databaseId: ScalarsEnums['Int'];
    email?: Maybe<ScalarsEnums['String']>;
    id: ScalarsEnums['ID'];
    isRestricted?: Maybe<ScalarsEnums['Boolean']>;
    name?: Maybe<ScalarsEnums['String']>;
    url?: Maybe<ScalarsEnums['String']>;
}
export interface DefaultTemplate extends Omit<ContentTemplate, '__typename'> {
    __typename: 'DefaultTemplate' | undefined;
    templateName?: Maybe<ScalarsEnums['String']>;
}
export interface SchemaObjectTypes {
    Query: Query;
    Mutation: Mutation;
    Subscription: Subscription;
    Settings: Settings;
    RootQueryToCategoryConnection: RootQueryToCategoryConnection;
    RootQueryToCategoryConnectionEdge: RootQueryToCategoryConnectionEdge;
    Category: Category;
    Node: Node;
    TermNode: TermNode;
    UniformResourceIdentifiable: UniformResourceIdentifiable;
    TermNodeToEnqueuedScriptConnection: TermNodeToEnqueuedScriptConnection;
    TermNodeToEnqueuedScriptConnectionEdge: TermNodeToEnqueuedScriptConnectionEdge;
    EnqueuedScript: EnqueuedScript;
    EnqueuedAsset: EnqueuedAsset;
    WPPageInfo: WPPageInfo;
    TermNodeToEnqueuedStylesheetConnection: TermNodeToEnqueuedStylesheetConnection;
    TermNodeToEnqueuedStylesheetConnectionEdge: TermNodeToEnqueuedStylesheetConnectionEdge;
    EnqueuedStylesheet: EnqueuedStylesheet;
    DatabaseIdentifier: DatabaseIdentifier;
    HierarchicalTermNode: HierarchicalTermNode;
    MenuItemLinkable: MenuItemLinkable;
    CategoryToAncestorsCategoryConnection: CategoryToAncestorsCategoryConnection;
    CategoryToAncestorsCategoryConnectionEdge: CategoryToAncestorsCategoryConnectionEdge;
    CategoryToCategoryConnection: CategoryToCategoryConnection;
    CategoryToCategoryConnectionEdge: CategoryToCategoryConnectionEdge;
    CategoryToContentNodeConnection: CategoryToContentNodeConnection;
    CategoryToContentNodeConnectionEdge: CategoryToContentNodeConnectionEdge;
    ContentNode: ContentNode;
    ContentNodeToContentTypeConnectionEdge: ContentNodeToContentTypeConnectionEdge;
    ContentType: ContentType;
    ContentTypeToTaxonomyConnection: ContentTypeToTaxonomyConnection;
    ContentTypeToTaxonomyConnectionEdge: ContentTypeToTaxonomyConnectionEdge;
    Taxonomy: Taxonomy;
    TaxonomyToContentTypeConnection: TaxonomyToContentTypeConnection;
    TaxonomyToContentTypeConnectionEdge: TaxonomyToContentTypeConnectionEdge;
    ContentTypeToContentNodeConnection: ContentTypeToContentNodeConnection;
    ContentTypeToContentNodeConnectionEdge: ContentTypeToContentNodeConnectionEdge;
    PostTypeLabelDetails: PostTypeLabelDetails;
    ContentNodeToEditLockConnectionEdge: ContentNodeToEditLockConnectionEdge;
    User: User;
    Commenter: Commenter;
    Avatar: Avatar;
    UserToCommentConnection: UserToCommentConnection;
    UserToCommentConnectionEdge: UserToCommentConnectionEdge;
    Comment: Comment;
    CommentToCommenterConnectionEdge: CommentToCommenterConnectionEdge;
    CommentToContentNodeConnectionEdge: CommentToContentNodeConnectionEdge;
    CommentToParentCommentConnectionEdge: CommentToParentCommentConnectionEdge;
    CommentToCommentConnection: CommentToCommentConnection;
    CommentToCommentConnectionEdge: CommentToCommentConnectionEdge;
    UserToEnqueuedScriptConnection: UserToEnqueuedScriptConnection;
    UserToEnqueuedScriptConnectionEdge: UserToEnqueuedScriptConnectionEdge;
    UserToEnqueuedStylesheetConnection: UserToEnqueuedStylesheetConnection;
    UserToEnqueuedStylesheetConnectionEdge: UserToEnqueuedStylesheetConnectionEdge;
    UserToMediaItemConnection: UserToMediaItemConnection;
    UserToMediaItemConnectionEdge: UserToMediaItemConnectionEdge;
    MediaItem: MediaItem;
    NodeWithTemplate: NodeWithTemplate;
    ContentTemplate: ContentTemplate;
    NodeWithTitle: NodeWithTitle;
    NodeWithAuthor: NodeWithAuthor;
    NodeWithAuthorToUserConnectionEdge: NodeWithAuthorToUserConnectionEdge;
    NodeWithComments: NodeWithComments;
    HierarchicalContentNode: HierarchicalContentNode;
    HierarchicalContentNodeToContentNodeAncestorsConnection: HierarchicalContentNodeToContentNodeAncestorsConnection;
    HierarchicalContentNodeToContentNodeAncestorsConnectionEdge: HierarchicalContentNodeToContentNodeAncestorsConnectionEdge;
    HierarchicalContentNodeToContentNodeChildrenConnection: HierarchicalContentNodeToContentNodeChildrenConnection;
    HierarchicalContentNodeToContentNodeChildrenConnectionEdge: HierarchicalContentNodeToContentNodeChildrenConnectionEdge;
    HierarchicalContentNodeToParentContentNodeConnectionEdge: HierarchicalContentNodeToParentContentNodeConnectionEdge;
    MediaItemToCommentConnection: MediaItemToCommentConnection;
    MediaItemToCommentConnectionEdge: MediaItemToCommentConnectionEdge;
    ContentNodeToEnqueuedScriptConnection: ContentNodeToEnqueuedScriptConnection;
    ContentNodeToEnqueuedScriptConnectionEdge: ContentNodeToEnqueuedScriptConnectionEdge;
    ContentNodeToEnqueuedStylesheetConnection: ContentNodeToEnqueuedStylesheetConnection;
    ContentNodeToEnqueuedStylesheetConnectionEdge: ContentNodeToEnqueuedStylesheetConnectionEdge;
    ContentNodeToEditLastConnectionEdge: ContentNodeToEditLastConnectionEdge;
    MediaDetails: MediaDetails;
    MediaItemMeta: MediaItemMeta;
    MediaSize: MediaSize;
    UserToPageConnection: UserToPageConnection;
    UserToPageConnectionEdge: UserToPageConnectionEdge;
    Page: Page;
    NodeWithContentEditor: NodeWithContentEditor;
    NodeWithFeaturedImage: NodeWithFeaturedImage;
    NodeWithFeaturedImageToMediaItemConnectionEdge: NodeWithFeaturedImageToMediaItemConnectionEdge;
    NodeWithRevisions: NodeWithRevisions;
    NodeWithRevisionsToContentNodeConnectionEdge: NodeWithRevisionsToContentNodeConnectionEdge;
    NodeWithPageAttributes: NodeWithPageAttributes;
    PageToCommentConnection: PageToCommentConnection;
    PageToCommentConnectionEdge: PageToCommentConnectionEdge;
    PageToPreviewConnectionEdge: PageToPreviewConnectionEdge;
    PageToRevisionConnection: PageToRevisionConnection;
    PageToRevisionConnectionEdge: PageToRevisionConnectionEdge;
    UserToPostConnection: UserToPostConnection;
    UserToPostConnectionEdge: UserToPostConnectionEdge;
    Post: Post;
    NodeWithExcerpt: NodeWithExcerpt;
    NodeWithTrackbacks: NodeWithTrackbacks;
    PostToCategoryConnection: PostToCategoryConnection;
    PostToCategoryConnectionEdge: PostToCategoryConnectionEdge;
    PostToCommentConnection: PostToCommentConnection;
    PostToCommentConnectionEdge: PostToCommentConnectionEdge;
    PostToPostFormatConnection: PostToPostFormatConnection;
    PostToPostFormatConnectionEdge: PostToPostFormatConnectionEdge;
    PostFormat: PostFormat;
    PostFormatToContentNodeConnection: PostFormatToContentNodeConnection;
    PostFormatToContentNodeConnectionEdge: PostFormatToContentNodeConnectionEdge;
    PostFormatToPostConnection: PostFormatToPostConnection;
    PostFormatToPostConnectionEdge: PostFormatToPostConnectionEdge;
    PostFormatToTaxonomyConnectionEdge: PostFormatToTaxonomyConnectionEdge;
    PostToPreviewConnectionEdge: PostToPreviewConnectionEdge;
    PostToRevisionConnection: PostToRevisionConnection;
    PostToRevisionConnectionEdge: PostToRevisionConnectionEdge;
    PostToTagConnection: PostToTagConnection;
    PostToTagConnectionEdge: PostToTagConnectionEdge;
    Tag: Tag;
    TagToContentNodeConnection: TagToContentNodeConnection;
    TagToContentNodeConnectionEdge: TagToContentNodeConnectionEdge;
    TagToPostConnection: TagToPostConnection;
    TagToPostConnectionEdge: TagToPostConnectionEdge;
    TagToTaxonomyConnectionEdge: TagToTaxonomyConnectionEdge;
    PostToTermNodeConnection: PostToTermNodeConnection;
    PostToTermNodeConnectionEdge: PostToTermNodeConnectionEdge;
    UserToContentRevisionUnionConnection: UserToContentRevisionUnionConnection;
    UserToContentRevisionUnionConnectionEdge: UserToContentRevisionUnionConnectionEdge;
    UserToUserRoleConnection: UserToUserRoleConnection;
    UserToUserRoleConnectionEdge: UserToUserRoleConnectionEdge;
    UserRole: UserRole;
    CategoryToParentCategoryConnectionEdge: CategoryToParentCategoryConnectionEdge;
    CategoryToPostConnection: CategoryToPostConnection;
    CategoryToPostConnectionEdge: CategoryToPostConnectionEdge;
    CategoryToTaxonomyConnectionEdge: CategoryToTaxonomyConnectionEdge;
    RootQueryToCommentConnection: RootQueryToCommentConnection;
    RootQueryToCommentConnectionEdge: RootQueryToCommentConnectionEdge;
    RootQueryToContentNodeConnection: RootQueryToContentNodeConnection;
    RootQueryToContentNodeConnectionEdge: RootQueryToContentNodeConnectionEdge;
    RootQueryToContentTypeConnection: RootQueryToContentTypeConnection;
    RootQueryToContentTypeConnectionEdge: RootQueryToContentTypeConnectionEdge;
    DiscussionSettings: DiscussionSettings;
    GeneralSettings: GeneralSettings;
    RootQueryToMediaItemConnection: RootQueryToMediaItemConnection;
    RootQueryToMediaItemConnectionEdge: RootQueryToMediaItemConnectionEdge;
    Menu: Menu;
    MenuToMenuItemConnection: MenuToMenuItemConnection;
    MenuToMenuItemConnectionEdge: MenuToMenuItemConnectionEdge;
    MenuItem: MenuItem;
    MenuItemToMenuItemConnection: MenuItemToMenuItemConnection;
    MenuItemToMenuItemConnectionEdge: MenuItemToMenuItemConnectionEdge;
    MenuItemToMenuItemLinkableConnectionEdge: MenuItemToMenuItemLinkableConnectionEdge;
    MenuItemToMenuConnectionEdge: MenuItemToMenuConnectionEdge;
    RootQueryToMenuItemConnection: RootQueryToMenuItemConnection;
    RootQueryToMenuItemConnectionEdge: RootQueryToMenuItemConnectionEdge;
    RootQueryToMenuConnection: RootQueryToMenuConnection;
    RootQueryToMenuConnectionEdge: RootQueryToMenuConnectionEdge;
    RootQueryToPageConnection: RootQueryToPageConnection;
    RootQueryToPageConnectionEdge: RootQueryToPageConnectionEdge;
    Plugin: Plugin;
    RootQueryToPluginConnection: RootQueryToPluginConnection;
    RootQueryToPluginConnectionEdge: RootQueryToPluginConnectionEdge;
    RootQueryToPostFormatConnection: RootQueryToPostFormatConnection;
    RootQueryToPostFormatConnectionEdge: RootQueryToPostFormatConnectionEdge;
    RootQueryToPostConnection: RootQueryToPostConnection;
    RootQueryToPostConnectionEdge: RootQueryToPostConnectionEdge;
    ReadingSettings: ReadingSettings;
    RootQueryToEnqueuedScriptConnection: RootQueryToEnqueuedScriptConnection;
    RootQueryToEnqueuedScriptConnectionEdge: RootQueryToEnqueuedScriptConnectionEdge;
    RootQueryToEnqueuedStylesheetConnection: RootQueryToEnqueuedStylesheetConnection;
    RootQueryToEnqueuedStylesheetConnectionEdge: RootQueryToEnqueuedStylesheetConnectionEdge;
    RootQueryToContentRevisionUnionConnection: RootQueryToContentRevisionUnionConnection;
    RootQueryToContentRevisionUnionConnectionEdge: RootQueryToContentRevisionUnionConnectionEdge;
    RootQueryToTagConnection: RootQueryToTagConnection;
    RootQueryToTagConnectionEdge: RootQueryToTagConnectionEdge;
    RootQueryToTaxonomyConnection: RootQueryToTaxonomyConnection;
    RootQueryToTaxonomyConnectionEdge: RootQueryToTaxonomyConnectionEdge;
    RootQueryToTermNodeConnection: RootQueryToTermNodeConnection;
    RootQueryToTermNodeConnectionEdge: RootQueryToTermNodeConnectionEdge;
    Theme: Theme;
    RootQueryToThemeConnection: RootQueryToThemeConnection;
    RootQueryToThemeConnectionEdge: RootQueryToThemeConnectionEdge;
    RootQueryToUserRoleConnection: RootQueryToUserRoleConnection;
    RootQueryToUserRoleConnectionEdge: RootQueryToUserRoleConnectionEdge;
    RootQueryToUserConnection: RootQueryToUserConnection;
    RootQueryToUserConnectionEdge: RootQueryToUserConnectionEdge;
    WritingSettings: WritingSettings;
    CreateCategoryPayload: CreateCategoryPayload;
    CreateCommentPayload: CreateCommentPayload;
    CreateMediaItemPayload: CreateMediaItemPayload;
    CreatePagePayload: CreatePagePayload;
    CreatePostPayload: CreatePostPayload;
    CreatePostFormatPayload: CreatePostFormatPayload;
    CreateTagPayload: CreateTagPayload;
    CreateUserPayload: CreateUserPayload;
    DeleteCategoryPayload: DeleteCategoryPayload;
    DeleteCommentPayload: DeleteCommentPayload;
    DeleteMediaItemPayload: DeleteMediaItemPayload;
    DeletePagePayload: DeletePagePayload;
    DeletePostPayload: DeletePostPayload;
    DeletePostFormatPayload: DeletePostFormatPayload;
    DeleteTagPayload: DeleteTagPayload;
    DeleteUserPayload: DeleteUserPayload;
    RegisterUserPayload: RegisterUserPayload;
    ResetUserPasswordPayload: ResetUserPasswordPayload;
    RestoreCommentPayload: RestoreCommentPayload;
    SendPasswordResetEmailPayload: SendPasswordResetEmailPayload;
    UpdateCategoryPayload: UpdateCategoryPayload;
    UpdateCommentPayload: UpdateCommentPayload;
    UpdateMediaItemPayload: UpdateMediaItemPayload;
    UpdatePagePayload: UpdatePagePayload;
    UpdatePostPayload: UpdatePostPayload;
    UpdatePostFormatPayload: UpdatePostFormatPayload;
    UpdateSettingsPayload: UpdateSettingsPayload;
    UpdateTagPayload: UpdateTagPayload;
    UpdateUserPayload: UpdateUserPayload;
    CommentAuthor: CommentAuthor;
    DefaultTemplate: DefaultTemplate;
}
export declare type SchemaObjectTypesNames = 'Query' | 'Mutation' | 'Subscription' | 'Settings' | 'RootQueryToCategoryConnection' | 'RootQueryToCategoryConnectionEdge' | 'Category' | 'Node' | 'TermNode' | 'UniformResourceIdentifiable' | 'TermNodeToEnqueuedScriptConnection' | 'TermNodeToEnqueuedScriptConnectionEdge' | 'EnqueuedScript' | 'EnqueuedAsset' | 'WPPageInfo' | 'TermNodeToEnqueuedStylesheetConnection' | 'TermNodeToEnqueuedStylesheetConnectionEdge' | 'EnqueuedStylesheet' | 'DatabaseIdentifier' | 'HierarchicalTermNode' | 'MenuItemLinkable' | 'CategoryToAncestorsCategoryConnection' | 'CategoryToAncestorsCategoryConnectionEdge' | 'CategoryToCategoryConnection' | 'CategoryToCategoryConnectionEdge' | 'CategoryToContentNodeConnection' | 'CategoryToContentNodeConnectionEdge' | 'ContentNode' | 'ContentNodeToContentTypeConnectionEdge' | 'ContentType' | 'ContentTypeToTaxonomyConnection' | 'ContentTypeToTaxonomyConnectionEdge' | 'Taxonomy' | 'TaxonomyToContentTypeConnection' | 'TaxonomyToContentTypeConnectionEdge' | 'ContentTypeToContentNodeConnection' | 'ContentTypeToContentNodeConnectionEdge' | 'PostTypeLabelDetails' | 'ContentNodeToEditLockConnectionEdge' | 'User' | 'Commenter' | 'Avatar' | 'UserToCommentConnection' | 'UserToCommentConnectionEdge' | 'Comment' | 'CommentToCommenterConnectionEdge' | 'CommentToContentNodeConnectionEdge' | 'CommentToParentCommentConnectionEdge' | 'CommentToCommentConnection' | 'CommentToCommentConnectionEdge' | 'UserToEnqueuedScriptConnection' | 'UserToEnqueuedScriptConnectionEdge' | 'UserToEnqueuedStylesheetConnection' | 'UserToEnqueuedStylesheetConnectionEdge' | 'UserToMediaItemConnection' | 'UserToMediaItemConnectionEdge' | 'MediaItem' | 'NodeWithTemplate' | 'ContentTemplate' | 'NodeWithTitle' | 'NodeWithAuthor' | 'NodeWithAuthorToUserConnectionEdge' | 'NodeWithComments' | 'HierarchicalContentNode' | 'HierarchicalContentNodeToContentNodeAncestorsConnection' | 'HierarchicalContentNodeToContentNodeAncestorsConnectionEdge' | 'HierarchicalContentNodeToContentNodeChildrenConnection' | 'HierarchicalContentNodeToContentNodeChildrenConnectionEdge' | 'HierarchicalContentNodeToParentContentNodeConnectionEdge' | 'MediaItemToCommentConnection' | 'MediaItemToCommentConnectionEdge' | 'ContentNodeToEnqueuedScriptConnection' | 'ContentNodeToEnqueuedScriptConnectionEdge' | 'ContentNodeToEnqueuedStylesheetConnection' | 'ContentNodeToEnqueuedStylesheetConnectionEdge' | 'ContentNodeToEditLastConnectionEdge' | 'MediaDetails' | 'MediaItemMeta' | 'MediaSize' | 'UserToPageConnection' | 'UserToPageConnectionEdge' | 'Page' | 'NodeWithContentEditor' | 'NodeWithFeaturedImage' | 'NodeWithFeaturedImageToMediaItemConnectionEdge' | 'NodeWithRevisions' | 'NodeWithRevisionsToContentNodeConnectionEdge' | 'NodeWithPageAttributes' | 'PageToCommentConnection' | 'PageToCommentConnectionEdge' | 'PageToPreviewConnectionEdge' | 'PageToRevisionConnection' | 'PageToRevisionConnectionEdge' | 'UserToPostConnection' | 'UserToPostConnectionEdge' | 'Post' | 'NodeWithExcerpt' | 'NodeWithTrackbacks' | 'PostToCategoryConnection' | 'PostToCategoryConnectionEdge' | 'PostToCommentConnection' | 'PostToCommentConnectionEdge' | 'PostToPostFormatConnection' | 'PostToPostFormatConnectionEdge' | 'PostFormat' | 'PostFormatToContentNodeConnection' | 'PostFormatToContentNodeConnectionEdge' | 'PostFormatToPostConnection' | 'PostFormatToPostConnectionEdge' | 'PostFormatToTaxonomyConnectionEdge' | 'PostToPreviewConnectionEdge' | 'PostToRevisionConnection' | 'PostToRevisionConnectionEdge' | 'PostToTagConnection' | 'PostToTagConnectionEdge' | 'Tag' | 'TagToContentNodeConnection' | 'TagToContentNodeConnectionEdge' | 'TagToPostConnection' | 'TagToPostConnectionEdge' | 'TagToTaxonomyConnectionEdge' | 'PostToTermNodeConnection' | 'PostToTermNodeConnectionEdge' | 'UserToContentRevisionUnionConnection' | 'UserToContentRevisionUnionConnectionEdge' | 'UserToUserRoleConnection' | 'UserToUserRoleConnectionEdge' | 'UserRole' | 'CategoryToParentCategoryConnectionEdge' | 'CategoryToPostConnection' | 'CategoryToPostConnectionEdge' | 'CategoryToTaxonomyConnectionEdge' | 'RootQueryToCommentConnection' | 'RootQueryToCommentConnectionEdge' | 'RootQueryToContentNodeConnection' | 'RootQueryToContentNodeConnectionEdge' | 'RootQueryToContentTypeConnection' | 'RootQueryToContentTypeConnectionEdge' | 'DiscussionSettings' | 'GeneralSettings' | 'RootQueryToMediaItemConnection' | 'RootQueryToMediaItemConnectionEdge' | 'Menu' | 'MenuToMenuItemConnection' | 'MenuToMenuItemConnectionEdge' | 'MenuItem' | 'MenuItemToMenuItemConnection' | 'MenuItemToMenuItemConnectionEdge' | 'MenuItemToMenuItemLinkableConnectionEdge' | 'MenuItemToMenuConnectionEdge' | 'RootQueryToMenuItemConnection' | 'RootQueryToMenuItemConnectionEdge' | 'RootQueryToMenuConnection' | 'RootQueryToMenuConnectionEdge' | 'RootQueryToPageConnection' | 'RootQueryToPageConnectionEdge' | 'Plugin' | 'RootQueryToPluginConnection' | 'RootQueryToPluginConnectionEdge' | 'RootQueryToPostFormatConnection' | 'RootQueryToPostFormatConnectionEdge' | 'RootQueryToPostConnection' | 'RootQueryToPostConnectionEdge' | 'ReadingSettings' | 'RootQueryToEnqueuedScriptConnection' | 'RootQueryToEnqueuedScriptConnectionEdge' | 'RootQueryToEnqueuedStylesheetConnection' | 'RootQueryToEnqueuedStylesheetConnectionEdge' | 'RootQueryToContentRevisionUnionConnection' | 'RootQueryToContentRevisionUnionConnectionEdge' | 'RootQueryToTagConnection' | 'RootQueryToTagConnectionEdge' | 'RootQueryToTaxonomyConnection' | 'RootQueryToTaxonomyConnectionEdge' | 'RootQueryToTermNodeConnection' | 'RootQueryToTermNodeConnectionEdge' | 'Theme' | 'RootQueryToThemeConnection' | 'RootQueryToThemeConnectionEdge' | 'RootQueryToUserRoleConnection' | 'RootQueryToUserRoleConnectionEdge' | 'RootQueryToUserConnection' | 'RootQueryToUserConnectionEdge' | 'WritingSettings' | 'CreateCategoryPayload' | 'CreateCommentPayload' | 'CreateMediaItemPayload' | 'CreatePagePayload' | 'CreatePostPayload' | 'CreatePostFormatPayload' | 'CreateTagPayload' | 'CreateUserPayload' | 'DeleteCategoryPayload' | 'DeleteCommentPayload' | 'DeleteMediaItemPayload' | 'DeletePagePayload' | 'DeletePostPayload' | 'DeletePostFormatPayload' | 'DeleteTagPayload' | 'DeleteUserPayload' | 'RegisterUserPayload' | 'ResetUserPasswordPayload' | 'RestoreCommentPayload' | 'SendPasswordResetEmailPayload' | 'UpdateCategoryPayload' | 'UpdateCommentPayload' | 'UpdateMediaItemPayload' | 'UpdatePagePayload' | 'UpdatePostPayload' | 'UpdatePostFormatPayload' | 'UpdateSettingsPayload' | 'UpdateTagPayload' | 'UpdateUserPayload' | 'CommentAuthor' | 'DefaultTemplate';
export declare type ContentRevisionUnion = {
    __typename: 'Post' | undefined;
    ancestors?: undefined;
    author?: Maybe<NodeWithAuthorToUserConnectionEdge>;
    authorDatabaseId?: Maybe<ScalarsEnums['Int']>;
    authorId?: Maybe<ScalarsEnums['ID']>;
    categories: (args?: {
        first?: Maybe<Scalars['Int']>;
        last?: Maybe<Scalars['Int']>;
        after?: Maybe<Scalars['String']>;
        before?: Maybe<Scalars['String']>;
        where?: Maybe<PostToCategoryConnectionWhereArgs>;
    }) => Maybe<PostToCategoryConnection>;
    children?: undefined;
    commentCount?: Maybe<ScalarsEnums['Int']>;
    commentStatus?: Maybe<ScalarsEnums['String']>;
    comments: (args?: {
        first?: Maybe<Scalars['Int']>;
        last?: Maybe<Scalars['Int']>;
        after?: Maybe<Scalars['String']>;
        before?: Maybe<Scalars['String']>;
        where?: Maybe<PostToCommentConnectionWhereArgs>;
    }) => Maybe<PostToCommentConnection>;
    content: (args?: {
        format?: Maybe<PostObjectFieldFormatEnum>;
    }) => Maybe<ScalarsEnums['String']>;
    contentType?: Maybe<ContentNodeToContentTypeConnectionEdge>;
    databaseId: ScalarsEnums['Int'];
    date?: Maybe<ScalarsEnums['String']>;
    dateGmt?: Maybe<ScalarsEnums['String']>;
    desiredSlug?: Maybe<ScalarsEnums['String']>;
    editingLockedBy?: Maybe<ContentNodeToEditLockConnectionEdge>;
    enclosure?: Maybe<ScalarsEnums['String']>;
    enqueuedScripts: (args?: {
        first?: Maybe<Scalars['Int']>;
        last?: Maybe<Scalars['Int']>;
        after?: Maybe<Scalars['String']>;
        before?: Maybe<Scalars['String']>;
    }) => Maybe<ContentNodeToEnqueuedScriptConnection>;
    enqueuedStylesheets: (args?: {
        first?: Maybe<Scalars['Int']>;
        last?: Maybe<Scalars['Int']>;
        after?: Maybe<Scalars['String']>;
        before?: Maybe<Scalars['String']>;
    }) => Maybe<ContentNodeToEnqueuedStylesheetConnection>;
    excerpt: (args?: {
        format?: Maybe<PostObjectFieldFormatEnum>;
    }) => Maybe<ScalarsEnums['String']>;
    featuredImage?: Maybe<NodeWithFeaturedImageToMediaItemConnectionEdge>;
    featuredImageDatabaseId?: Maybe<ScalarsEnums['Int']>;
    featuredImageId?: Maybe<ScalarsEnums['ID']>;
    guid?: Maybe<ScalarsEnums['String']>;
    id: ScalarsEnums['ID'];
    isContentNode: ScalarsEnums['Boolean'];
    isFrontPage?: undefined;
    isPostsPage?: undefined;
    isPreview?: Maybe<ScalarsEnums['Boolean']>;
    isPrivacyPage?: undefined;
    isRestricted?: Maybe<ScalarsEnums['Boolean']>;
    isRevision?: Maybe<ScalarsEnums['Boolean']>;
    isSticky: ScalarsEnums['Boolean'];
    isTermNode: ScalarsEnums['Boolean'];
    lastEditedBy?: Maybe<ContentNodeToEditLastConnectionEdge>;
    link?: Maybe<ScalarsEnums['String']>;
    menuOrder?: undefined;
    modified?: Maybe<ScalarsEnums['String']>;
    modifiedGmt?: Maybe<ScalarsEnums['String']>;
    pageId?: undefined;
    parent?: undefined;
    parentDatabaseId?: undefined;
    parentId?: undefined;
    pingStatus?: Maybe<ScalarsEnums['String']>;
    pinged?: Maybe<Array<Maybe<ScalarsEnums['String']>>>;
    postFormats: (args?: {
        first?: Maybe<Scalars['Int']>;
        last?: Maybe<Scalars['Int']>;
        after?: Maybe<Scalars['String']>;
        before?: Maybe<Scalars['String']>;
        where?: Maybe<PostToPostFormatConnectionWhereArgs>;
    }) => Maybe<PostToPostFormatConnection>;
    postId: ScalarsEnums['Int'];
    preview?: Maybe<PostToPreviewConnectionEdge>;
    previewRevisionDatabaseId?: Maybe<ScalarsEnums['Int']>;
    previewRevisionId?: Maybe<ScalarsEnums['ID']>;
    revisionOf?: Maybe<NodeWithRevisionsToContentNodeConnectionEdge>;
    revisions: (args?: {
        first?: Maybe<Scalars['Int']>;
        last?: Maybe<Scalars['Int']>;
        after?: Maybe<Scalars['String']>;
        before?: Maybe<Scalars['String']>;
        where?: Maybe<PostToRevisionConnectionWhereArgs>;
    }) => Maybe<PostToRevisionConnection>;
    slug?: Maybe<ScalarsEnums['String']>;
    status?: Maybe<ScalarsEnums['String']>;
    tags: (args?: {
        first?: Maybe<Scalars['Int']>;
        last?: Maybe<Scalars['Int']>;
        after?: Maybe<Scalars['String']>;
        before?: Maybe<Scalars['String']>;
        where?: Maybe<PostToTagConnectionWhereArgs>;
    }) => Maybe<PostToTagConnection>;
    template?: Maybe<ContentTemplate>;
    terms: (args?: {
        first?: Maybe<Scalars['Int']>;
        last?: Maybe<Scalars['Int']>;
        after?: Maybe<Scalars['String']>;
        before?: Maybe<Scalars['String']>;
        where?: Maybe<PostToTermNodeConnectionWhereArgs>;
    }) => Maybe<PostToTermNodeConnection>;
    title: (args?: {
        format?: Maybe<PostObjectFieldFormatEnum>;
    }) => Maybe<ScalarsEnums['String']>;
    toPing?: Maybe<Array<Maybe<ScalarsEnums['String']>>>;
    uri?: Maybe<ScalarsEnums['String']>;
} | {
    __typename: 'Page' | undefined;
    ancestors: (args?: {
        first?: Maybe<Scalars['Int']>;
        last?: Maybe<Scalars['Int']>;
        after?: Maybe<Scalars['String']>;
        before?: Maybe<Scalars['String']>;
        where?: Maybe<HierarchicalContentNodeToContentNodeAncestorsConnectionWhereArgs>;
    }) => Maybe<HierarchicalContentNodeToContentNodeAncestorsConnection>;
    author?: Maybe<NodeWithAuthorToUserConnectionEdge>;
    authorDatabaseId?: Maybe<ScalarsEnums['Int']>;
    authorId?: Maybe<ScalarsEnums['ID']>;
    categories?: undefined;
    children: (args?: {
        first?: Maybe<Scalars['Int']>;
        last?: Maybe<Scalars['Int']>;
        after?: Maybe<Scalars['String']>;
        before?: Maybe<Scalars['String']>;
        where?: Maybe<HierarchicalContentNodeToContentNodeChildrenConnectionWhereArgs>;
    }) => Maybe<HierarchicalContentNodeToContentNodeChildrenConnection>;
    commentCount?: Maybe<ScalarsEnums['Int']>;
    commentStatus?: Maybe<ScalarsEnums['String']>;
    comments: (args?: {
        first?: Maybe<Scalars['Int']>;
        last?: Maybe<Scalars['Int']>;
        after?: Maybe<Scalars['String']>;
        before?: Maybe<Scalars['String']>;
        where?: Maybe<PageToCommentConnectionWhereArgs>;
    }) => Maybe<PageToCommentConnection>;
    content: (args?: {
        format?: Maybe<PostObjectFieldFormatEnum>;
    }) => Maybe<ScalarsEnums['String']>;
    contentType?: Maybe<ContentNodeToContentTypeConnectionEdge>;
    databaseId: ScalarsEnums['Int'];
    date?: Maybe<ScalarsEnums['String']>;
    dateGmt?: Maybe<ScalarsEnums['String']>;
    desiredSlug?: Maybe<ScalarsEnums['String']>;
    editingLockedBy?: Maybe<ContentNodeToEditLockConnectionEdge>;
    enclosure?: Maybe<ScalarsEnums['String']>;
    enqueuedScripts: (args?: {
        first?: Maybe<Scalars['Int']>;
        last?: Maybe<Scalars['Int']>;
        after?: Maybe<Scalars['String']>;
        before?: Maybe<Scalars['String']>;
    }) => Maybe<ContentNodeToEnqueuedScriptConnection>;
    enqueuedStylesheets: (args?: {
        first?: Maybe<Scalars['Int']>;
        last?: Maybe<Scalars['Int']>;
        after?: Maybe<Scalars['String']>;
        before?: Maybe<Scalars['String']>;
    }) => Maybe<ContentNodeToEnqueuedStylesheetConnection>;
    excerpt?: undefined;
    featuredImage?: Maybe<NodeWithFeaturedImageToMediaItemConnectionEdge>;
    featuredImageDatabaseId?: Maybe<ScalarsEnums['Int']>;
    featuredImageId?: Maybe<ScalarsEnums['ID']>;
    guid?: Maybe<ScalarsEnums['String']>;
    id: ScalarsEnums['ID'];
    isContentNode: ScalarsEnums['Boolean'];
    isFrontPage: ScalarsEnums['Boolean'];
    isPostsPage: ScalarsEnums['Boolean'];
    isPreview?: Maybe<ScalarsEnums['Boolean']>;
    isPrivacyPage: ScalarsEnums['Boolean'];
    isRestricted?: Maybe<ScalarsEnums['Boolean']>;
    isRevision?: Maybe<ScalarsEnums['Boolean']>;
    isSticky?: undefined;
    isTermNode: ScalarsEnums['Boolean'];
    lastEditedBy?: Maybe<ContentNodeToEditLastConnectionEdge>;
    link?: Maybe<ScalarsEnums['String']>;
    menuOrder?: Maybe<ScalarsEnums['Int']>;
    modified?: Maybe<ScalarsEnums['String']>;
    modifiedGmt?: Maybe<ScalarsEnums['String']>;
    pageId: ScalarsEnums['Int'];
    parent?: Maybe<HierarchicalContentNodeToParentContentNodeConnectionEdge>;
    parentDatabaseId?: Maybe<ScalarsEnums['Int']>;
    parentId?: Maybe<ScalarsEnums['ID']>;
    pingStatus?: undefined;
    pinged?: undefined;
    postFormats?: undefined;
    postId?: undefined;
    preview?: Maybe<PageToPreviewConnectionEdge>;
    previewRevisionDatabaseId?: Maybe<ScalarsEnums['Int']>;
    previewRevisionId?: Maybe<ScalarsEnums['ID']>;
    revisionOf?: Maybe<NodeWithRevisionsToContentNodeConnectionEdge>;
    revisions: (args?: {
        first?: Maybe<Scalars['Int']>;
        last?: Maybe<Scalars['Int']>;
        after?: Maybe<Scalars['String']>;
        before?: Maybe<Scalars['String']>;
        where?: Maybe<PageToRevisionConnectionWhereArgs>;
    }) => Maybe<PageToRevisionConnection>;
    slug?: Maybe<ScalarsEnums['String']>;
    status?: Maybe<ScalarsEnums['String']>;
    tags?: undefined;
    template?: Maybe<ContentTemplate>;
    terms?: undefined;
    title: (args?: {
        format?: Maybe<PostObjectFieldFormatEnum>;
    }) => Maybe<ScalarsEnums['String']>;
    toPing?: undefined;
    uri?: Maybe<ScalarsEnums['String']>;
};
export declare type MenuItemObjectUnion = {
    __typename: 'Post' | undefined;
    ancestors?: undefined;
    author?: Maybe<NodeWithAuthorToUserConnectionEdge>;
    authorDatabaseId?: Maybe<ScalarsEnums['Int']>;
    authorId?: Maybe<ScalarsEnums['ID']>;
    categories: (args?: {
        first?: Maybe<Scalars['Int']>;
        last?: Maybe<Scalars['Int']>;
        after?: Maybe<Scalars['String']>;
        before?: Maybe<Scalars['String']>;
        where?: Maybe<PostToCategoryConnectionWhereArgs>;
    }) => Maybe<PostToCategoryConnection>;
    categoryId?: undefined;
    children?: undefined;
    commentCount?: Maybe<ScalarsEnums['Int']>;
    commentStatus?: Maybe<ScalarsEnums['String']>;
    comments: (args?: {
        first?: Maybe<Scalars['Int']>;
        last?: Maybe<Scalars['Int']>;
        after?: Maybe<Scalars['String']>;
        before?: Maybe<Scalars['String']>;
        where?: Maybe<PostToCommentConnectionWhereArgs>;
    }) => Maybe<PostToCommentConnection>;
    content: (args?: {
        format?: Maybe<PostObjectFieldFormatEnum>;
    }) => Maybe<ScalarsEnums['String']>;
    contentNodes?: undefined;
    contentType?: Maybe<ContentNodeToContentTypeConnectionEdge>;
    count?: undefined;
    databaseId: ScalarsEnums['Int'];
    date?: Maybe<ScalarsEnums['String']>;
    dateGmt?: Maybe<ScalarsEnums['String']>;
    description?: undefined;
    desiredSlug?: Maybe<ScalarsEnums['String']>;
    editingLockedBy?: Maybe<ContentNodeToEditLockConnectionEdge>;
    enclosure?: Maybe<ScalarsEnums['String']>;
    enqueuedScripts: (args?: {
        first?: Maybe<Scalars['Int']>;
        last?: Maybe<Scalars['Int']>;
        after?: Maybe<Scalars['String']>;
        before?: Maybe<Scalars['String']>;
    }) => Maybe<ContentNodeToEnqueuedScriptConnection>;
    enqueuedStylesheets: (args?: {
        first?: Maybe<Scalars['Int']>;
        last?: Maybe<Scalars['Int']>;
        after?: Maybe<Scalars['String']>;
        before?: Maybe<Scalars['String']>;
    }) => Maybe<ContentNodeToEnqueuedStylesheetConnection>;
    excerpt: (args?: {
        format?: Maybe<PostObjectFieldFormatEnum>;
    }) => Maybe<ScalarsEnums['String']>;
    featuredImage?: Maybe<NodeWithFeaturedImageToMediaItemConnectionEdge>;
    featuredImageDatabaseId?: Maybe<ScalarsEnums['Int']>;
    featuredImageId?: Maybe<ScalarsEnums['ID']>;
    guid?: Maybe<ScalarsEnums['String']>;
    id: ScalarsEnums['ID'];
    isContentNode: ScalarsEnums['Boolean'];
    isFrontPage?: undefined;
    isPostsPage?: undefined;
    isPreview?: Maybe<ScalarsEnums['Boolean']>;
    isPrivacyPage?: undefined;
    isRestricted?: Maybe<ScalarsEnums['Boolean']>;
    isRevision?: Maybe<ScalarsEnums['Boolean']>;
    isSticky: ScalarsEnums['Boolean'];
    isTermNode: ScalarsEnums['Boolean'];
    lastEditedBy?: Maybe<ContentNodeToEditLastConnectionEdge>;
    link?: Maybe<ScalarsEnums['String']>;
    menuOrder?: undefined;
    modified?: Maybe<ScalarsEnums['String']>;
    modifiedGmt?: Maybe<ScalarsEnums['String']>;
    name?: undefined;
    pageId?: undefined;
    parent?: undefined;
    parentDatabaseId?: undefined;
    parentId?: undefined;
    pingStatus?: Maybe<ScalarsEnums['String']>;
    pinged?: Maybe<Array<Maybe<ScalarsEnums['String']>>>;
    postFormatId?: undefined;
    postFormats: (args?: {
        first?: Maybe<Scalars['Int']>;
        last?: Maybe<Scalars['Int']>;
        after?: Maybe<Scalars['String']>;
        before?: Maybe<Scalars['String']>;
        where?: Maybe<PostToPostFormatConnectionWhereArgs>;
    }) => Maybe<PostToPostFormatConnection>;
    postId: ScalarsEnums['Int'];
    posts?: undefined;
    preview?: Maybe<PostToPreviewConnectionEdge>;
    previewRevisionDatabaseId?: Maybe<ScalarsEnums['Int']>;
    previewRevisionId?: Maybe<ScalarsEnums['ID']>;
    revisionOf?: Maybe<NodeWithRevisionsToContentNodeConnectionEdge>;
    revisions: (args?: {
        first?: Maybe<Scalars['Int']>;
        last?: Maybe<Scalars['Int']>;
        after?: Maybe<Scalars['String']>;
        before?: Maybe<Scalars['String']>;
        where?: Maybe<PostToRevisionConnectionWhereArgs>;
    }) => Maybe<PostToRevisionConnection>;
    slug?: Maybe<ScalarsEnums['String']>;
    status?: Maybe<ScalarsEnums['String']>;
    tagId?: undefined;
    tags: (args?: {
        first?: Maybe<Scalars['Int']>;
        last?: Maybe<Scalars['Int']>;
        after?: Maybe<Scalars['String']>;
        before?: Maybe<Scalars['String']>;
        where?: Maybe<PostToTagConnectionWhereArgs>;
    }) => Maybe<PostToTagConnection>;
    taxonomy?: undefined;
    template?: Maybe<ContentTemplate>;
    termGroupId?: undefined;
    termTaxonomyId?: undefined;
    terms: (args?: {
        first?: Maybe<Scalars['Int']>;
        last?: Maybe<Scalars['Int']>;
        after?: Maybe<Scalars['String']>;
        before?: Maybe<Scalars['String']>;
        where?: Maybe<PostToTermNodeConnectionWhereArgs>;
    }) => Maybe<PostToTermNodeConnection>;
    title: (args?: {
        format?: Maybe<PostObjectFieldFormatEnum>;
    }) => Maybe<ScalarsEnums['String']>;
    toPing?: Maybe<Array<Maybe<ScalarsEnums['String']>>>;
    uri?: Maybe<ScalarsEnums['String']>;
} | {
    __typename: 'Page' | undefined;
    ancestors: (args?: {
        first?: Maybe<Scalars['Int']>;
        last?: Maybe<Scalars['Int']>;
        after?: Maybe<Scalars['String']>;
        before?: Maybe<Scalars['String']>;
        where?: Maybe<HierarchicalContentNodeToContentNodeAncestorsConnectionWhereArgs>;
    }) => Maybe<HierarchicalContentNodeToContentNodeAncestorsConnection>;
    author?: Maybe<NodeWithAuthorToUserConnectionEdge>;
    authorDatabaseId?: Maybe<ScalarsEnums['Int']>;
    authorId?: Maybe<ScalarsEnums['ID']>;
    categories?: undefined;
    categoryId?: undefined;
    children: (args?: {
        first?: Maybe<Scalars['Int']>;
        last?: Maybe<Scalars['Int']>;
        after?: Maybe<Scalars['String']>;
        before?: Maybe<Scalars['String']>;
        where?: Maybe<HierarchicalContentNodeToContentNodeChildrenConnectionWhereArgs>;
    }) => Maybe<HierarchicalContentNodeToContentNodeChildrenConnection>;
    commentCount?: Maybe<ScalarsEnums['Int']>;
    commentStatus?: Maybe<ScalarsEnums['String']>;
    comments: (args?: {
        first?: Maybe<Scalars['Int']>;
        last?: Maybe<Scalars['Int']>;
        after?: Maybe<Scalars['String']>;
        before?: Maybe<Scalars['String']>;
        where?: Maybe<PageToCommentConnectionWhereArgs>;
    }) => Maybe<PageToCommentConnection>;
    content: (args?: {
        format?: Maybe<PostObjectFieldFormatEnum>;
    }) => Maybe<ScalarsEnums['String']>;
    contentNodes?: undefined;
    contentType?: Maybe<ContentNodeToContentTypeConnectionEdge>;
    count?: undefined;
    databaseId: ScalarsEnums['Int'];
    date?: Maybe<ScalarsEnums['String']>;
    dateGmt?: Maybe<ScalarsEnums['String']>;
    description?: undefined;
    desiredSlug?: Maybe<ScalarsEnums['String']>;
    editingLockedBy?: Maybe<ContentNodeToEditLockConnectionEdge>;
    enclosure?: Maybe<ScalarsEnums['String']>;
    enqueuedScripts: (args?: {
        first?: Maybe<Scalars['Int']>;
        last?: Maybe<Scalars['Int']>;
        after?: Maybe<Scalars['String']>;
        before?: Maybe<Scalars['String']>;
    }) => Maybe<ContentNodeToEnqueuedScriptConnection>;
    enqueuedStylesheets: (args?: {
        first?: Maybe<Scalars['Int']>;
        last?: Maybe<Scalars['Int']>;
        after?: Maybe<Scalars['String']>;
        before?: Maybe<Scalars['String']>;
    }) => Maybe<ContentNodeToEnqueuedStylesheetConnection>;
    excerpt?: undefined;
    featuredImage?: Maybe<NodeWithFeaturedImageToMediaItemConnectionEdge>;
    featuredImageDatabaseId?: Maybe<ScalarsEnums['Int']>;
    featuredImageId?: Maybe<ScalarsEnums['ID']>;
    guid?: Maybe<ScalarsEnums['String']>;
    id: ScalarsEnums['ID'];
    isContentNode: ScalarsEnums['Boolean'];
    isFrontPage: ScalarsEnums['Boolean'];
    isPostsPage: ScalarsEnums['Boolean'];
    isPreview?: Maybe<ScalarsEnums['Boolean']>;
    isPrivacyPage: ScalarsEnums['Boolean'];
    isRestricted?: Maybe<ScalarsEnums['Boolean']>;
    isRevision?: Maybe<ScalarsEnums['Boolean']>;
    isSticky?: undefined;
    isTermNode: ScalarsEnums['Boolean'];
    lastEditedBy?: Maybe<ContentNodeToEditLastConnectionEdge>;
    link?: Maybe<ScalarsEnums['String']>;
    menuOrder?: Maybe<ScalarsEnums['Int']>;
    modified?: Maybe<ScalarsEnums['String']>;
    modifiedGmt?: Maybe<ScalarsEnums['String']>;
    name?: undefined;
    pageId: ScalarsEnums['Int'];
    parent?: Maybe<HierarchicalContentNodeToParentContentNodeConnectionEdge>;
    parentDatabaseId?: Maybe<ScalarsEnums['Int']>;
    parentId?: Maybe<ScalarsEnums['ID']>;
    pingStatus?: undefined;
    pinged?: undefined;
    postFormatId?: undefined;
    postFormats?: undefined;
    postId?: undefined;
    posts?: undefined;
    preview?: Maybe<PageToPreviewConnectionEdge>;
    previewRevisionDatabaseId?: Maybe<ScalarsEnums['Int']>;
    previewRevisionId?: Maybe<ScalarsEnums['ID']>;
    revisionOf?: Maybe<NodeWithRevisionsToContentNodeConnectionEdge>;
    revisions: (args?: {
        first?: Maybe<Scalars['Int']>;
        last?: Maybe<Scalars['Int']>;
        after?: Maybe<Scalars['String']>;
        before?: Maybe<Scalars['String']>;
        where?: Maybe<PageToRevisionConnectionWhereArgs>;
    }) => Maybe<PageToRevisionConnection>;
    slug?: Maybe<ScalarsEnums['String']>;
    status?: Maybe<ScalarsEnums['String']>;
    tagId?: undefined;
    tags?: undefined;
    taxonomy?: undefined;
    template?: Maybe<ContentTemplate>;
    termGroupId?: undefined;
    termTaxonomyId?: undefined;
    terms?: undefined;
    title: (args?: {
        format?: Maybe<PostObjectFieldFormatEnum>;
    }) => Maybe<ScalarsEnums['String']>;
    toPing?: undefined;
    uri?: Maybe<ScalarsEnums['String']>;
} | {
    __typename: 'Category' | undefined;
    ancestors: (args?: {
        first?: Maybe<Scalars['Int']>;
        last?: Maybe<Scalars['Int']>;
        after?: Maybe<Scalars['String']>;
        before?: Maybe<Scalars['String']>;
    }) => Maybe<CategoryToAncestorsCategoryConnection>;
    author?: undefined;
    authorDatabaseId?: undefined;
    authorId?: undefined;
    categories?: undefined;
    categoryId?: Maybe<ScalarsEnums['Int']>;
    children: (args?: {
        first?: Maybe<Scalars['Int']>;
        last?: Maybe<Scalars['Int']>;
        after?: Maybe<Scalars['String']>;
        before?: Maybe<Scalars['String']>;
        where?: Maybe<CategoryToCategoryConnectionWhereArgs>;
    }) => Maybe<CategoryToCategoryConnection>;
    commentCount?: undefined;
    commentStatus?: undefined;
    comments?: undefined;
    content?: undefined;
    contentNodes: (args?: {
        first?: Maybe<Scalars['Int']>;
        last?: Maybe<Scalars['Int']>;
        after?: Maybe<Scalars['String']>;
        before?: Maybe<Scalars['String']>;
        where?: Maybe<CategoryToContentNodeConnectionWhereArgs>;
    }) => Maybe<CategoryToContentNodeConnection>;
    contentType?: undefined;
    count?: Maybe<ScalarsEnums['Int']>;
    databaseId: ScalarsEnums['Int'];
    date?: undefined;
    dateGmt?: undefined;
    description?: Maybe<ScalarsEnums['String']>;
    desiredSlug?: undefined;
    editingLockedBy?: undefined;
    enclosure?: undefined;
    enqueuedScripts: (args?: {
        first?: Maybe<Scalars['Int']>;
        last?: Maybe<Scalars['Int']>;
        after?: Maybe<Scalars['String']>;
        before?: Maybe<Scalars['String']>;
    }) => Maybe<TermNodeToEnqueuedScriptConnection>;
    enqueuedStylesheets: (args?: {
        first?: Maybe<Scalars['Int']>;
        last?: Maybe<Scalars['Int']>;
        after?: Maybe<Scalars['String']>;
        before?: Maybe<Scalars['String']>;
    }) => Maybe<TermNodeToEnqueuedStylesheetConnection>;
    excerpt?: undefined;
    featuredImage?: undefined;
    featuredImageDatabaseId?: undefined;
    featuredImageId?: undefined;
    guid?: undefined;
    id: ScalarsEnums['ID'];
    isContentNode: ScalarsEnums['Boolean'];
    isFrontPage?: undefined;
    isPostsPage?: undefined;
    isPreview?: undefined;
    isPrivacyPage?: undefined;
    isRestricted?: Maybe<ScalarsEnums['Boolean']>;
    isRevision?: undefined;
    isSticky?: undefined;
    isTermNode: ScalarsEnums['Boolean'];
    lastEditedBy?: undefined;
    link?: Maybe<ScalarsEnums['String']>;
    menuOrder?: undefined;
    modified?: undefined;
    modifiedGmt?: undefined;
    name?: Maybe<ScalarsEnums['String']>;
    pageId?: undefined;
    parent?: Maybe<CategoryToParentCategoryConnectionEdge>;
    parentDatabaseId?: Maybe<ScalarsEnums['Int']>;
    parentId?: Maybe<ScalarsEnums['ID']>;
    pingStatus?: undefined;
    pinged?: undefined;
    postFormatId?: undefined;
    postFormats?: undefined;
    postId?: undefined;
    posts: (args?: {
        first?: Maybe<Scalars['Int']>;
        last?: Maybe<Scalars['Int']>;
        after?: Maybe<Scalars['String']>;
        before?: Maybe<Scalars['String']>;
        where?: Maybe<CategoryToPostConnectionWhereArgs>;
    }) => Maybe<CategoryToPostConnection>;
    preview?: undefined;
    previewRevisionDatabaseId?: undefined;
    previewRevisionId?: undefined;
    revisionOf?: undefined;
    revisions?: undefined;
    slug?: Maybe<ScalarsEnums['String']>;
    status?: undefined;
    tagId?: undefined;
    tags?: undefined;
    taxonomy?: Maybe<CategoryToTaxonomyConnectionEdge>;
    template?: undefined;
    termGroupId?: Maybe<ScalarsEnums['Int']>;
    termTaxonomyId?: Maybe<ScalarsEnums['Int']>;
    terms?: undefined;
    title?: undefined;
    toPing?: undefined;
    uri?: Maybe<ScalarsEnums['String']>;
} | {
    __typename: 'Tag' | undefined;
    ancestors?: undefined;
    author?: undefined;
    authorDatabaseId?: undefined;
    authorId?: undefined;
    categories?: undefined;
    categoryId?: undefined;
    children?: undefined;
    commentCount?: undefined;
    commentStatus?: undefined;
    comments?: undefined;
    content?: undefined;
    contentNodes: (args?: {
        first?: Maybe<Scalars['Int']>;
        last?: Maybe<Scalars['Int']>;
        after?: Maybe<Scalars['String']>;
        before?: Maybe<Scalars['String']>;
        where?: Maybe<TagToContentNodeConnectionWhereArgs>;
    }) => Maybe<TagToContentNodeConnection>;
    contentType?: undefined;
    count?: Maybe<ScalarsEnums['Int']>;
    databaseId: ScalarsEnums['Int'];
    date?: undefined;
    dateGmt?: undefined;
    description?: Maybe<ScalarsEnums['String']>;
    desiredSlug?: undefined;
    editingLockedBy?: undefined;
    enclosure?: undefined;
    enqueuedScripts: (args?: {
        first?: Maybe<Scalars['Int']>;
        last?: Maybe<Scalars['Int']>;
        after?: Maybe<Scalars['String']>;
        before?: Maybe<Scalars['String']>;
    }) => Maybe<TermNodeToEnqueuedScriptConnection>;
    enqueuedStylesheets: (args?: {
        first?: Maybe<Scalars['Int']>;
        last?: Maybe<Scalars['Int']>;
        after?: Maybe<Scalars['String']>;
        before?: Maybe<Scalars['String']>;
    }) => Maybe<TermNodeToEnqueuedStylesheetConnection>;
    excerpt?: undefined;
    featuredImage?: undefined;
    featuredImageDatabaseId?: undefined;
    featuredImageId?: undefined;
    guid?: undefined;
    id: ScalarsEnums['ID'];
    isContentNode: ScalarsEnums['Boolean'];
    isFrontPage?: undefined;
    isPostsPage?: undefined;
    isPreview?: undefined;
    isPrivacyPage?: undefined;
    isRestricted?: Maybe<ScalarsEnums['Boolean']>;
    isRevision?: undefined;
    isSticky?: undefined;
    isTermNode: ScalarsEnums['Boolean'];
    lastEditedBy?: undefined;
    link?: Maybe<ScalarsEnums['String']>;
    menuOrder?: undefined;
    modified?: undefined;
    modifiedGmt?: undefined;
    name?: Maybe<ScalarsEnums['String']>;
    pageId?: undefined;
    parent?: undefined;
    parentDatabaseId?: undefined;
    parentId?: undefined;
    pingStatus?: undefined;
    pinged?: undefined;
    postFormatId?: undefined;
    postFormats?: undefined;
    postId?: undefined;
    posts: (args?: {
        first?: Maybe<Scalars['Int']>;
        last?: Maybe<Scalars['Int']>;
        after?: Maybe<Scalars['String']>;
        before?: Maybe<Scalars['String']>;
        where?: Maybe<TagToPostConnectionWhereArgs>;
    }) => Maybe<TagToPostConnection>;
    preview?: undefined;
    previewRevisionDatabaseId?: undefined;
    previewRevisionId?: undefined;
    revisionOf?: undefined;
    revisions?: undefined;
    slug?: Maybe<ScalarsEnums['String']>;
    status?: undefined;
    tagId?: Maybe<ScalarsEnums['Int']>;
    tags?: undefined;
    taxonomy?: Maybe<TagToTaxonomyConnectionEdge>;
    template?: undefined;
    termGroupId?: Maybe<ScalarsEnums['Int']>;
    termTaxonomyId?: Maybe<ScalarsEnums['Int']>;
    terms?: undefined;
    title?: undefined;
    toPing?: undefined;
    uri?: Maybe<ScalarsEnums['String']>;
} | {
    __typename: 'PostFormat' | undefined;
    ancestors?: undefined;
    author?: undefined;
    authorDatabaseId?: undefined;
    authorId?: undefined;
    categories?: undefined;
    categoryId?: undefined;
    children?: undefined;
    commentCount?: undefined;
    commentStatus?: undefined;
    comments?: undefined;
    content?: undefined;
    contentNodes: (args?: {
        first?: Maybe<Scalars['Int']>;
        last?: Maybe<Scalars['Int']>;
        after?: Maybe<Scalars['String']>;
        before?: Maybe<Scalars['String']>;
        where?: Maybe<PostFormatToContentNodeConnectionWhereArgs>;
    }) => Maybe<PostFormatToContentNodeConnection>;
    contentType?: undefined;
    count?: Maybe<ScalarsEnums['Int']>;
    databaseId: ScalarsEnums['Int'];
    date?: undefined;
    dateGmt?: undefined;
    description?: Maybe<ScalarsEnums['String']>;
    desiredSlug?: undefined;
    editingLockedBy?: undefined;
    enclosure?: undefined;
    enqueuedScripts: (args?: {
        first?: Maybe<Scalars['Int']>;
        last?: Maybe<Scalars['Int']>;
        after?: Maybe<Scalars['String']>;
        before?: Maybe<Scalars['String']>;
    }) => Maybe<TermNodeToEnqueuedScriptConnection>;
    enqueuedStylesheets: (args?: {
        first?: Maybe<Scalars['Int']>;
        last?: Maybe<Scalars['Int']>;
        after?: Maybe<Scalars['String']>;
        before?: Maybe<Scalars['String']>;
    }) => Maybe<TermNodeToEnqueuedStylesheetConnection>;
    excerpt?: undefined;
    featuredImage?: undefined;
    featuredImageDatabaseId?: undefined;
    featuredImageId?: undefined;
    guid?: undefined;
    id: ScalarsEnums['ID'];
    isContentNode: ScalarsEnums['Boolean'];
    isFrontPage?: undefined;
    isPostsPage?: undefined;
    isPreview?: undefined;
    isPrivacyPage?: undefined;
    isRestricted?: Maybe<ScalarsEnums['Boolean']>;
    isRevision?: undefined;
    isSticky?: undefined;
    isTermNode: ScalarsEnums['Boolean'];
    lastEditedBy?: undefined;
    link?: Maybe<ScalarsEnums['String']>;
    menuOrder?: undefined;
    modified?: undefined;
    modifiedGmt?: undefined;
    name?: Maybe<ScalarsEnums['String']>;
    pageId?: undefined;
    parent?: undefined;
    parentDatabaseId?: undefined;
    parentId?: undefined;
    pingStatus?: undefined;
    pinged?: undefined;
    postFormatId?: Maybe<ScalarsEnums['Int']>;
    postFormats?: undefined;
    postId?: undefined;
    posts: (args?: {
        first?: Maybe<Scalars['Int']>;
        last?: Maybe<Scalars['Int']>;
        after?: Maybe<Scalars['String']>;
        before?: Maybe<Scalars['String']>;
        where?: Maybe<PostFormatToPostConnectionWhereArgs>;
    }) => Maybe<PostFormatToPostConnection>;
    preview?: undefined;
    previewRevisionDatabaseId?: undefined;
    previewRevisionId?: undefined;
    revisionOf?: undefined;
    revisions?: undefined;
    slug?: Maybe<ScalarsEnums['String']>;
    status?: undefined;
    tagId?: undefined;
    tags?: undefined;
    taxonomy?: Maybe<PostFormatToTaxonomyConnectionEdge>;
    template?: undefined;
    termGroupId?: Maybe<ScalarsEnums['Int']>;
    termTaxonomyId?: Maybe<ScalarsEnums['Int']>;
    terms?: undefined;
    title?: undefined;
    toPing?: undefined;
    uri?: Maybe<ScalarsEnums['String']>;
};
export interface Node {
    id: ScalarsEnums['ID'];
}
export interface TermNode {
    count?: Maybe<ScalarsEnums['Int']>;
    databaseId: ScalarsEnums['Int'];
    description?: Maybe<ScalarsEnums['String']>;
    id: ScalarsEnums['ID'];
    isContentNode: ScalarsEnums['Boolean'];
    isRestricted?: Maybe<ScalarsEnums['Boolean']>;
    isTermNode: ScalarsEnums['Boolean'];
    link?: Maybe<ScalarsEnums['String']>;
    name?: Maybe<ScalarsEnums['String']>;
    slug?: Maybe<ScalarsEnums['String']>;
    termGroupId?: Maybe<ScalarsEnums['Int']>;
    termTaxonomyId?: Maybe<ScalarsEnums['Int']>;
    uri?: Maybe<ScalarsEnums['String']>;
}
export interface UniformResourceIdentifiable {
    id: ScalarsEnums['ID'];
    isContentNode: ScalarsEnums['Boolean'];
    isTermNode: ScalarsEnums['Boolean'];
    uri?: Maybe<ScalarsEnums['String']>;
}
export interface EnqueuedAsset {
    args?: Maybe<ScalarsEnums['Boolean']>;
    dependencies?: Maybe<Array<Maybe<EnqueuedScript>>>;
    extra?: Maybe<ScalarsEnums['String']>;
    handle?: Maybe<ScalarsEnums['String']>;
    id: ScalarsEnums['ID'];
    src?: Maybe<ScalarsEnums['String']>;
    version?: Maybe<ScalarsEnums['String']>;
}
export interface DatabaseIdentifier {
    databaseId: ScalarsEnums['Int'];
}
export interface HierarchicalTermNode {
    parentDatabaseId?: Maybe<ScalarsEnums['Int']>;
    parentId?: Maybe<ScalarsEnums['ID']>;
}
export interface MenuItemLinkable {
    databaseId: ScalarsEnums['Int'];
    id: ScalarsEnums['ID'];
    uri?: Maybe<ScalarsEnums['String']>;
}
export interface ContentNode {
    contentType?: Maybe<ContentNodeToContentTypeConnectionEdge>;
    databaseId: ScalarsEnums['Int'];
    date?: Maybe<ScalarsEnums['String']>;
    dateGmt?: Maybe<ScalarsEnums['String']>;
    desiredSlug?: Maybe<ScalarsEnums['String']>;
    editingLockedBy?: Maybe<ContentNodeToEditLockConnectionEdge>;
    enclosure?: Maybe<ScalarsEnums['String']>;
    guid?: Maybe<ScalarsEnums['String']>;
    id: ScalarsEnums['ID'];
    isContentNode: ScalarsEnums['Boolean'];
    isPreview?: Maybe<ScalarsEnums['Boolean']>;
    isRestricted?: Maybe<ScalarsEnums['Boolean']>;
    isTermNode: ScalarsEnums['Boolean'];
    lastEditedBy?: Maybe<ContentNodeToEditLastConnectionEdge>;
    link?: Maybe<ScalarsEnums['String']>;
    modified?: Maybe<ScalarsEnums['String']>;
    modifiedGmt?: Maybe<ScalarsEnums['String']>;
    previewRevisionDatabaseId?: Maybe<ScalarsEnums['Int']>;
    previewRevisionId?: Maybe<ScalarsEnums['ID']>;
    slug?: Maybe<ScalarsEnums['String']>;
    status?: Maybe<ScalarsEnums['String']>;
    template?: Maybe<ContentTemplate>;
    uri?: Maybe<ScalarsEnums['String']>;
}
export interface Commenter {
    databaseId: ScalarsEnums['Int'];
    email?: Maybe<ScalarsEnums['String']>;
    id: ScalarsEnums['ID'];
    isRestricted?: Maybe<ScalarsEnums['Boolean']>;
    name?: Maybe<ScalarsEnums['String']>;
    url?: Maybe<ScalarsEnums['String']>;
}
export interface NodeWithTemplate {
    template?: Maybe<ContentTemplate>;
}
export interface ContentTemplate {
    templateName?: Maybe<ScalarsEnums['String']>;
}
export interface NodeWithTitle {
}
export interface NodeWithAuthor {
    author?: Maybe<NodeWithAuthorToUserConnectionEdge>;
    authorDatabaseId?: Maybe<ScalarsEnums['Int']>;
    authorId?: Maybe<ScalarsEnums['ID']>;
}
export interface NodeWithComments {
    commentCount?: Maybe<ScalarsEnums['Int']>;
    commentStatus?: Maybe<ScalarsEnums['String']>;
}
export interface HierarchicalContentNode {
    parent?: Maybe<HierarchicalContentNodeToParentContentNodeConnectionEdge>;
    parentDatabaseId?: Maybe<ScalarsEnums['Int']>;
    parentId?: Maybe<ScalarsEnums['ID']>;
}
export interface NodeWithContentEditor {
}
export interface NodeWithFeaturedImage {
    contentType?: Maybe<ContentNodeToContentTypeConnectionEdge>;
    databaseId: ScalarsEnums['Int'];
    date?: Maybe<ScalarsEnums['String']>;
    dateGmt?: Maybe<ScalarsEnums['String']>;
    desiredSlug?: Maybe<ScalarsEnums['String']>;
    editingLockedBy?: Maybe<ContentNodeToEditLockConnectionEdge>;
    enclosure?: Maybe<ScalarsEnums['String']>;
    featuredImage?: Maybe<NodeWithFeaturedImageToMediaItemConnectionEdge>;
    featuredImageDatabaseId?: Maybe<ScalarsEnums['Int']>;
    featuredImageId?: Maybe<ScalarsEnums['ID']>;
    guid?: Maybe<ScalarsEnums['String']>;
    id: ScalarsEnums['ID'];
    isContentNode: ScalarsEnums['Boolean'];
    isPreview?: Maybe<ScalarsEnums['Boolean']>;
    isRestricted?: Maybe<ScalarsEnums['Boolean']>;
    isTermNode: ScalarsEnums['Boolean'];
    lastEditedBy?: Maybe<ContentNodeToEditLastConnectionEdge>;
    link?: Maybe<ScalarsEnums['String']>;
    modified?: Maybe<ScalarsEnums['String']>;
    modifiedGmt?: Maybe<ScalarsEnums['String']>;
    previewRevisionDatabaseId?: Maybe<ScalarsEnums['Int']>;
    previewRevisionId?: Maybe<ScalarsEnums['ID']>;
    slug?: Maybe<ScalarsEnums['String']>;
    status?: Maybe<ScalarsEnums['String']>;
    template?: Maybe<ContentTemplate>;
    uri?: Maybe<ScalarsEnums['String']>;
}
export interface NodeWithRevisions {
    isRevision?: Maybe<ScalarsEnums['Boolean']>;
    revisionOf?: Maybe<NodeWithRevisionsToContentNodeConnectionEdge>;
}
export interface NodeWithPageAttributes {
    menuOrder?: Maybe<ScalarsEnums['Int']>;
}
export interface NodeWithExcerpt {
}
export interface NodeWithTrackbacks {
    pingStatus?: Maybe<ScalarsEnums['String']>;
    pinged?: Maybe<Array<Maybe<ScalarsEnums['String']>>>;
    toPing?: Maybe<Array<Maybe<ScalarsEnums['String']>>>;
}
export interface GeneratedSchema {
    query: Query;
    mutation: Mutation;
    subscription: Subscription;
}
export declare type MakeNullable<T> = {
    [K in keyof T]: T[K] | undefined;
};
export interface ScalarsEnums extends MakeNullable<Scalars> {
    OrderEnum: OrderEnum | undefined;
    TermObjectsConnectionOrderbyEnum: TermObjectsConnectionOrderbyEnum | undefined;
    ContentTypesOfCategoryEnum: ContentTypesOfCategoryEnum | undefined;
    PostObjectsConnectionDateColumnEnum: PostObjectsConnectionDateColumnEnum | undefined;
    RelationEnum: RelationEnum | undefined;
    MimeTypeEnum: MimeTypeEnum | undefined;
    PostObjectsConnectionOrderbyEnum: PostObjectsConnectionOrderbyEnum | undefined;
    PostStatusEnum: PostStatusEnum | undefined;
    ContentTypeEnum: ContentTypeEnum | undefined;
    AvatarRatingEnum: AvatarRatingEnum | undefined;
    CommentsConnectionOrderbyEnum: CommentsConnectionOrderbyEnum | undefined;
    PostObjectFieldFormatEnum: PostObjectFieldFormatEnum | undefined;
    MediaItemSizeEnum: MediaItemSizeEnum | undefined;
    ContentTypesOfPostFormatEnum: ContentTypesOfPostFormatEnum | undefined;
    ContentTypesOfTagEnum: ContentTypesOfTagEnum | undefined;
    TaxonomyEnum: TaxonomyEnum | undefined;
    CategoryIdType: CategoryIdType | undefined;
    ContentNodeIdTypeEnum: ContentNodeIdTypeEnum | undefined;
    ContentTypeIdTypeEnum: ContentTypeIdTypeEnum | undefined;
    MediaItemIdType: MediaItemIdType | undefined;
    MenuNodeIdTypeEnum: MenuNodeIdTypeEnum | undefined;
    MenuLocationEnum: MenuLocationEnum | undefined;
    MenuItemNodeIdTypeEnum: MenuItemNodeIdTypeEnum | undefined;
    PageIdType: PageIdType | undefined;
    PostIdType: PostIdType | undefined;
    PostFormatIdType: PostFormatIdType | undefined;
    TagIdType: TagIdType | undefined;
    TaxonomyIdTypeEnum: TaxonomyIdTypeEnum | undefined;
    TermNodeIdTypeEnum: TermNodeIdTypeEnum | undefined;
    UserNodeIdTypeEnum: UserNodeIdTypeEnum | undefined;
    UsersConnectionOrderbyEnum: UsersConnectionOrderbyEnum | undefined;
    UserRoleEnum: UserRoleEnum | undefined;
    UsersConnectionSearchColumnEnum: UsersConnectionSearchColumnEnum | undefined;
    MediaItemStatusEnum: MediaItemStatusEnum | undefined;
}
