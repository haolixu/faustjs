/// <reference types="node" />
import type { GQtyClient } from 'gqty';
import { CreateReactClientOptions, ReactClient } from '@gqty/react';
import React from 'react';
import { ClientConfig, WithClient } from '@faustjs/core';
import type { RequiredSchema } from '@faustjs/react';
import type { IncomingMessage } from 'http';
export interface NextClient<Schema extends RequiredSchema, ObjectTypesNames extends string = never, ObjectTypes extends {
    [P in ObjectTypesNames]: {
        __typename: P | undefined;
    };
} = never> extends ReactClient<Schema> {
    client: GQtyClient<Schema>;
    setAsRoot(): void;
    context: WithClient<IncomingMessage, Schema> | undefined;
    useQuery: ReactClient<Schema>['useQuery'];
    useClient(): NextClient<Schema, ObjectTypesNames, ObjectTypes>;
    useHydrateCache: ReactClient<Schema>['useHydrateCache'];
    useCategory(args?: Parameters<Schema['query']['category']>[0]): ReturnType<Schema['query']['category']>;
    usePosts(args?: Parameters<Schema['query']['posts']>[0]): ReturnType<Schema['query']['posts']>;
    usePost(args?: Parameters<Schema['query']['post']>[0]): ReturnType<Schema['query']['post']>;
    usePage(args?: Parameters<Schema['query']['page']>[0]): ReturnType<Schema['query']['page']>;
    usePreview(args: Record<'pageId', string>): ReturnType<Schema['query']['page']>;
    usePreview(args: Record<'postId', string>): ReturnType<Schema['query']['post']>;
    useIsLoading(): boolean;
}
export interface HeadlessContextType {
    client?: NextClient<RequiredSchema>;
}
export declare const HeadlessContext: React.Context<HeadlessContextType>;
export declare function getClient<Schema extends RequiredSchema, ObjectTypesNames extends string = never, ObjectTypes extends {
    [P in ObjectTypesNames]: {
        __typename: P | undefined;
    };
} = never>(clientConfig: ClientConfig<Schema, ObjectTypesNames, ObjectTypes>, createReactClientOpts?: CreateReactClientOptions): NextClient<Schema, ObjectTypesNames, ObjectTypes>;
