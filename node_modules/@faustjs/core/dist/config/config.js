"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getGqlUrl = exports.headlessConfig = exports.normalizeConfig = void 0;
const isString_1 = __importDefault(require("lodash/isString"));
const defaults_1 = __importDefault(require("lodash/defaults"));
const trimEnd_1 = __importDefault(require("lodash/trimEnd"));
const extend_1 = __importDefault(require("lodash/extend"));
const isObject_1 = __importDefault(require("lodash/isObject"));
const lodash_1 = require("lodash");
const utils_1 = require("../utils");
let wpeConfig = {
    wpUrl: '/',
};
let configSet = false;
function normalizeConfig(config) {
    const cfg = defaults_1.default({}, config, {
        blogUrlPrefix: '',
        apiUrl: '',
        apiEndpoint: '/api/auth/wpe-headless',
    });
    Object.keys(cfg).forEach((key) => {
        const value = cfg[key];
        if (!isString_1.default(value)) {
            return;
        }
        cfg[key] = value.trim();
    });
    let { wpUrl, blogUrlPrefix, apiUrl, apiEndpoint } = cfg;
    wpUrl = trimEnd_1.default(wpUrl, '/');
    blogUrlPrefix = trimEnd_1.default(blogUrlPrefix, '/');
    apiUrl = trimEnd_1.default(apiUrl, '/');
    apiEndpoint = trimEnd_1.default(apiEndpoint, '/');
    return extend_1.default(cfg, {
        wpUrl,
        blogUrlPrefix,
        apiUrl,
        apiEndpoint,
    });
}
exports.normalizeConfig = normalizeConfig;
function headlessConfig(config) {
    if (!configSet && !isObject_1.default(config)) {
        throw new Error('You must set your headless configuration at the highest level in your application. `headlessConfig` was called prior to setting the configuration.');
    }
    if (!isObject_1.default(config)) {
        return wpeConfig;
    }
    configSet = true;
    wpeConfig = normalizeConfig(config);
    return wpeConfig;
}
exports.headlessConfig = headlessConfig;
function getGqlUrl() {
    const { wpUrl, gqlUrl } = headlessConfig();
    if (lodash_1.isNil(gqlUrl) || !isString_1.default(gqlUrl)) {
        return `${wpUrl}/graphql`;
    }
    if (utils_1.isValidUrl(gqlUrl)) {
        return trimEnd_1.default(gqlUrl, '/');
    }
    else {
        return `${wpUrl}/${lodash_1.trim(gqlUrl, '/')}`;
    }
}
exports.getGqlUrl = getGqlUrl;
