"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.authorizeHandler = exports.redirect = void 0;
const trim_1 = __importDefault(require("lodash/trim"));
const utils_1 = require("../utils");
const authorize_1 = require("./authorize");
const cookie_1 = require("./cookie");
function redirect(res, url) {
    res.writeHead(302, {
        Location: url,
    });
    res.end();
}
exports.redirect = redirect;
async function authorizeHandler(req, res) {
    var _a;
    try {
        const url = req.url;
        const code = utils_1.getQueryParam(url, 'code');
        const redirectUri = utils_1.getQueryParam(url, 'redirect_uri');
        const host = (_a = req.headers.host) !== null && _a !== void 0 ? _a : '';
        const cookieOptions = {
            request: req,
        };
        const protocol = /localhost/.test(host) ? 'http:' : 'https:';
        const fullRedirectUrl = utils_1.isValidUrl(redirectUri)
            ? redirectUri
            : `${protocol}//${host}/${trim_1.default(redirectUri, '/')}`;
        if (!code && redirectUri) {
            const response = authorize_1.ensureAuthorization(fullRedirectUrl, cookieOptions);
            if (typeof response !== 'string' && (response === null || response === void 0 ? void 0 : response.redirect)) {
                redirect(res, response.redirect);
                return;
            }
            redirect(res, fullRedirectUrl);
            return;
        }
        if (!code || !redirectUri) {
            res.statusCode = 401;
            res.end();
            return;
        }
        const result = await authorize_1.authorize(code);
        cookie_1.storeAccessToken(result.access_token, res, {
            request: req,
        });
        redirect(res, redirectUri);
    }
    catch (e) {
        res.statusCode = 500;
        res.end();
    }
}
exports.authorizeHandler = authorizeHandler;
