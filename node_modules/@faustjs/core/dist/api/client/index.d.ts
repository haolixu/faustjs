/// <reference types="node" />
export * from './schema.generated';
import { ClientOptions, GQtyClient, QueryFetcher, ScalarsEnumsHash, Schema as GQtySchema } from 'gqty';
import type { IncomingMessage } from 'http';
export interface GqlClientSchema {
    query: any;
    mutation: any;
    subscription: any;
}
export interface RequestContext {
    url: string;
    init: RequestInit;
}
export interface ClientConfig<Schema extends GqlClientSchema = never, ObjectTypesNames extends string = never, SchemaObjectTypes extends {
    [P in ObjectTypesNames]: {
        __typename: P | undefined;
    };
} = never> extends Omit<ClientOptions<ObjectTypesNames, SchemaObjectTypes>, 'schema' | 'scalarsEnumsHash' | 'queryFetcher'> {
    schema?: Readonly<GQtySchema>;
    scalarsEnumsHash?: ScalarsEnumsHash;
    queryFetcher?: QueryFetcher;
    context?: WithClient<IncomingMessage, Schema>;
    applyRequestContext?(url: string, init: RequestInit): Promise<RequestContext> | RequestContext;
}
export declare type WithClient<Type, Schema extends GqlClientSchema> = Type & {
    apiClient?: GQtyClient<Schema>;
};
export declare function getClient<Schema extends GqlClientSchema = never, ObjectTypesNames extends string = never, ObjectTypes extends {
    [P in ObjectTypesNames]: {
        __typename: P | undefined;
    };
} = never>(clientConfig: ClientConfig<Schema, ObjectTypesNames, ObjectTypes>): GQtyClient<Schema>;
