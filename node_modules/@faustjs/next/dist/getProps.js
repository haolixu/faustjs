"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getNextStaticProps = exports.getNextServerSideProps = exports.is404 = exports.getProps = exports.CLIENT_CACHE_PROP = void 0;
const core_1 = require("@faustjs/core");
const lodash_1 = require("lodash");
const isNil_1 = __importDefault(require("lodash/isNil"));
const router_context_1 = require("next/dist/shared/lib/router-context");
const react_1 = __importDefault(require("react"));
const client_1 = require("./client");
const utils_1 = require("./utils");
exports.CLIENT_CACHE_PROP = '__CLIENT_CACHE_PROP';
async function getProps(context, { client, Page, props, }) {
    let cacheSnapshot;
    client.setAsRoot();
    if (!isNil_1.default(Page)) {
        const renderResult = await client.prepareReactRender(react_1.default.createElement(router_context_1.RouterContext.Provider, { value: { query: Object.assign({}, context.params) } },
            react_1.default.createElement(client_1.HeadlessContext.Provider, { value: { client } },
                react_1.default.createElement(Page, Object.assign({}, props)))));
        cacheSnapshot = renderResult.cacheSnapshot;
    }
    return {
        props: Object.assign({ [exports.CLIENT_CACHE_PROP]: cacheSnapshot !== null && cacheSnapshot !== void 0 ? cacheSnapshot : null }, props),
    };
}
exports.getProps = getProps;
async function is404({ params }, { client }) {
    if (!params) {
        return false;
    }
    const { client: { inlineResolved, query }, } = client;
    let entityExists = false;
    let result;
    try {
        if (utils_1.hasPostId(params)) {
            result = inlineResolved(() => {
                var _a;
                return (_a = query.post({
                    id: params.postId,
                    idType: core_1.PostIdType.ID,
                })) === null || _a === void 0 ? void 0 : _a.id;
            }, { refetch: true });
        }
        else if (utils_1.hasPostSlug(params)) {
            result = inlineResolved(() => {
                var _a;
                return (_a = query.post({
                    id: params.postSlug,
                    idType: core_1.PostIdType.SLUG,
                })) === null || _a === void 0 ? void 0 : _a.id;
            }, { refetch: true });
        }
        else if (utils_1.hasPostUri(params)) {
            result = inlineResolved(() => {
                var _a;
                return (_a = query.post({
                    id: params.postUri.join('/'),
                    idType: core_1.PostIdType.URI,
                })) === null || _a === void 0 ? void 0 : _a.id;
            }, { refetch: true });
        }
        else if (utils_1.hasPageId(params)) {
            result = inlineResolved(() => {
                var _a;
                return (_a = query.page({
                    id: params.pageId,
                    idType: core_1.PageIdType.ID,
                })) === null || _a === void 0 ? void 0 : _a.id;
            }, { refetch: true });
        }
        else if (utils_1.hasPageUri(params)) {
            result = inlineResolved(() => {
                var _a;
                return (_a = query.page({
                    id: params.pageUri.join('/'),
                    idType: core_1.PageIdType.URI,
                })) === null || _a === void 0 ? void 0 : _a.id;
            }, { refetch: true });
        }
        else if (utils_1.hasCategoryId(params)) {
            result = inlineResolved(() => {
                var _a;
                return (_a = query.category({
                    id: params.categoryId,
                    idType: core_1.CategoryIdType.ID,
                })) === null || _a === void 0 ? void 0 : _a.id;
            }, { refetch: true });
        }
        else if (utils_1.hasCategorySlug(params)) {
            result = inlineResolved(() => {
                var _a;
                return (_a = query.category({
                    id: params.categorySlug,
                    idType: core_1.CategoryIdType.SLUG,
                })) === null || _a === void 0 ? void 0 : _a.id;
            }, { refetch: true });
        }
    }
    catch (e) {
        return true;
    }
    if (result instanceof Promise) {
        entityExists = !isNil_1.default(await result);
    }
    else {
        entityExists = !isNil_1.default(result);
    }
    return !entityExists;
}
exports.is404 = is404;
async function getNextServerSideProps(context, config) {
    const { notFound, redirect } = config;
    if (lodash_1.isBoolean(notFound) && notFound === true) {
        return {
            notFound,
        };
    }
    if (lodash_1.isObject(redirect)) {
        return {
            redirect,
        };
    }
    return getProps(context, config);
}
exports.getNextServerSideProps = getNextServerSideProps;
async function getNextStaticProps(context, config) {
    const { notFound, redirect, revalidate } = config;
    if (lodash_1.isBoolean(notFound) && notFound === true) {
        return {
            notFound,
        };
    }
    if (lodash_1.isObject(redirect)) {
        return {
            redirect,
        };
    }
    const pageProps = await getProps(context, config);
    if (lodash_1.isObject(pageProps.props)) {
        pageProps.revalidate = lodash_1.isNumber(revalidate) ? revalidate : 1;
    }
    return pageProps;
}
exports.getNextStaticProps = getNextStaticProps;
