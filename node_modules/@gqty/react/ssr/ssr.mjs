import { useEffect } from 'react';
import { useOnFirstMount } from '../common.mjs';

function createSSRHelpers(client, { defaults: { refetchAfterHydrate } }) {
  const prepareReactRender = async function prepareReactRender2(element) {
    const ssrPrepass = (await import('react-ssr-prepass')).default;
    return client.prepareRender(() => ssrPrepass(element));
  };
  const useHydrateCache = function useHydrateCache2({
    cacheSnapshot,
    shouldRefetch = refetchAfterHydrate
  }) {
    useOnFirstMount(() => {
      if (cacheSnapshot) {
        client.hydrateCache({ cacheSnapshot, shouldRefetch: false });
      }
    });
    useEffect(() => {
      if (shouldRefetch) {
        client.refetch(client.query).catch(console.error);
      }
    }, [shouldRefetch]);
  };
  return {
    useHydrateCache,
    prepareReactRender
  };
}

export { createSSRHelpers };
