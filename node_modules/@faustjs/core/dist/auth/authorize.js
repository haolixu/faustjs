"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ensureAuthorization = exports.authorize = void 0;
const config_1 = require("../config");
const isString_1 = __importDefault(require("lodash/isString"));
const utils_1 = require("../utils");
const cookie_1 = require("./cookie");
const isomorphic_fetch_1 = __importDefault(require("isomorphic-fetch"));
const isEmpty_1 = __importDefault(require("lodash/isEmpty"));
const trimEnd_1 = __importDefault(require("lodash/trimEnd"));
async function authorize(code) {
    const { wpUrl, apiClientSecret } = config_1.headlessConfig();
    if (!isString_1.default(apiClientSecret)) {
        throw new Error('You must provide an apiClientSecret value in your Headless config in order to use the authorize middleware');
    }
    const response = await isomorphic_fetch_1.default(`${wpUrl}/wp-json/wpac/v1/authorize`, {
        headers: {
            'Content-Type': 'application/json',
            'x-wpe-headless-secret': apiClientSecret,
        },
        method: 'POST',
        body: JSON.stringify({
            code,
        }),
    });
    const result = (await response.json());
    if (!response.ok) {
        throw {
            error: result,
            status: response.status,
        };
    }
    return result;
}
exports.authorize = authorize;
function ensureAuthorization(redirectUri, options) {
    const { wpUrl, apiEndpoint } = config_1.headlessConfig();
    let { apiUrl } = config_1.headlessConfig();
    const accessToken = cookie_1.getAccessToken(options);
    if (!!accessToken && accessToken.length > 0) {
        return accessToken;
    }
    if (!isString_1.default(apiUrl) || isEmpty_1.default(apiUrl)) {
        if (!utils_1.isServerSide()) {
            apiUrl = trimEnd_1.default(window.location.origin, '/');
        }
        else {
            throw new Error('You must provide an apiUrl value in your Headless config in order to use the authorize middleware');
        }
    }
    if (!isString_1.default(apiEndpoint)) {
        throw new Error('You must provide an apiEndpoint value in your Headless config in order to use the authorize middleware');
    }
    const parsedUrl = utils_1.parseUrl(redirectUri);
    if (!parsedUrl) {
        throw new Error('Invalid redirectUri for authorization');
    }
    return {
        redirect: `${wpUrl}/generate?redirect_uri=${encodeURIComponent(`${apiUrl}${apiEndpoint}?redirect_uri=${encodeURIComponent(redirectUri)}`)}`,
    };
}
exports.ensureAuthorization = ensureAuthorization;
