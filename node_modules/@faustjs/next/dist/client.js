"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getClient = exports.HeadlessContext = void 0;
const react_1 = require("@gqty/react");
const react_2 = __importStar(require("react"));
const router_1 = require("next/router");
const isObject_1 = __importDefault(require("lodash/isObject"));
const merge_1 = __importDefault(require("lodash/merge"));
const core_1 = require("@faustjs/core");
const isString_1 = __importDefault(require("lodash/isString"));
const defaults_1 = __importDefault(require("lodash/defaults"));
const isFunction_1 = __importDefault(require("lodash/isFunction"));
const utils_1 = require("./utils");
exports.HeadlessContext = react_2.default.createContext({});
function getClient(clientConfig, createReactClientOpts) {
    var _a;
    const coreClient = core_1.getClient(clientConfig);
    let reactClientOpts = {
        defaults: {
            suspense: false,
            staleWhileRevalidate: false,
        },
    };
    if (isObject_1.default(createReactClientOpts)) {
        reactClientOpts = merge_1.default(reactClientOpts, createReactClientOpts);
    }
    const reactClient = react_1.createReactClient(coreClient, reactClientOpts);
    const haveServerContext = isObject_1.default((_a = clientConfig.context) === null || _a === void 0 ? void 0 : _a.apiClient);
    let nextClient;
    function useClient() {
        var _a;
        let client = (_a = react_2.useContext(exports.HeadlessContext)) === null || _a === void 0 ? void 0 : _a.client;
        if (haveServerContext || !isObject_1.default(client)) {
            client = nextClient;
        }
        return client;
    }
    const useQuery = (...args) => {
        return useClient().useQuery(...args);
    };
    const useLazyQuery = (...args) => {
        return useClient().useLazyQuery(...args);
    };
    const useTransactionQuery = (fn, ...args) => {
        return useClient().useTransactionQuery(fn, ...args);
    };
    const usePaginatedQuery = (...args) => {
        return useClient().usePaginatedQuery(...args);
    };
    const useMutation = (...args) => {
        return useClient().useMutation(...args);
    };
    const useSubscription = () => {
        return useClient().useSubscription();
    };
    function usePosts(args) {
        const { query } = router_1.useRouter();
        const { posts } = useQuery();
        const params = defaults_1.default({}, args);
        if (utils_1.hasCategoryId(query)) {
            params.where = Object.assign({ categoryId: Number(query.categoryId) }, params.where);
        }
        else if (utils_1.hasCategorySlug(query)) {
            params.where = Object.assign({ categoryName: query.categorySlug }, params.where);
        }
        return posts(params);
    }
    function usePost(args) {
        const router = router_1.useRouter();
        const { post } = useQuery();
        let params = defaults_1.default({}, args);
        const { query } = router;
        if (utils_1.hasPostId(query)) {
            params = Object.assign({ id: query.postId, idType: core_1.PostIdType.ID }, params);
        }
        else if (utils_1.hasPostSlug(query)) {
            params = Object.assign({ id: query.postSlug, idType: core_1.PostIdType.SLUG }, params);
        }
        else if (utils_1.hasPostUri(query)) {
            params = Object.assign({ id: query.postUri.join('/'), idType: core_1.PostIdType.URI }, params);
        }
        if (!isString_1.default(params.id)) {
            throw new Error('Invalid parameters for usePost, you must send in an id or specify known URL params in your config');
        }
        return post(params);
    }
    function usePage(args) {
        const { query } = router_1.useRouter();
        const { page } = useQuery();
        let params = defaults_1.default({}, args);
        if (utils_1.hasPageId(query)) {
            params = Object.assign({ id: query.pageId, idType: core_1.PageIdType.ID }, params);
        }
        if (utils_1.hasPageUri(query)) {
            params = Object.assign({ id: query.pageUri.join('/'), idType: core_1.PageIdType.URI }, params);
        }
        if (!isString_1.default(params.id)) {
            throw new Error('Invalid parameters for usePage, you must send in an id or specify known URL params in your config');
        }
        return page(params);
    }
    function usePreview(args) {
        var _a, _b;
        const client = useClient();
        react_2.useEffect(() => {
            if (typeof window === 'undefined') {
                return;
            }
            const authResult = core_1.ensureAuthorization(window.location.href, {
                request: client.context,
            });
            if (!isString_1.default(authResult) &&
                isString_1.default(authResult === null || authResult === void 0 ? void 0 : authResult.redirect) &&
                !haveServerContext) {
                setTimeout(() => {
                    window.location.replace(authResult === null || authResult === void 0 ? void 0 : authResult.redirect);
                }, 200);
            }
        }, [client]);
        const { post, page } = client.useQuery();
        const pagePreview = page({
            id: (_a = args === null || args === void 0 ? void 0 : args.pageId) !== null && _a !== void 0 ? _a : '',
            idType: core_1.PageIdType.DATABASE_ID,
        });
        const postPreview = post({
            id: (_b = args === null || args === void 0 ? void 0 : args.postId) !== null && _b !== void 0 ? _b : '',
            idType: core_1.PostIdType.DATABASE_ID,
        });
        if (utils_1.hasPageId(args)) {
            return pagePreview;
        }
        if (utils_1.hasPostId(args)) {
            return postPreview;
        }
    }
    function useCategory(args) {
        const { query } = router_1.useRouter();
        const { category } = useQuery();
        let params = defaults_1.default({}, args);
        if (utils_1.hasCategoryId(query)) {
            params = Object.assign({ id: query.categoryId, idType: core_1.CategoryIdType.ID }, params);
        }
        if (utils_1.hasCategorySlug(query)) {
            params = Object.assign({ id: query.categorySlug, idType: core_1.CategoryIdType.SLUG }, params);
        }
        if (!isString_1.default(params.id)) {
            throw new Error('Invalid parameters for useCategory, you must send in an id or specify known URL params in your config');
        }
        return category(params);
    }
    const useHydrateCache = ({ cacheSnapshot, shouldRefetch, }) => {
        const snapshotCache = react_2.useRef('');
        const { client } = useClient();
        if (isString_1.default(cacheSnapshot) && snapshotCache.current !== cacheSnapshot) {
            snapshotCache.current = cacheSnapshot;
            client.hydrateCache({ cacheSnapshot, shouldRefetch: false });
        }
        react_2.useEffect(() => {
            if (!isObject_1.default(client) || !isFunction_1.default(client.refetch)) {
                return;
            }
            if (shouldRefetch) {
                client.refetch(client.query).catch(console.error);
            }
        }, [shouldRefetch, client]);
    };
    function useIsLoading() {
        return useQuery().$state.isLoading;
    }
    nextClient = Object.assign(Object.assign({ client: coreClient }, reactClient), { setAsRoot() {
            nextClient.useQuery = reactClient.useQuery;
            nextClient.useLazyQuery = reactClient.useLazyQuery;
            nextClient.useTransactionQuery = reactClient.useTransactionQuery;
            nextClient.usePaginatedQuery = reactClient.usePaginatedQuery;
            nextClient.useMutation = reactClient.useMutation;
            nextClient.useSubscription = reactClient.useSubscription;
            nextClient.useClient = () => nextClient;
        }, context: clientConfig.context, useQuery,
        useLazyQuery,
        useTransactionQuery,
        usePaginatedQuery,
        useMutation,
        useSubscription,
        useClient,
        useHydrateCache,
        useCategory,
        usePosts,
        usePost,
        usePage,
        usePreview,
        useIsLoading });
    return nextClient;
}
exports.getClient = getClient;
