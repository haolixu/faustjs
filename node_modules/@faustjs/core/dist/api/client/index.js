"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getClient = void 0;
__exportStar(require("./schema.generated"), exports);
const gqty_1 = require("gqty");
const isomorphic_fetch_1 = __importDefault(require("isomorphic-fetch"));
const isString_1 = __importDefault(require("lodash/isString"));
const isObject_1 = __importDefault(require("lodash/isObject"));
const auth_1 = require("../../auth");
const isFunction_1 = __importDefault(require("lodash/isFunction"));
const isNil_1 = __importDefault(require("lodash/isNil"));
const omit_1 = __importDefault(require("lodash/omit"));
const config_1 = require("../../config/config");
function createQueryFetcher(context, applyRequestContext) {
    return async function (query, variables) {
        const url = config_1.getGqlUrl();
        const token = auth_1.getAccessToken({
            request: context,
        });
        const headers = {
            'Content-Type': 'application/json',
        };
        if (isString_1.default(token)) {
            headers.Authorization = `Bearer ${token}`;
        }
        const init = {
            method: 'POST',
            headers,
            body: JSON.stringify({
                query,
                variables,
            }),
            mode: 'cors',
        };
        let requestContext = { url, init };
        if (isFunction_1.default(applyRequestContext)) {
            requestContext = await applyRequestContext(url, init);
        }
        const response = await isomorphic_fetch_1.default(requestContext.url, requestContext.init);
        const json = await response.json();
        return json;
    };
}
function getClient(clientConfig) {
    const { context, schema, scalarsEnumsHash, queryFetcher: configQueryFetcher, applyRequestContext, } = clientConfig;
    if (isObject_1.default(context) && isObject_1.default(context.apiClient)) {
        return context.apiClient;
    }
    if (isNil_1.default(schema) || isNil_1.default(scalarsEnumsHash)) {
        throw new Error('You must specify a schema and scalarEnumsHash in order to create a client.');
    }
    const apiClient = gqty_1.createClient(Object.assign({ schema,
        scalarsEnumsHash, queryFetcher: configQueryFetcher !== null && configQueryFetcher !== void 0 ? configQueryFetcher : createQueryFetcher(context, applyRequestContext) }, omit_1.default(clientConfig, 'context', 'applyRequestContext')));
    if (isObject_1.default(clientConfig.context)) {
        clientConfig.context.apiClient = apiClient;
    }
    return apiClient;
}
exports.getClient = getClient;
