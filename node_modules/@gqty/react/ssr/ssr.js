'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const React = require('react');
const common = require('../common.js');

function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () {
            return e[k];
          }
        });
      }
    });
  }
  n['default'] = e;
  return Object.freeze(n);
}

function createSSRHelpers(client, { defaults: { refetchAfterHydrate } }) {
  const prepareReactRender = async function prepareReactRender2(element) {
    const ssrPrepass = (await Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(require('react-ssr-prepass')); })).default;
    return client.prepareRender(() => ssrPrepass(element));
  };
  const useHydrateCache = function useHydrateCache2({
    cacheSnapshot,
    shouldRefetch = refetchAfterHydrate
  }) {
    common.useOnFirstMount(() => {
      if (cacheSnapshot) {
        client.hydrateCache({ cacheSnapshot, shouldRefetch: false });
      }
    });
    React.useEffect(() => {
      if (shouldRefetch) {
        client.refetch(client.query).catch(console.error);
      }
    }, [shouldRefetch]);
  };
  return {
    useHydrateCache,
    prepareReactRender
  };
}

exports.createSSRHelpers = createSSRHelpers;
