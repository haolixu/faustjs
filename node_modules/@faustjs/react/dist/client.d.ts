import { CategoryIdType, ClientConfig, PageIdType, PostIdType } from '@faustjs/core';
import { CreateReactClientOptions, ReactClient as GQtyReactClient } from '@gqty/react';
import { GQtyClient } from 'gqty';
export interface Node {
    id?: string | null;
}
export interface RequiredQuery {
    posts: (args?: {
        where?: {
            categoryId?: number;
            categoryName?: string;
        };
    }) => unknown;
    post: (args: {
        id: string;
        idType?: PostIdType;
    }) => Node | null | undefined;
    pages: (args?: any) => unknown;
    page: (args: {
        id: string;
        idType?: PageIdType;
    }) => Node | null | undefined;
    category: (args: {
        id: string;
        idType?: CategoryIdType;
    }) => Node | null | undefined;
    generalSettings?: unknown;
}
export interface RequiredSchema {
    query: RequiredQuery;
    mutation: any;
    subscription: any;
}
export interface ReactClient<Schema extends RequiredSchema> extends GQtyReactClient<Schema> {
    client: GQtyClient<Schema>;
    useIsLoading(): boolean;
}
export declare function getClient<Schema extends RequiredSchema, ObjectTypesNames extends string = never, ObjectTypes extends {
    [P in ObjectTypesNames]: {
        __typename: P | undefined;
    };
} = never>(clientConfig: ClientConfig<Schema, ObjectTypesNames, ObjectTypes>, createReactClientOpts?: CreateReactClientOptions): ReactClient<Schema>;
